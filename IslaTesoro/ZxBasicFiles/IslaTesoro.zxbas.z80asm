	.zxbasic
	org 24000
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 1024
__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
	ld a, 5
	call _Sonido
	ld a, 6
	call _Sonido
	ld a, 5
	call _Sonido
	call _IniciarGraficosIsla
	call _Instrucciones
__LABEL__inicio:
	ld de, 0
	ld hl, 0
	call RANDOMIZE
	call _IniciarGraficosIsla
	call _SeleccionarDificultad
	call _GenerarPartida
	ld a, (_Primera)
	or a
	jp nz, __LABEL1
	ld a, 8
	call _Sonido
	ld a, 1
	ld (_Primera), a
__LABEL1:
	xor a
	push af
	call _MostrarMapa
	ld de, 0
	ld hl, 0
	call RANDOMIZE
	ld a, 1
	call _Sonido
__LABEL__entrada:
	call INKEY
	ex de, hl
	ld hl, _Accion
	call __STORE_STR2
	ld de, __LABEL2
	ld hl, (_Accion)
	xor a
	call __STREQ
	or a
	jp z, __LABEL4
	ld a, 255
	push af
	xor a
	push af
	call _DesplazarJugador
	call _ComprobarCamino
	or a
	jp z, __LABEL__finPartida
__LABEL6:
__LABEL7:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL7
__LABEL8:
__LABEL4:
	ld de, __LABEL10
	ld hl, (_Accion)
	xor a
	call __STREQ
	or a
	jp z, __LABEL12
	ld a, 1
	push af
	xor a
	push af
	call _DesplazarJugador
	call _ComprobarCamino
	or a
	jp z, __LABEL__finPartida
__LABEL14:
__LABEL15:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL15
__LABEL16:
__LABEL12:
	ld de, __LABEL17
	ld hl, (_Accion)
	xor a
	call __STREQ
	or a
	jp z, __LABEL19
	ld a, 1
	push af
	ld a, 255
	push af
	call _DesplazarJugador
	call _ComprobarCamino
	or a
	jp z, __LABEL__finPartida
__LABEL21:
__LABEL22:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL22
__LABEL23:
__LABEL19:
	ld de, __LABEL24
	ld hl, (_Accion)
	xor a
	call __STREQ
	or a
	jp z, __LABEL26
	ld a, 1
	push af
	ld a, 1
	push af
	call _DesplazarJugador
	call _ComprobarCamino
	or a
	jp z, __LABEL__finPartida
__LABEL28:
__LABEL29:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL29
__LABEL30:
__LABEL26:
	ld de, __LABEL31
	ld hl, (_Accion)
	xor a
	call __STREQ
	or a
	jp z, __LABEL33
	xor a
	push af
	call _MostrarMapa
	xor a
	ld (_cuenta), a
	jp __LABEL34
__LABEL37:
	ld a, 100
	push af
	call _DesplazarPiratas
__LABEL38:
	ld hl, _cuenta
	inc (hl)
__LABEL34:
	ld a, (_AvancesPirataMapa)
	ld hl, (_cuenta - 1)
	cp h
	jp nc, __LABEL37
__LABEL36:
__LABEL39:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL39
__LABEL40:
__LABEL33:
	ld a, 1
	push af
	call _DesplazarPiratas
	call _ActualizarOlas
	call _ComprobarPiratas
	or a
	jp z, __LABEL__finPartida
__LABEL42:
	jp __LABEL__entrada
__LABEL__finPartida:
	xor a
	call INK
	call COPY_ATTR
	ld a, 5
	call PAPER
	call COPY_ATTR
	ld a, 5
	call BORDER
	call CLS
	ld a, 12
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL43
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL__esperaRespuesta:
	call INKEY
	ex de, hl
	ld hl, _res
	call __STORE_STR2
	ld de, __LABEL44
	ld hl, (_res)
	xor a
	call __STREQ
	or a
	jp nz, __LABEL__inicio
__LABEL46:
	ld de, __LABEL47
	ld hl, (_res)
	xor a
	call __STREQ
	or a
	jp nz, __LABEL__fin
__LABEL49:
	jp __LABEL__esperaRespuesta
__LABEL__fin:
	call CLS
	ld a, 12
	push af
	ld a, 14
	call PRINT_AT
	ld hl, __LABEL50
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, 0
	ld b, h
	ld c, l
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	exx
	pop iy
	pop ix
	ei
	ret
__CALL_BACK__:
	DEFW 0
_pos:
#line 27
		PROC
		call __LOAD_S_POSN
		ld a, e
		ENDP
#line 31
_pos__leave:
	ret
_csrlin:
#line 25
		PROC
		call __LOAD_S_POSN
		ld a, d
		ENDP
#line 29
_csrlin__leave:
	ret
_input:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld de, __LABEL9
	ld bc, -2
	call __PSTORE_STR
	ld a, (23611)
	push af
	ld h, 8
	pop af
	or h
	ld (23611), a
__LABEL51:
	call _PRIVATEInputShowCursor
	xor a
	ld (_input_LastK), a
__LABEL54:
__LABEL56:
	ld a, (_input_LastK)
	or a
	jp z, __LABEL54
__LABEL55:
	call _PRIVATEInputHideCursor
	ld a, (_input_LastK)
	sub 12
	jp nz, __LABEL57
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	ld a, h
	or l
	jp z, __LABEL60
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	push hl
	ld de, 1
	pop hl
	or a
	sbc hl, de
	jp nz, __LABEL61
	ld de, __LABEL9
	ld bc, -2
	call __PSTORE_STR
	jp __LABEL62
__LABEL61:
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld hl, 0
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	dec hl
	dec hl
	push hl
	xor a
	call __STRSLICE
	ld d, h
	ld e, l
	ld bc, -2
	call __PSTORE_STR2
__LABEL62:
	ld hl, __LABEL63
	xor a
	call __PRINTSTR
__LABEL60:
	jp __LABEL58
__LABEL57:
	ld a, (_input_LastK)
	sub 32
	ccf
	sbc a, a
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL450
	ld a, h
__LABEL450:
	or a
	jp z, __LABEL65
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld a, (_input_LastK)
	push af
	ld hl, 1
	call CHR
	ex de, hl
	pop hl
	push de
	call __ADDSTR
	ex (sp), hl
	call __MEM_FREE
	pop hl
	ld d, h
	ld e, l
	ld bc, -2
	call __PSTORE_STR2
	ld a, (_input_LastK)
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
__LABEL65:
__LABEL58:
__LABEL53:
	ld a, (_input_LastK)
	sub 13
	jp nz, __LABEL51
__LABEL52:
	ld (ix-4), 1
	ld (ix-3), 0
	jp __LABEL66
__LABEL69:
	xor a
	call OVER_TMP
	ld a, 8
	push af
	ld hl, 1
	call CHR
	push hl
	ld de, __LABEL71
	pop hl
	push hl
	call __ADDSTR
	ex (sp), hl
	call __MEM_FREE
	pop hl
	push hl
	ld a, 8
	push af
	ld hl, 1
	call CHR
	ex de, hl
	pop hl
	push hl
	push de
	call __ADDSTR
	pop de
	ex (sp), hl
	push de
	call __MEM_FREE
	pop hl
	call __MEM_FREE
	pop hl
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
__LABEL70:
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	ld (ix-4), l
	ld (ix-3), h
__LABEL66:
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL69
__LABEL68:
	ld l, (ix-2)
	ld h, (ix-1)
	call __LOADSTR
_input__leave:
	ex af, af'
	exx
	ld l, (ix-2)
	ld h, (ix-1)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_PRIVATEInputShowCursor:
	call _csrlin
	push af
	call _pos
	call PRINT_AT
	xor a
	call OVER_TMP
	ld a, 1
	call FLASH_TMP
	ld de, __LABEL63
	ld hl, __LABEL71
	call __ADDSTR
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
_PRIVATEInputShowCursor__leave:
	ret
_PRIVATEInputHideCursor:
	call _csrlin
	push af
	call _pos
	call PRINT_AT
	xor a
	call OVER_TMP
	xor a
	call FLASH_TMP
	ld de, __LABEL63
	ld hl, __LABEL71
	call __ADDSTR
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
_PRIVATEInputHideCursor__leave:
	ret
_DescomprimirImagen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -10
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 9
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL451
	ld bc, 2
	ldir
	ld l, (ix+4)
	ld h, (ix+5)
	ld (ix-10), l
	ld (ix-9), h
__LABEL72:
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld de, 23296
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL73
	ld l, (ix+4)
	ld h, (ix+5)
	ld a, (hl)
	ld (ix-1), a
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	push hl
	ld de, 23296
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL74
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	ld a, (hl)
	ld (ix-2), a
	sub (ix-1)
	jp nz, __LABEL76
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-6), l
	ld (ix-5), h
	ld l, (ix-6)
	ld h, (ix-5)
	inc hl
	inc hl
	ld (ix-6), l
	ld (ix-5), h
	ld l, (ix-6)
	ld h, (ix-5)
	ld (ix-8), l
	ld (ix-7), h
__LABEL78:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld hl, 0
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL79
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	pop hl
	ld (hl), a
	ld l, (ix-6)
	ld h, (ix-5)
	dec hl
	ld (ix-6), l
	ld (ix-5), h
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	ld (ix-4), l
	ld (ix-3), h
	jp __LABEL78
__LABEL79:
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	inc hl
	inc hl
	ld (ix+4), l
	ld (ix+5), h
	jp __LABEL77
__LABEL76:
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	pop hl
	ld (hl), a
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	ld (ix-4), l
	ld (ix-3), h
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	ld (ix+4), l
	ld (ix+5), h
__LABEL77:
	jp __LABEL75
__LABEL74:
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	pop hl
	ld (hl), a
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	ld (ix-4), l
	ld (ix-3), h
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	ld (ix+4), l
	ld (ix+5), h
__LABEL75:
	jp __LABEL72
__LABEL73:
_DescomprimirImagen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_Dibujar:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -26
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 25
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -7
	add hl, bc
	ex de, hl
	ld hl, __LABEL452
	ld bc, 2
	ldir
	ld l, (ix+4)
	ld h, (ix+5)
	ld (ix-5), l
	ld (ix-4), h
__LABEL80:
	ld a, (ix-3)
	sub 255
	jp z, __LABEL81
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld (ix-1), a
	push af
	ld a, 191
	pop hl
	cp h
	jp nc, __LABEL83
	ld a, (ix-1)
	ld (ix-3), a
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld (ix-5), l
	ld (ix-4), h
__LABEL83:
	ld a, (ix-3)
	sub 200
	jp nz, __LABEL84
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-13), l
	ld (ix-12), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-5)
	ld h, (ix-4)
	ld de, 4
	add hl, de
	ld (ix-5), l
	ld (ix-4), h
	ld l, (ix-13)
	ld h, (ix-12)
	ld a, l
	push af
	ld l, (ix-15)
	ld h, (ix-14)
	ld a, l
	call PLOT
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	ld l, (ix-13)
	ld h, (ix-12)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	push hl
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld l, (ix-15)
	ld h, (ix-14)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	call DRAW
	jp __LABEL85
__LABEL84:
	ld a, (ix-3)
	sub 201
	jp nz, __LABEL86
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-13), l
	ld (ix-12), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-5)
	ld h, (ix-4)
	ld de, 4
	add hl, de
	ld (ix-5), l
	ld (ix-4), h
	ld l, (ix-13)
	ld h, (ix-12)
	ld a, l
	push af
	ld l, (ix-15)
	ld h, (ix-14)
	ld a, l
	call PLOT
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	ld l, (ix-13)
	ld h, (ix-12)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	push hl
	ld hl, 0
	call DRAW
	ld hl, 0
	push hl
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld l, (ix-15)
	ld h, (ix-14)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	call DRAW
	ld l, (ix-13)
	ld h, (ix-12)
	push hl
	ld l, (ix-17)
	ld h, (ix-16)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	push hl
	ld hl, 0
	call DRAW
	ld hl, 0
	push hl
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	ld l, (ix-19)
	ld h, (ix-18)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	call DRAW
	jp __LABEL87
__LABEL86:
	ld a, (ix-3)
	sub 202
	jp nz, __LABEL88
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-13), l
	ld (ix-12), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-21), l
	ld (ix-20), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	inc hl
	ld (ix-5), l
	ld (ix-4), h
	ld l, (ix-13)
	ld h, (ix-12)
	ld a, l
	push af
	ld l, (ix-15)
	ld h, (ix-14)
	ld a, l
	push af
	ld l, (ix-21)
	ld h, (ix-20)
	ld a, l
	call CIRCLE
	jp __LABEL89
__LABEL88:
	ld a, (ix-3)
	sub 203
	jp nz, __LABEL90
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-13), l
	ld (ix-12), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-5)
	ld h, (ix-4)
	ld de, 4
	add hl, de
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-21), l
	ld (ix-20), h
	ld l, (ix-21)
	ld h, (ix-20)
	ld b, 8
__LABEL453:
	add hl, hl
	djnz __LABEL453
	ld (ix-21), l
	ld (ix-20), h
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld l, (ix-5)
	ld h, (ix-4)
	ld de, 5
	add hl, de
	ld a, (hl)
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	call __BOR16
	ld (ix-21), l
	ld (ix-20), h
	ld l, (ix-5)
	ld h, (ix-4)
	ld de, 6
	add hl, de
	ld (ix-5), l
	ld (ix-4), h
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, 32768
	pop hl
	or a
	sbc hl, de
	ccf
	jp nc, __LABEL92
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, -32768
	add hl, de
	ld de, 0
	call __U32TOFREG
	ld hl, -26
	call __PSTOREF
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __DIVF
	ld hl, -26
	call __PSTOREF
	jp __LABEL93
__LABEL92:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, 0
	call __U32TOFREG
	ld hl, -26
	call __PSTOREF
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __DIVF
	ld hl, -26
	call __PSTOREF
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	call __MULF
	ld hl, -26
	call __PSTOREF
__LABEL93:
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	ld hl, 01235h
	push hl
	ld hl, 0FA0Eh
	push hl
	ld h, 07Bh
	push hl
	call __MULF
	ld hl, -26
	call __PSTOREF
	ld l, (ix-13)
	ld h, (ix-12)
	ld a, l
	push af
	ld l, (ix-15)
	ld h, (ix-14)
	ld a, l
	call PLOT
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	ld l, (ix-13)
	ld h, (ix-12)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	push hl
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld l, (ix-15)
	ld h, (ix-14)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	push hl
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	call DRAW3
	jp __LABEL91
__LABEL90:
	ld a, (ix-3)
	sub 204
	jp nz, __LABEL94
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-13), l
	ld (ix-12), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	ld (ix-5), l
	ld (ix-4), h
	ld l, (ix-15)
	ld h, (ix-14)
	ld a, l
	push af
	ld l, (ix-13)
	ld h, (ix-12)
	ld a, l
	call _FloodFill
	jp __LABEL95
__LABEL94:
	ld a, (ix-3)
	sub 205
	jp nz, __LABEL97
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-13), l
	ld (ix-12), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	ld (ix-5), l
	ld (ix-4), h
	ld l, (ix-15)
	ld h, (ix-14)
	ld a, l
	push af
	ld l, (ix-13)
	ld h, (ix-12)
	ld a, l
	call PRINT_AT
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
__LABEL97:
__LABEL95:
__LABEL91:
__LABEL89:
__LABEL87:
__LABEL85:
	jp __LABEL80
__LABEL81:
__LABEL98:
	ld l, (ix-7)
	ld h, (ix-6)
	push hl
	ld de, 23296
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL99
	ld l, (ix-5)
	ld h, (ix-4)
	ld a, (hl)
	ld (ix-1), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	push hl
	ld de, 23296
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL100
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld a, (hl)
	ld (ix-2), a
	sub (ix-1)
	jp nz, __LABEL102
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	ld a, (hl)
	ld l, a
	ld h, 0
	ld (ix-9), l
	ld (ix-8), h
	ld l, (ix-9)
	ld h, (ix-8)
	inc hl
	inc hl
	ld (ix-9), l
	ld (ix-8), h
	ld l, (ix-9)
	ld h, (ix-8)
	ld (ix-11), l
	ld (ix-10), h
__LABEL104:
	ld l, (ix-9)
	ld h, (ix-8)
	push hl
	ld hl, 0
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL105
	ld l, (ix-7)
	ld h, (ix-6)
	push hl
	ld a, (ix-1)
	pop hl
	ld (hl), a
	ld l, (ix-9)
	ld h, (ix-8)
	dec hl
	ld (ix-9), l
	ld (ix-8), h
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	ld (ix-7), l
	ld (ix-6), h
	jp __LABEL104
__LABEL105:
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	inc hl
	inc hl
	ld (ix-5), l
	ld (ix-4), h
	jp __LABEL103
__LABEL102:
	ld l, (ix-7)
	ld h, (ix-6)
	push hl
	ld a, (ix-1)
	pop hl
	ld (hl), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	ld (ix-7), l
	ld (ix-6), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld (ix-5), l
	ld (ix-4), h
__LABEL103:
	jp __LABEL101
__LABEL100:
	ld l, (ix-7)
	ld h, (ix-6)
	push hl
	ld a, (ix-1)
	pop hl
	ld (hl), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	ld (ix-7), l
	ld (ix-6), h
	ld l, (ix-5)
	ld h, (ix-4)
	inc hl
	ld (ix-5), l
	ld (ix-4), h
__LABEL101:
	jp __LABEL98
__LABEL99:
_Dibujar__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_FloodFill:
#line 176
		ld d, a
		pop hl
		pop bc
		ld e, b
		push hl
fill:
		ld l,255
		push hl
nextrun:
		ld a,d
		and 7
		inc a
		ld b,a
		ld a,1
bitpos:
		rrca
		djnz bitpos
		ld c,b
		ld b,a
seekleft:
		ld a,d
		or a
		jr z,goright
		dec d
		rlc b
		call scrpos
		jr nz,seekleft
seekright:
		rrc b
		inc d
		jr z,rightedge
goright:
		call scrpos
		jr z,rightedge
		ld (hl),a
		inc e
		call checkadj
		dec e
		dec e
		call checkadj
		inc e
		jr seekright
rightedge:
		pop de
		ld a,e
		inc a
		jr nz,nextrun
		ret
scrpos:
		ld a,e
		and 248
		rra
		scf
		rra
		rra
		ld l,a
		xor e
		and 248
		xor e
		ld h,a
		ld a,l
		xor d
		and 7
		xor d
		rrca
		rrca
		rrca
		ld l,a
		ld a,b
		or (hl)
		cp (hl)
		ret
checkadj:
		sla c
		ld a,e
		cp 192
		ret nc
		call scrpos+1
		ret z
		inc c
		bit 2,c
		ret nz
		pop hl
		push de
		jp (hl)
#line 261
_FloodFill__leave:
	ret
_Instrucciones:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 7
	call INK
	call COPY_ATTR
	xor a
	call PAPER
	call COPY_ATTR
	xor a
	call BORDER
	call CLS
	xor a
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL106
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 2
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL107
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL108
	xor a
	call __PRINTSTR
	xor a
	call INK_TMP
	ld a, 7
	call PAPER_TMP
	ld hl, __LABEL109
	xor a
	call __PRINTSTR
	ld a, 7
	call INK_TMP
	xor a
	call PAPER_TMP
	ld hl, __LABEL110
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld hl, __LABEL111
	xor a
	call __PRINTSTR
	ld hl, __LABEL112
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL113
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call PRINT_EOL
	ld hl, __LABEL114
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL115
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL116
	xor a
	call __PRINTSTR
	ld a, 6
	call INK_TMP
	xor a
	call PAPER_TMP
	ld a, 1
	call BRIGHT_TMP
	ld hl, __LABEL117
	xor a
	call __PRINTSTR
	ld a, 7
	call INK_TMP
	xor a
	call PAPER_TMP
	xor a
	call BRIGHT_TMP
	ld hl, __LABEL118
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld hl, __LABEL119
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL120
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call PRINT_EOL
	ld hl, __LABEL121
	xor a
	call __PRINTSTR
	ld hl, __LABEL122
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL123
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL124
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL125
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL126
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call PRINT_EOL
	ld hl, __LABEL127
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call _Esperar
	call CLS
	ld hl, __LABEL128
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL129
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL130
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL131
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL132
	xor a
	call __PRINTSTR
	ld hl, __LABEL133
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call PRINT_EOL
	ld hl, __LABEL134
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL135
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL136
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL137
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL138
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call PRINT_EOL
	call PRINT_EOL
	call PRINT_EOL
	ld hl, __LABEL139
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 21
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL127
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call _Esperar
_Instrucciones__leave:
	ld sp, ix
	pop ix
	ret
_SeleccionarDificultad:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
__LABEL140:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL140
__LABEL141:
	ld a, 12
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL142
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL__esperaNivel:
	call INKEY
	ld d, h
	ld e, l
	ld bc, -2
	call __PSTORE_STR2
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld de, __LABEL9
	pop hl
	xor a
	call __STRNE
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld de, __LABEL143
	pop hl
	xor a
	call __STRGE
	ld h, a
	pop af
	or a
	jr z, __LABEL454
	ld a, h
__LABEL454:
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld de, __LABEL144
	pop hl
	xor a
	call __STRLE
	ld h, a
	pop af
	or a
	jr z, __LABEL455
	ld a, h
__LABEL455:
	or a
	jp z, __LABEL145
	ld l, (ix-2)
	ld h, (ix-1)
	xor a
	call VAL
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	ld hl, 00000h
	push hl
	ld hl, 00048h
	push hl
	ld h, 087h
	push hl
	call __SUBF
	call __FTOU32REG
	ld a, l
	ld (_PasosPiratas), a
	ld l, (ix-2)
	ld h, (ix-1)
	xor a
	call VAL
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __DIVF
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	call __ADDF
	call __FTOU32REG
	ld a, l
	ld (_PasosJugadorRetroceso), a
	ld l, (ix-2)
	ld h, (ix-1)
	xor a
	call VAL
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00040h
	ld bc, 00000h
	call __DIVF
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	call __ADDF
	call __FTOU32REG
	ld a, l
	ld (_AvancesPirataMapa), a
	ld l, (ix-2)
	ld h, (ix-1)
	xor a
	call VAL
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00048h
	ld bc, 00000h
	call __MULF
	ld hl, 00000h
	push hl
	ld hl, 0007Ah
	push hl
	ld h, 089h
	push hl
	call __SUBF
	call __FTOU32REG
	ld (_VelocidadTemplo), hl
	ld l, (ix-2)
	ld h, (ix-1)
	xor a
	call VAL
	push bc
	push de
	push af
	ld a, 088h
	ld de, 0007Ah
	ld bc, 00000h
	call __MULF
	ld hl, 00000h
	push hl
	ld hl, 0401Ch
	push hl
	ld h, 08Dh
	push hl
	call __SUBF
	call __FTOU32REG
	ld (_HastaTeclaArena), hl
	ld l, (ix-2)
	ld h, (ix-1)
	xor a
	call VAL
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	ld hl, 00000h
	push hl
	ld hl, 0803Bh
	push hl
	ld h, 08Ah
	push hl
	call __SUBF
	call __FTOU32REG
	ld (_ParaTeclaArena), hl
	jp __LABEL146
__LABEL145:
	jp __LABEL__esperaNivel
__LABEL146:
	call CLS
_SeleccionarDificultad__leave:
	ex af, af'
	exx
	ld l, (ix-2)
	ld h, (ix-1)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ActualizarOlas:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -10
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 9
	ld d, h
	ld e, l
	inc de
	ldir
	ld (ix-1), 1
	jp __LABEL147
__LABEL150:
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-3), a
	call RND
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-2), a
	push af
	ld hl, 0
	push hl
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	cp (hl)
	sbc a, a
	push af
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-3)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	pop hl
	cp h
	sbc a, a
	pop de
	or d
	push af
	ld a, (ix-2)
	ld hl, (_Piratas.__DATA__ + 0 - 1)
	sub h
	push af
	ld a, (ix-3)
	ld hl, (_Piratas.__DATA__ + 1 - 1)
	sub h
	push af
	ld a, (ix-3)
	push af
	ld a, (_Piratas.__DATA__ + 1)
	dec a
	ld h, a
	pop af
	sub h
	ld h, a
	pop af
	or a
	jr z, __LABEL456
	ld a, h
__LABEL456:
	pop de
	or d
	ld h, a
	pop af
	or a
	jr z, __LABEL457
	ld a, h
__LABEL457:
	or a
	jp z, __LABEL153
	call RND
	push bc
	push de
	push af
	ld a, 087h
	ld de, 00048h
	ld bc, 00000h
	call __MULF
	ld hl, -10
	call __PSTOREF
	push ix
	pop hl
	ld de, -10
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 080h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	or a
	jp z, __LABEL154
	ld de, __LABEL156
	ld bc, -5
	call __PSTORE_STR
	jp __LABEL155
__LABEL154:
	push ix
	pop hl
	ld de, -10
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	or a
	jp z, __LABEL157
	ld de, __LABEL159
	ld bc, -5
	call __PSTORE_STR
	jp __LABEL158
__LABEL157:
	ld de, __LABEL71
	ld bc, -5
	call __PSTORE_STR
__LABEL158:
__LABEL155:
	ld a, (ix-3)
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld a, 1
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld l, (ix-5)
	ld h, (ix-4)
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL153:
__LABEL151:
	inc (ix-1)
__LABEL147:
	ld a, (ix-1)
	push af
	ld a, 10
	pop hl
	cp h
	jp nc, __LABEL150
__LABEL149:
_ActualizarOlas__leave:
	ex af, af'
	exx
	ld l, (ix-5)
	ld h, (ix-4)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ComprobarPiratas:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (_Piratas.__DATA__ + 1)
	sub 19
	jp nz, __LABEL161
	ld a, 12
	call _Sonido
	ld a, 20
	push af
	ld a, 1
	call PRINT_AT
	ld a, 1
	call INK_TMP
	ld a, 7
	call PAPER_TMP
	ld hl, __LABEL162
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	ld a, 5
	call PAPER_TMP
	ld a, 2
	call INK_TMP
	ld hl, __LABEL163
	xor a
	call __PRINTSTR
	xor a
	call INK_TMP
	ld hl, __LABEL164
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	call _Esperar
	ld a, 5
	call BORDER
	ld a, 5
	call PAPER
	call COPY_ATTR
	ld a, 5
	call INK
	call COPY_ATTR
	call CLS
	ld hl, _imgCaptura.__DATA__
	push hl
	call _DescomprimirImagen
	ld a, 13
	call _Sonido
	call _Esperar
	xor a
	jp _ComprobarPiratas__leave
__LABEL161:
	ld a, 1
_ComprobarPiratas__leave:
	ld sp, ix
	pop ix
	ret
_ComprobarCamino:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (_Jugador.__DATA__ + 0)
	ld hl, (_Tesoro.__DATA__ + 0 - 1)
	sub h
	sub 1
	sbc a, a
	push af
	ld a, (_Jugador.__DATA__ + 1)
	ld hl, (_Tesoro.__DATA__ + 1 - 1)
	sub h
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL458
	ld a, h
__LABEL458:
	or a
	jp z, __LABEL165
	xor a
	call BORDER
	xor a
	call PAPER
	call COPY_ATTR
	xor a
	call INK
	call COPY_ATTR
	call CLS
	ld hl, _imgTesoro.__DATA__
	push hl
	call _DescomprimirImagen
	ld a, 8
	call _Sonido
	ld a, 7
	call _Sonido
	ld a, 8
	call _Sonido
	ld a, 7
	call _Sonido
	ld a, 8
	call _Sonido
	ld a, 7
	call _Sonido
	call _Esperar
	xor a
	jp _ComprobarCamino__leave
__LABEL165:
	ld a, (_Jugador.__DATA__ + 0)
	push af
	ld a, (_Jugador.__DATA__ + 1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	pop af
	sub (hl)
	jp nz, __LABEL167
	ld a, 3
	call _Sonido
	jp __LABEL168
__LABEL167:
	ld a, 2
	call _Sonido
	ld (ix-1), 0
	jp __LABEL169
__LABEL172:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _ArenasMovedizas
	call __ARRAY
	ld a, (hl)
	ld hl, (_Jugador.__DATA__ + 0 - 1)
	sub h
	sub 1
	sbc a, a
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _ArenasMovedizas
	call __ARRAY
	ld a, (hl)
	ld hl, (_Jugador.__DATA__ + 1 - 1)
	sub h
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL459
	ld a, h
__LABEL459:
	or a
	jp z, __LABEL175
	ld a, (_Jugador.__DATA__ + 1)
	push af
	ld a, (_Jugador.__DATA__ + 0)
	call PRINT_AT
	ld a, 1
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL176
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 8
	call _Sonido
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	ld a, 1
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL176
	xor a
	call __PRINTSTR
	xor a
	call INK_TMP
	ld hl, __LABEL177
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	call _Esperar
	call _EscaparArena
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL178
	call _ImprimirIsla
	call _ImprimirPiratas
	call _ActualizarOlas
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL180
	xor a
	call __PRINTSTR
	xor a
	call INK_TMP
	ld hl, __LABEL181
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, (_Jugador.__DATA__ + 1)
	push af
	ld a, (_Jugador.__DATA__ + 0)
	call PRINT_AT
	ld a, 3
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL180
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 11
	call _Sonido
	ld a, (_Jugador.__DATA__ + 1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	ld (_Jugador.__DATA__ + 0), a
	xor a
	push af
	xor a
	push af
	call _DesplazarJugador
	ld a, 100
	push af
	call _DesplazarPiratas
	ld a, 100
	push af
	call _DesplazarPiratas
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	xor a
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL182
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 1
	jp _ComprobarCamino__leave
__LABEL178:
	xor a
	call BORDER
	xor a
	call PAPER
	call COPY_ATTR
	xor a
	call INK
	call COPY_ATTR
	call CLS
	ld hl, _imgArena.__DATA__
	push hl
	call _DescomprimirImagen
	ld a, 13
	call _Sonido
	call _Esperar
	xor a
	jp _ComprobarCamino__leave
__LABEL179:
__LABEL175:
__LABEL173:
	inc (ix-1)
__LABEL169:
	ld a, (ix-1)
	push af
	ld a, 9
	pop hl
	cp h
	jp nc, __LABEL172
__LABEL171:
	call RND
	push bc
	push de
	push af
	ld a, 080h
	ld de, 00040h
	ld bc, 00000h
	call __GTF
	or a
	jp z, __LABEL184
	ld a, 4
	call _Sonido
	ld a, 4
	call _Sonido
	ld a, 4
	call _Sonido
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	ld a, 3
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL180
	xor a
	call __PRINTSTR
	xor a
	call INK_TMP
	ld hl, __LABEL185
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	call _Esperar
	call _HuirNativos
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL186
	call _ImprimirIsla
	call _ImprimirPiratas
	call _ActualizarOlas
	ld a, (_Jugador.__DATA__ + 1)
	push af
	ld a, (_Jugador.__DATA__ + 0)
	call PRINT_AT
	ld a, 3
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL180
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 21
	push af
	ld a, 5
	call PRINT_AT
	ld a, 5
	call PAPER_TMP
	xor a
	call INK_TMP
	ld hl, __LABEL188
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 8
	call _Sonido
	ld a, 1
	ld (_Jugador.__DATA__ + 1), a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	ld (_Jugador.__DATA__ + 0), a
	xor a
	push af
	xor a
	push af
	call _DesplazarJugador
	call _Esperar
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	xor a
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL189
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 1
	jp _ComprobarCamino__leave
__LABEL186:
	ld a, 2
	call BORDER
	ld a, 2
	call PAPER
	call COPY_ATTR
	ld a, 2
	call INK
	call COPY_ATTR
	call CLS
	ld hl, _imgLanzas.__DATA__
	push hl
	call _DescomprimirImagen
	ld a, 13
	call _Sonido
	call _Esperar
	xor a
	jp _ComprobarCamino__leave
__LABEL187:
__LABEL184:
	call RND
	push bc
	push de
	push af
	ld a, 080h
	ld de, 00040h
	ld bc, 00000h
	call __GTF
	or a
	jp z, __LABEL191
	ld a, 10
	call _Sonido
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld a, 1
	call PAPER_TMP
	ld hl, __LABEL192
	xor a
	call __PRINTSTR
	xor a
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL193
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	call _Esperar
	call _SalirTemplo
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL194
	call _ImprimirIsla
	call _ImprimirPiratas
	call _ActualizarOlas
	ld a, (_Jugador.__DATA__ + 1)
	push af
	ld a, (_Jugador.__DATA__ + 0)
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL192
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 21
	push af
	ld a, 5
	call PRINT_AT
	ld a, 5
	call PAPER_TMP
	xor a
	call INK_TMP
	ld hl, __LABEL188
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 8
	call _Sonido
	ld a, 1
	ld (_Jugador.__DATA__ + 1), a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	ld (_Jugador.__DATA__ + 0), a
	xor a
	push af
	xor a
	push af
	call _DesplazarJugador
	call _Esperar
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	xor a
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL189
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 1
	jp _ComprobarCamino__leave
__LABEL194:
	ld a, 2
	call BORDER
	ld a, 2
	call PAPER
	call COPY_ATTR
	ld a, 2
	call INK
	call COPY_ATTR
	call CLS
	ld hl, _imgPiedra.__DATA__
	push hl
	call _DescomprimirImagen
	ld a, 13
	call _Sonido
	call _Esperar
	xor a
	jp _ComprobarCamino__leave
__LABEL195:
__LABEL191:
__LABEL168:
__LABEL166:
	ld a, 1
_ComprobarCamino__leave:
	ld sp, ix
	pop ix
	ret
_Esperar:
	push ix
	ld ix, 0
	add ix, sp
__LABEL196:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STREQ
	or a
	jp nz, __LABEL196
__LABEL197:
__LABEL198:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL198
__LABEL199:
_Esperar__leave:
	ld sp, ix
	pop ix
	ret
_DesplazarPiratas:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (_MoverPiratas)
	add a, (ix+5)
	ld (_MoverPiratas), a
	ld hl, (_PasosPiratas - 1)
	ld a, (_MoverPiratas)
	cp h
	jp c, _DesplazarPiratas__leave
__LABEL201:
	xor a
	ld (_MoverPiratas), a
	ld a, (_Piratas.__DATA__ + 1)
	push af
	ld a, (_Piratas.__DATA__ + 0)
	call PRINT_AT
	ld a, 5
	call PAPER_TMP
	xor a
	call INK_TMP
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, (_Piratas.__DATA__ + 1)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL203
	ld hl, 0
	push hl
	ld a, (_Piratas.__DATA__ + 1)
	dec a
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	ld hl, (_Piratas.__DATA__ + 0 - 1)
	sub h
	jp nz, __LABEL204
	ld a, (_Piratas.__DATA__ + 1)
	dec a
	and 1
	jp nz, __LABEL206
	ld a, (_Piratas.__DATA__ + 1)
	dec a
	push af
	ld a, (_Piratas.__DATA__ + 0)
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL208
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL207
__LABEL206:
	ld a, (_Piratas.__DATA__ + 1)
	dec a
	push af
	ld a, (_Piratas.__DATA__ + 0)
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL209
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL207:
	jp __LABEL205
__LABEL204:
	ld a, (_Piratas.__DATA__ + 1)
	dec a
	push af
	ld a, (_Piratas.__DATA__ + 0)
	call PRINT_AT
	ld a, 5
	call PAPER_TMP
	xor a
	call INK_TMP
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL205:
__LABEL203:
	ld hl, _Piratas.__DATA__ + 0
	inc (hl)
	ld hl, _Piratas.__DATA__ + 1
	inc (hl)
	ld a, (_Piratas.__DATA__ + 1)
	push af
	ld a, 19
	pop hl
	cp h
	jp nc, __LABEL211
	ld a, 19
	ld (_Piratas.__DATA__ + 1), a
__LABEL211:
	ld a, (_Piratas.__DATA__ + 1)
	push af
	ld h, 1
	pop af
	cp h
	jp nc, __LABEL213
	xor a
	ld (_Piratas.__DATA__ + 1), a
__LABEL213:
	ld a, (_Piratas.__DATA__ + 0)
	push af
	ld hl, 0
	push hl
	ld a, (_Piratas.__DATA__ + 1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	sub (hl)
	ccf
	jp nc, __LABEL215
	ld hl, 0
	push hl
	ld a, (_Piratas.__DATA__ + 1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	dec a
	ld (_Piratas.__DATA__ + 0), a
__LABEL215:
	call _ImprimirPiratas
	xor a
	call _Sonido
_DesplazarPiratas__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ImprimirPiratas:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (_Piratas.__DATA__ + 0)
	or a
	jp z, _ImprimirPiratas__leave
__LABEL217:
	ld a, (_Piratas.__DATA__ + 1)
	push af
	ld a, (_Piratas.__DATA__ + 0)
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL163
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, (_Piratas.__DATA__ + 1)
	dec a
	push af
	ld a, (_Piratas.__DATA__ + 0)
	call PRINT_AT
	ld a, 7
	call PAPER_TMP
	ld a, 1
	call INK_TMP
	ld hl, __LABEL162
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
_ImprimirPiratas__leave:
	ld sp, ix
	pop ix
	ret
_MostrarMapa:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	call __PAUSE
	ld a, (ix+5)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL218
	call CLS
	jp __LABEL219
__LABEL218:
	ld a, 5
	call _Sonido
__LABEL219:
	call _ImprimirIsla
	call _ImprimirCamino
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	ld hl, 00000h
	push hl
	ld hl, 00048h
	push hl
	ld h, 086h
	push hl
	call __ADDF
	call __FTOU32REG
	call __PAUSE
	call _ImprimirIsla
	xor a
	push af
	xor a
	push af
	call _DesplazarJugador
_MostrarMapa__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_DesplazarJugador:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (_Jugador.__DATA__ + 1)
	push af
	ld a, (_Jugador.__DATA__ + 0)
	call PRINT_AT
	ld a, 4
	call PAPER_TMP
	xor a
	call INK_TMP
	ld hl, __LABEL220
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, (_Jugador.__DATA__ + 0)
	add a, (ix+5)
	ld (_Jugador.__DATA__ + 0), a
	ld a, (_Jugador.__DATA__ + 1)
	add a, (ix+7)
	ld (_Jugador.__DATA__ + 1), a
	push af
	ld a, 19
	pop hl
	cp h
	jp nc, __LABEL222
	ld a, 19
	ld (_Jugador.__DATA__ + 1), a
__LABEL222:
	ld a, (_Jugador.__DATA__ + 1)
	push af
	ld h, 1
	pop af
	cp h
	jp nc, __LABEL224
	ld a, 1
	ld (_Jugador.__DATA__ + 1), a
__LABEL224:
	ld a, (_Jugador.__DATA__ + 0)
	push af
	ld hl, 0
	push hl
	ld a, (_Jugador.__DATA__ + 1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	pop hl
	sub h
	ccf
	jp nc, __LABEL226
	ld hl, 0
	push hl
	ld a, (_Jugador.__DATA__ + 1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	inc a
	ld (_Jugador.__DATA__ + 0), a
__LABEL226:
	ld a, (_Jugador.__DATA__ + 0)
	push af
	ld hl, 0
	push hl
	ld a, (_Jugador.__DATA__ + 1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (_Jugador.__DATA__ + 1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	ld h, a
	pop af
	sub h
	ccf
	jp nc, __LABEL228
	ld hl, 0
	push hl
	ld a, (_Jugador.__DATA__ + 1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (_Jugador.__DATA__ + 1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	dec a
	ld (_Jugador.__DATA__ + 0), a
__LABEL228:
	ld a, (_Jugador.__DATA__ + 1)
	push af
	ld a, (_Jugador.__DATA__ + 0)
	call PRINT_AT
	ld a, 7
	call PAPER_TMP
	xor a
	call INK_TMP
	ld hl, __LABEL109
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
_DesplazarJugador__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ImprimirArenasMovedizas:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 0
	jp __LABEL229
__LABEL232:
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _ArenasMovedizas
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	ld hl, _ArenasMovedizas
	call __ARRAY
	ld a, (hl)
	call PRINT_AT
	ld a, 1
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL176
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL233:
	inc (ix-1)
__LABEL229:
	ld a, (ix-1)
	push af
	ld a, 9
	pop hl
	cp h
	jp nc, __LABEL232
__LABEL231:
_ImprimirArenasMovedizas__leave:
	ld sp, ix
	pop ix
	ret
_ImprimirCamino:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL234
__LABEL237:
	ld a, (ix-1)
	ld hl, (_Tesoro.__DATA__ + 1 - 1)
	cp h
	sbc a, a
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL460
	ld a, h
__LABEL460:
	or a
	jp z, __LABEL240
	ld a, (ix-1)
	and 1
	jp nz, __LABEL241
	ld a, (ix-1)
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	call PRINT_AT
	xor a
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL243
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL242
__LABEL241:
	ld a, (ix-1)
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	call PRINT_AT
	xor a
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL244
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL242:
__LABEL240:
__LABEL238:
	inc (ix-1)
__LABEL234:
	ld a, (ix-1)
	push af
	ld a, 19
	pop hl
	cp h
	jp nc, __LABEL237
__LABEL236:
	ld a, (_Tesoro.__DATA__ + 1)
	push af
	ld a, (_Tesoro.__DATA__ + 0)
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL245
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL245
	xor a
	call __PRINTSTR
	xor a
	call INK_TMP
	ld hl, __LABEL246
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
_ImprimirCamino__leave:
	ld sp, ix
	pop ix
	ret
_ImprimirIsla:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -9
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 8
	ld d, h
	ld e, l
	inc de
	ldir
	ld a, 5
	call PAPER
	call COPY_ATTR
	ld a, 5
	call BORDER
	xor a
	call INK
	call COPY_ATTR
	ld a, 4
	call PAPER
	call COPY_ATTR
	ld a, 6
	call INK
	call COPY_ATTR
	ld a, (_Isla.__DATA__ + 0)
	ld (ix-1), a
	jp __LABEL247
__LABEL250:
	xor a
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld hl, __LABEL252
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL251:
	inc (ix-1)
__LABEL247:
	ld a, (ix-1)
	push af
	ld a, (_Isla.__DATA__ + 1)
	ld hl, (_Isla.__DATA__ + 0 - 1)
	add a, h
	pop hl
	cp h
	jp nc, __LABEL250
__LABEL249:
	ld a, (_Isla.__DATA__ + 40)
	ld (ix-1), a
	jp __LABEL253
__LABEL256:
	ld a, 20
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld hl, __LABEL258
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL257:
	inc (ix-1)
__LABEL253:
	ld a, (ix-1)
	push af
	ld a, (_Isla.__DATA__ + 41)
	ld hl, (_Isla.__DATA__ + 40 - 1)
	add a, h
	pop hl
	cp h
	jp nc, __LABEL256
__LABEL255:
	ld (ix-5), 1
	jp __LABEL259
__LABEL262:
	ld hl, 0
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	ld hl, 0
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 0
	push hl
	ld a, (ix-5)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld a, (ix-1)
	inc a
	ld (ix-6), a
	ld a, (ix-1)
	push af
	ld a, (ix-2)
	pop hl
	cp h
	sbc a, a
	push af
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	pop hl
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL461
	ld a, h
__LABEL461:
	push af
	ld a, (ix-1)
	cp (ix-2)
	sbc a, a
	push af
	ld a, (ix-1)
	cp (ix-3)
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL462
	ld a, h
__LABEL462:
	pop de
	or d
	jp z, __LABEL264
	ld a, (ix-5)
	and 1
	jp nz, __LABEL266
	ld de, __LABEL208
	ld bc, -9
	call __PSTORE_STR
	jp __LABEL267
__LABEL266:
	ld de, __LABEL209
	ld bc, -9
	call __PSTORE_STR
__LABEL267:
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-9)
	ld h, (ix-8)
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL265
__LABEL264:
	ld a, (ix-1)
	push af
	ld a, (ix-2)
	pop hl
	cp h
	jp nc, __LABEL268
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld hl, __LABEL270
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL269
__LABEL268:
	ld a, (ix-1)
	cp (ix-2)
	jp nc, __LABEL271
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld hl, __LABEL273
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL272
__LABEL271:
	ld a, (ix-5)
	and 1
	jp nz, __LABEL274
	ld de, __LABEL208
	ld bc, -9
	call __PSTORE_STR
	jp __LABEL275
__LABEL274:
	ld de, __LABEL209
	ld bc, -9
	call __PSTORE_STR
__LABEL275:
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-9)
	ld h, (ix-8)
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL272:
__LABEL269:
__LABEL265:
	ld hl, 0
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	ld (ix-1), a
	ld hl, 0
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	ld (ix-2), a
	ld hl, 0
	push hl
	ld a, (ix-5)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-5)
	inc a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	ld (ix-3), a
	ld a, (ix-1)
	dec a
	ld (ix-7), a
	ld a, (ix-1)
	push af
	ld a, (ix-2)
	pop hl
	cp h
	sbc a, a
	push af
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	pop hl
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL463
	ld a, h
__LABEL463:
	push af
	ld a, (ix-1)
	cp (ix-2)
	sbc a, a
	push af
	ld a, (ix-1)
	cp (ix-3)
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL464
	ld a, h
__LABEL464:
	pop de
	or d
	jp z, __LABEL276
	ld a, (ix-5)
	and 1
	jp nz, __LABEL278
	ld de, __LABEL209
	ld bc, -9
	call __PSTORE_STR
	jp __LABEL279
__LABEL278:
	ld de, __LABEL208
	ld bc, -9
	call __PSTORE_STR
__LABEL279:
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-9)
	ld h, (ix-8)
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL277
__LABEL276:
	ld a, (ix-1)
	push af
	ld a, (ix-2)
	pop hl
	cp h
	jp nc, __LABEL280
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld hl, __LABEL270
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL281
__LABEL280:
	ld a, (ix-1)
	cp (ix-2)
	jp nc, __LABEL282
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld hl, __LABEL273
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL283
__LABEL282:
	ld a, (ix-5)
	and 1
	jp nz, __LABEL284
	ld de, __LABEL209
	ld bc, -9
	call __PSTORE_STR
	jp __LABEL285
__LABEL284:
	ld de, __LABEL208
	ld bc, -9
	call __PSTORE_STR
__LABEL285:
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-9)
	ld h, (ix-8)
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL283:
__LABEL281:
__LABEL277:
	ld a, (ix-6)
	ld (ix-1), a
	jp __LABEL286
__LABEL289:
	ld a, (ix-5)
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld a, 4
	call PAPER_TMP
	xor a
	call INK_TMP
	ld hl, __LABEL220
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL290:
	inc (ix-1)
__LABEL286:
	ld a, (ix-1)
	push af
	ld a, (ix-7)
	pop hl
	cp h
	jp nc, __LABEL289
__LABEL288:
__LABEL263:
	inc (ix-5)
__LABEL259:
	ld a, (ix-5)
	push af
	ld a, 19
	pop hl
	call __LTI8
	or a
	jp z, __LABEL262
__LABEL261:
	ld a, 21
	push af
	ld a, 1
	call PRINT_AT
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL182
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, (_Piratas.__DATA__ + 1)
	or a
	jp z, __LABEL292
	ld a, (_Piratas.__DATA__ + 1)
	push af
	ld a, (_Piratas.__DATA__ + 0)
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld a, 5
	call PAPER_TMP
	ld hl, __LABEL163
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, (_Piratas.__DATA__ + 1)
	dec a
	push af
	ld a, (_Piratas.__DATA__ + 0)
	call PRINT_AT
	ld a, 7
	call PAPER_TMP
	ld a, 1
	call INK_TMP
	ld hl, __LABEL162
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL292:
	ld hl, 1
	call __PAUSE
_ImprimirIsla__leave:
	ex af, af'
	exx
	ld l, (ix-9)
	ld h, (ix-8)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_GenerarPartida:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00040h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 10
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-2), a
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00040h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 10
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-3), a
	ld (ix-1), 0
	jp __LABEL293
__LABEL296:
	ld a, (ix-2)
	push af
	ld h, 4
	pop af
	call __LTI8
	or a
	jp z, __LABEL299
	ld (ix-2), 4
__LABEL299:
	ld a, (ix-3)
	push af
	ld a, 28
	pop hl
	call __LTI8
	or a
	jp z, __LABEL301
	ld (ix-3), 28
__LABEL301:
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	dec a
	jp nz, __LABEL302
	dec (ix-2)
	ld a, (ix-3)
	add a, 2
	ld (ix-3), a
	jp __LABEL303
__LABEL302:
	ld a, (ix-1)
	sub 19
	jp nz, __LABEL304
	inc (ix-2)
	ld a, (ix-3)
	sub 2
	ld (ix-3), a
	jp __LABEL305
__LABEL304:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	push de
	push hl
	ld a, 10
	sub (ix-1)
	call __SGNI8
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	push de
	push hl
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	call __MUL32
	call __SUB32
	ld a, l
	ld (ix-2), a
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	push de
	push hl
	ld a, 10
	sub (ix-1)
	call __SGNI8
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	push de
	push hl
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	call __MUL32
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-3), a
__LABEL305:
__LABEL303:
__LABEL297:
	inc (ix-1)
__LABEL293:
	ld a, (ix-1)
	push af
	ld a, 20
	pop hl
	call __LTI8
	or a
	jp z, __LABEL296
__LABEL295:
	ld a, (_Isla.__DATA__ + 2)
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (_Camino.__DATA__ + 0), a
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00040h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld bc, 0
	push bc
	ld bc, 19
	push bc
	call __SUB32
	ld a, l
	ld (ix-4), a
	ld (ix-1), 2
	jp __LABEL306
__LABEL309:
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00040h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 1
	call __SUB32
	ld a, l
	push af
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	dec a
	ld h, a
	pop af
	sub h
	ccf
	jp nc, __LABEL312
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	sub 2
	push af
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	pop af
	ld (hl), a
__LABEL312:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	inc a
	pop hl
	sub h
	ccf
	jp nc, __LABEL314
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	add a, 2
	push af
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	pop af
	ld (hl), a
__LABEL314:
__LABEL310:
	inc (ix-1)
__LABEL306:
	ld a, (ix-1)
	push af
	ld a, (ix-4)
	pop hl
	call __LTI8
	or a
	jp z, __LABEL309
__LABEL308:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	ld (_Tesoro.__DATA__ + 0), a
	ld a, (ix-4)
	ld (_Tesoro.__DATA__ + 1), a
	ld (ix-1), 0
	jp __LABEL315
__LABEL318:
__LABEL__nuevoPunto:
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00008h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 2
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-3), a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL__nuevoPunto
__LABEL321:
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _Camino
	call __ARRAY
	ld a, (hl)
	push af
	call RND
	push bc
	push de
	push af
	ld a, 080h
	ld de, 00000h
	ld bc, 00000h
	call __SUBF
	call __SGNF
	ld h, a
	pop af
	add a, h
	ld (ix-2), a
	push af
	ld hl, 0
	push hl
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	ld h, (hl)
	call __LEI8
	push af
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _Isla
	call __ARRAY
	pop af
	add a, (hl)
	pop hl
	call __LEI8
	pop de
	or d
	jp nz, __LABEL__nuevoPunto
__LABEL323:
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _ArenasMovedizas
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld hl, _ArenasMovedizas
	call __ARRAY
	pop af
	ld (hl), a
__LABEL319:
	inc (ix-1)
__LABEL315:
	ld a, (ix-1)
	push af
	ld a, 9
	pop hl
	call __LTI8
	or a
	jp z, __LABEL318
__LABEL317:
	ld a, (_Camino.__DATA__ + 0)
	ld (_Jugador.__DATA__ + 0), a
	ld a, 1
	ld (_Jugador.__DATA__ + 1), a
	xor a
	ld (_Piratas.__DATA__ + 0), a
	xor a
	ld (_Piratas.__DATA__ + 1), a
	xor a
	ld (_MoverPiratas), a
_GenerarPartida__leave:
	ld sp, ix
	pop ix
	ret
_IniciarGraficosIsla:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, _graficosGenerales.__DATA__
	ld (23675), hl
	ld a, 5
	call PAPER
	call COPY_ATTR
	ld a, 5
	call BORDER
	xor a
	call INK
	call COPY_ATTR
	call CLS
_IniciarGraficosIsla__leave:
	ld sp, ix
	pop ix
	ret
_IniciarGraficosArena:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 7
	call PAPER
	call COPY_ATTR
	xor a
	call INK
	call COPY_ATTR
	xor a
	call BORDER
	call CLS
	ld hl, _graficosArena.__DATA__
	ld (23675), hl
	ld a, 17
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL324
	xor a
	call __PRINTSTR
	ld a, 16
	push af
	ld a, 8
	call PRINT_AT
	ld hl, __LABEL325
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 17
	push af
	ld a, 8
	call PRINT_AT
	ld hl, __LABEL326
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, 478
	push hl
	ld hl, _vectImgArena.__DATA__
	push hl
	call _Dibujar
	ld a, 2
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL327
	xor a
	call __PRINTSTR
	call PRINT_EOL
_IniciarGraficosArena__leave:
	ld sp, ix
	pop ix
	ret
_EscaparArena:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -12
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 11
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL465
	ld bc, 1
	ldir
	call _IniciarGraficosArena
	ld hl, (_HastaTeclaArena)
	add hl, hl
	ld (ix-6), l
	ld (ix-5), h
__LABEL328:
	ld a, (ix-1)
	sub 1
	sbc a, a
	push af
	ld a, (ix-3)
	push af
	ld h, 26
	pop af
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL466
	ld a, h
__LABEL466:
	or a
	jp z, __LABEL329
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld hl, 0
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL330
	ld l, (ix-6)
	ld h, (ix-5)
	dec hl
	ld (ix-6), l
	ld (ix-5), h
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, 0
	pop hl
	or a
	sbc hl, de
	jp nz, __LABEL333
	ld hl, (_ParaTeclaArena)
	ld (ix-8), l
	ld (ix-7), h
	call RND
	push bc
	push de
	push af
	ld a, 088h
	ld de, 00016h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-4), a
	push af
	ld h, 50
	pop af
	cp h
	jp nc, __LABEL334
	ld de, __LABEL17
	ld bc, -10
	call __PSTORE_STR
	ld a, 8
	push af
	ld a, 15
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld hl, __LABEL336
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL335
__LABEL334:
	ld a, (ix-4)
	push af
	ld h, 100
	pop af
	cp h
	jp nc, __LABEL337
	ld de, __LABEL24
	ld bc, -10
	call __PSTORE_STR
	ld a, 8
	push af
	ld a, 15
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld hl, __LABEL339
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL338
__LABEL337:
	ld de, __LABEL10
	ld bc, -10
	call __PSTORE_STR
	ld a, 8
	push af
	ld a, 15
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld hl, __LABEL340
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL338:
__LABEL335:
	ld a, 1
	call _Sonido
__LABEL333:
	jp __LABEL331
__LABEL330:
	ld l, (ix-8)
	ld h, (ix-7)
	dec hl
	ld (ix-8), l
	ld (ix-7), h
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, 0
	pop hl
	or a
	sbc hl, de
	jp nz, __LABEL341
	ld (ix-1), 1
	jp __LABEL342
__LABEL341:
	call INKEY
	ld d, h
	ld e, l
	ld bc, -12
	call __PSTORE_STR2
	ld l, (ix-12)
	ld h, (ix-11)
	push hl
	ld l, (ix-10)
	ld h, (ix-9)
	ex de, hl
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL343
__LABEL345:
	call INKEY
	push hl
	ld de, __LABEL9
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL345
__LABEL346:
	ld a, 8
	push af
	ld a, 15
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld hl, __LABEL347
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 12
	push af
	ld a, 15
	call PRINT_AT
	ld hl, __LABEL348
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 17
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL349
	xor a
	call __PRINTSTR
	inc (ix-3)
	ld a, (ix-3)
	and 1
	jp nz, __LABEL350
	ld a, 16
	push af
	ld a, (ix-3)
	dec a
	call PRINT_AT
	ld hl, __LABEL352
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 17
	push af
	ld a, (ix-3)
	call PRINT_AT
	ld hl, __LABEL326
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL351
__LABEL350:
	ld a, 16
	push af
	ld a, (ix-3)
	dec a
	call PRINT_AT
	ld hl, __LABEL353
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 17
	push af
	ld a, (ix-3)
	call PRINT_AT
	ld hl, __LABEL354
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL351:
	ld hl, (_HastaTeclaArena)
	ld (ix-6), l
	ld (ix-5), h
	ld (ix-8), 0
	ld (ix-7), 0
	ld a, 7
	call _Sonido
	jp __LABEL344
__LABEL343:
	ld l, (ix-12)
	ld h, (ix-11)
	push hl
	ld de, __LABEL9
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL356
	ld (ix-1), 1
__LABEL356:
__LABEL344:
__LABEL342:
__LABEL331:
	jp __LABEL328
__LABEL329:
	call _IniciarGraficosIsla
	ld a, (ix-1)
	dec a
	jp nz, __LABEL357
	xor a
	jp _EscaparArena__leave
__LABEL357:
	ld a, 1
	jp _EscaparArena__leave
__LABEL358:
_EscaparArena__leave:
	ex af, af'
	exx
	ld l, (ix-10)
	ld h, (ix-9)
	call __MEM_FREE
	ld l, (ix-12)
	ld h, (ix-11)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_IniciarGraficosTemplo:
	push ix
	ld ix, 0
	add ix, sp
	xor a
	call PAPER
	call COPY_ATTR
	xor a
	call BORDER
	ld a, 7
	call INK
	call COPY_ATTR
	call CLS
	ld hl, 146
	push hl
	ld hl, _vectImgTemplo.__DATA__
	push hl
	call _Dibujar
	ld a, 8
	push af
	ld a, 2
	call PRINT_AT
	ld hl, __LABEL359
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, _graficosTemplo.__DATA__
	ld (23675), hl
	ld a, 15
	push af
	ld a, 16
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld a, 6
	call PAPER_TMP
	ld a, 1
	call FLASH_TMP
	ld hl, __LABEL243
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 16
	push af
	ld a, 16
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld hl, __LABEL252
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 17
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL325
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 18
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL326
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 18
	push af
	ld a, 7
	call PRINT_AT
	ld a, 3
	call INK_TMP
	ld hl, __LABEL244
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 19
	push af
	xor a
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld hl, __LABEL360
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld hl, _graficosPiedra.__DATA__
	ld (23675), hl
	ld a, 17
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL325
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 18
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL326
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld hl, _graficosTemplo.__DATA__
	ld (23675), hl
_IniciarGraficosTemplo__leave:
	ld sp, ix
	pop ix
	ret
_SalirTemplo:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -17
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 16
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -2
	add hl, bc
	ex de, hl
	ld hl, __LABEL467
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL468
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL469
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -9
	add hl, bc
	ex de, hl
	ld hl, __LABEL470
	ld bc, 1
	ldir
	call _IniciarGraficosTemplo
	ld de, __LABEL360
	ld bc, -11
	call __PSTORE_STR
	ld de, __LABEL361
	ld bc, -13
	call __PSTORE_STR
	ld de, __LABEL362
	ld bc, -15
	call __PSTORE_STR
__LABEL363:
	ld a, (ix-2)
	push af
	ld a, 3
	pop hl
	cp h
	sbc a, a
	push af
	ld a, (ix-1)
	push af
	ld h, 8
	pop af
	cp h
	sbc a, a
	push af
	ld a, (ix-9)
	sub 18
	pop de
	or d
	ld h, a
	pop af
	or a
	jr z, __LABEL471
	ld a, h
__LABEL471:
	or a
	jp z, __LABEL364
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld a, (ix-8)
	sub 1
	sbc a, a
	push af
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	ld hl, (_VelocidadTemplo)
	pop de
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL472
	ld a, h
__LABEL472:
	push af
	ld a, (ix-8)
	push af
	xor a
	pop hl
	cp h
	sbc a, a
	push af
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	ld hl, (_VelocidadTemplo)
	ld de, 300
	add hl, de
	pop de
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL473
	ld a, h
__LABEL473:
	pop de
	or d
	jp z, __LABEL366
	ld (ix-17), 0
	ld (ix-16), 0
	ld a, (ix-8)
	sub 1
	sbc a, a
	push af
	ld a, (ix-9)
	sub 18
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL474
	ld a, h
__LABEL474:
	push af
	call INKEY
	push hl
	ld de, __LABEL31
	pop hl
	ld a, 1
	call __STREQ
	ld h, a
	pop af
	or a
	jr z, __LABEL475
	ld a, h
__LABEL475:
	or a
	jp z, __LABEL367
	ld (ix-9), 16
	ld a, 17
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL348
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 18
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL348
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL368
__LABEL367:
	ld a, (ix-9)
	push af
	ld h, 18
	pop af
	cp h
	jp nc, __LABEL370
	ld a, (ix-9)
	dec a
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL348
	xor a
	call __PRINTSTR
	call PRINT_EOL
	inc (ix-9)
__LABEL370:
__LABEL368:
	inc (ix-5)
	ld a, (ix-5)
	push af
	ld a, 3
	pop hl
	cp h
	jp nc, __LABEL372
	ld (ix-5), 0
__LABEL372:
	inc (ix-6)
	ld a, (ix-6)
	push af
	ld a, 2
	pop hl
	cp h
	jp nc, __LABEL374
	ld (ix-6), 0
__LABEL374:
	inc (ix-7)
	ld a, (ix-7)
	push af
	ld a, 1
	pop hl
	cp h
	jp nc, __LABEL376
	ld (ix-7), 0
__LABEL376:
	dec (ix-3)
	ld a, (ix-3)
	or a
	jp nz, __LABEL378
	ld (ix-3), 42
__LABEL378:
	dec (ix-4)
	ld a, (ix-4)
	push af
	ld h, 4
	pop af
	cp h
	jp nc, __LABEL380
	ld (ix-4), 37
__LABEL380:
	ld a, (ix-4)
	sub (ix-2)
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-2)
	inc a
	ld h, a
	pop af
	sub h
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL382
	ld a, (ix-9)
	sub 18
	jp nz, __LABEL383
	ld (ix-8), 6
	ld (ix-4), 39
	ld a, 2
	call _Sonido
	jp __LABEL384
__LABEL383:
	ld a, (ix-4)
	sub (ix-2)
	jp nz, __LABEL386
	inc (ix-1)
__LABEL386:
__LABEL384:
__LABEL382:
	ld a, (ix-6)
	or a
	jp nz, __LABEL387
	ld a, 19
	push af
	xor a
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld l, (ix-11)
	ld h, (ix-10)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	jp __LABEL388
__LABEL387:
	ld a, (ix-6)
	dec a
	jp nz, __LABEL389
	ld a, 19
	push af
	xor a
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld l, (ix-13)
	ld h, (ix-12)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	jp __LABEL390
__LABEL389:
	ld a, 19
	push af
	xor a
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld l, (ix-15)
	ld h, (ix-14)
	xor a
	call __PRINTSTR
	call COPY_ATTR
__LABEL390:
__LABEL388:
	ld a, (ix-4)
	push af
	ld h, 32
	pop af
	cp h
	jp nc, __LABEL391
	ld a, 18
	push af
	ld a, (ix-4)
	call PRINT_AT
	ld a, 3
	call INK_TMP
	ld hl, __LABEL393
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL392
__LABEL391:
	ld a, 18
	push af
	ld a, 4
	call PRINT_AT
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL392:
	ld a, (ix-3)
	push af
	ld h, 32
	pop af
	cp h
	jp nc, __LABEL394
	ld a, 15
	push af
	ld a, (ix-3)
	inc a
	call PRINT_AT
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 15
	push af
	ld a, (ix-3)
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld a, 6
	call PAPER_TMP
	ld a, 1
	call FLASH_TMP
	ld hl, __LABEL243
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 16
	push af
	ld a, (ix-3)
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld hl, __LABEL396
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL395
__LABEL394:
	ld a, 15
	push af
	ld a, 1
	call PRINT_AT
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 16
	push af
	ld a, 1
	call PRINT_AT
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL395:
	ld a, (ix-8)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL397
	dec (ix-2)
	dec (ix-8)
	ld a, (ix-8)
	or a
	jp nz, __LABEL399
	ld (ix-7), 0
	ld a, (ix-9)
	dec a
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL325
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, (ix-9)
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL401
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL400
__LABEL399:
	ld a, 17
	push af
	ld a, (ix-2)
	inc a
	call PRINT_AT
	ld hl, __LABEL348
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, (ix-9)
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL402
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL400:
	jp __LABEL398
__LABEL397:
	ld a, (ix-7)
	or a
	jp nz, __LABEL403
	ld a, (ix-9)
	dec a
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL325
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, (ix-9)
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL326
	xor a
	call __PRINTSTR
	call PRINT_EOL
	jp __LABEL404
__LABEL403:
	ld a, (ix-9)
	dec a
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL405
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, (ix-9)
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL354
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL404:
	ld a, (ix-9)
	sub 18
	jp nz, __LABEL406
	ld a, 3
	call _Sonido
	jp __LABEL407
__LABEL406:
	ld a, 1
	call _Sonido
__LABEL407:
__LABEL398:
	ld hl, 0
	push hl
	ld hl, _graficosPiedra
	call __ARRAY
	ld (23675), hl
	ld a, (ix-5)
	or a
	jp nz, __LABEL408
	ld a, 17
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL325
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 18
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL326
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL409
__LABEL408:
	ld a, (ix-5)
	dec a
	jp nz, __LABEL410
	ld a, 17
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL405
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 18
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL354
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL411
__LABEL410:
	ld a, (ix-5)
	sub 2
	jp nz, __LABEL412
	ld a, 17
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL414
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 18
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL415
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	jp __LABEL413
__LABEL412:
	ld a, 17
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL416
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 18
	push af
	ld a, 2
	call PRINT_AT
	ld a, 6
	call INK_TMP
	ld hl, __LABEL417
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL413:
__LABEL411:
__LABEL409:
	ld hl, 0
	push hl
	ld hl, _graficosTemplo
	call __ARRAY
	ld (23675), hl
__LABEL366:
	jp __LABEL363
__LABEL364:
	call _IniciarGraficosIsla
	ld a, (ix-1)
	sub 8
	ccf
	jp nc, __LABEL418
	ld a, 1
	jp _SalirTemplo__leave
__LABEL418:
	xor a
	jp _SalirTemplo__leave
__LABEL419:
_SalirTemplo__leave:
	ex af, af'
	exx
	ld l, (ix-11)
	ld h, (ix-10)
	call __MEM_FREE
	ld l, (ix-13)
	ld h, (ix-12)
	call __MEM_FREE
	ld l, (ix-15)
	ld h, (ix-14)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_IniciarGraficosCarrera:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, _graficosCarrera.__DATA__
	ld (23675), hl
	ld a, 7
	call PAPER
	call COPY_ATTR
	ld a, 5
	call BORDER
	xor a
	call INK
	call COPY_ATTR
	call CLS
	ld hl, 271
	push hl
	ld hl, _vectImgCielo.__DATA__
	push hl
	call _Dibujar
	ld a, 12
	push af
	ld a, 9
	call PRINT_AT
	ld hl, __LABEL420
	xor a
	call __PRINTSTR
	ld a, 18
	push af
	xor a
	call PRINT_AT
	ld a, 4
	call INK_TMP
	ld a, 7
	call PAPER_TMP
	ld hl, __LABEL421
	xor a
	call __PRINTSTR
	call COPY_ATTR
_IniciarGraficosCarrera__leave:
	ld sp, ix
	pop ix
	ret
_HuirNativos:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -26
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 25
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -1
	add hl, bc
	ex de, hl
	ld hl, __LABEL476
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -2
	add hl, bc
	ex de, hl
	ld hl, __LABEL477
	ld bc, 1
	ldir
	call _IniciarGraficosCarrera
	ld de, __LABEL422
	ld bc, -6
	call __PSTORE_STR
	ld de, __LABEL423
	ld bc, -8
	call __PSTORE_STR
	ld de, __LABEL424
	ld bc, -10
	call __PSTORE_STR
	ld de, __LABEL425
	ld bc, -12
	call __PSTORE_STR
	ld de, __LABEL325
	ld bc, -14
	call __PSTORE_STR
	ld de, __LABEL326
	ld bc, -16
	call __PSTORE_STR
	ld de, __LABEL405
	ld bc, -18
	call __PSTORE_STR
	ld de, __LABEL354
	ld bc, -20
	call __PSTORE_STR
	ld a, 16
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-6)
	ld h, (ix-5)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 17
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-8)
	ld h, (ix-7)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 16
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld l, (ix-14)
	ld h, (ix-13)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 17
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld l, (ix-16)
	ld h, (ix-15)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld de, __LABEL17
	ld bc, -26
	call __PSTORE_STR
__LABEL426:
	ld a, (ix-1)
	push af
	ld h, 21
	pop af
	cp h
	sbc a, a
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	pop hl
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL478
	ld a, h
__LABEL478:
	or a
	jp z, __LABEL427
	ld l, (ix-22)
	ld h, (ix-21)
	inc hl
	ld (ix-22), l
	ld (ix-21), h
	call INKEY
	push hl
	ld l, (ix-26)
	ld h, (ix-25)
	ex de, hl
	pop hl
	ld a, 1
	call __STREQ
	or a
	jp z, __LABEL429
	ld l, (ix-24)
	ld h, (ix-23)
	inc hl
	ld (ix-24), l
	ld (ix-23), h
	ld l, (ix-26)
	ld h, (ix-25)
	push hl
	ld de, __LABEL17
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL430
	ld de, __LABEL24
	ld bc, -26
	call __PSTORE_STR
	jp __LABEL431
__LABEL430:
	ld de, __LABEL17
	ld bc, -26
	call __PSTORE_STR
__LABEL431:
__LABEL429:
	ld l, (ix-22)
	ld h, (ix-21)
	push hl
	ld de, 500
	pop hl
	or a
	sbc hl, de
	ccf
	jp nc, __LABEL433
	ld (ix-22), 0
	ld (ix-21), 0
	inc (ix-1)
	ld a, (ix-3)
	or a
	jp nz, __LABEL434
	ld (ix-3), 1
	ld a, 16
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-10)
	ld h, (ix-9)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 17
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-12)
	ld h, (ix-11)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	jp __LABEL435
__LABEL434:
	ld (ix-3), 0
	ld a, 16
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-6)
	ld h, (ix-5)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 17
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-8)
	ld h, (ix-7)
	xor a
	call __PRINTSTR
	call COPY_ATTR
__LABEL435:
__LABEL433:
	ld l, (ix-24)
	ld h, (ix-23)
	push hl
	ld a, (_PasosJugadorRetroceso)
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	or a
	sbc hl, de
	ccf
	jp nc, __LABEL437
	ld (ix-24), 0
	ld (ix-23), 0
	dec (ix-1)
	ld a, (ix-3)
	or a
	jp nz, __LABEL438
	ld a, 16
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-10)
	ld h, (ix-9)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 17
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-12)
	ld h, (ix-11)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	jp __LABEL439
__LABEL438:
	ld a, 16
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-6)
	ld h, (ix-5)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 17
	push af
	ld a, (ix-1)
	call PRINT_AT
	ld l, (ix-8)
	ld h, (ix-7)
	xor a
	call __PRINTSTR
	call COPY_ATTR
__LABEL439:
	ld a, (ix-4)
	or a
	jp nz, __LABEL440
	ld (ix-4), 1
	ld a, 16
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld l, (ix-18)
	ld h, (ix-17)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 17
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld l, (ix-20)
	ld h, (ix-19)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 18
	push af
	xor a
	call PRINT_AT
	ld a, 4
	call INK_TMP
	ld hl, __LABEL442
	xor a
	call __PRINTSTR
	call COPY_ATTR
	jp __LABEL441
__LABEL440:
	ld (ix-4), 0
	ld a, 16
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld l, (ix-14)
	ld h, (ix-13)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 17
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld l, (ix-16)
	ld h, (ix-15)
	xor a
	call __PRINTSTR
	call COPY_ATTR
	ld a, 18
	push af
	xor a
	call PRINT_AT
	ld a, 4
	call INK_TMP
	ld hl, __LABEL421
	xor a
	call __PRINTSTR
	call COPY_ATTR
__LABEL441:
__LABEL437:
	jp __LABEL426
__LABEL427:
	call _IniciarGraficosIsla
	ld a, (ix-1)
	push af
	ld a, 1
	pop hl
	sub h
	ccf
	jp nc, __LABEL443
	ld a, 1
	jp _HuirNativos__leave
__LABEL443:
	xor a
	jp _HuirNativos__leave
__LABEL444:
_HuirNativos__leave:
	ex af, af'
	exx
	ld l, (ix-6)
	ld h, (ix-5)
	call __MEM_FREE
	ld l, (ix-8)
	ld h, (ix-7)
	call __MEM_FREE
	ld l, (ix-10)
	ld h, (ix-9)
	call __MEM_FREE
	ld l, (ix-12)
	ld h, (ix-11)
	call __MEM_FREE
	ld l, (ix-14)
	ld h, (ix-13)
	call __MEM_FREE
	ld l, (ix-16)
	ld h, (ix-15)
	call __MEM_FREE
	ld l, (ix-18)
	ld h, (ix-17)
	call __MEM_FREE
	ld l, (ix-20)
	ld h, (ix-19)
	call __MEM_FREE
	ld l, (ix-26)
	ld h, (ix-25)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_AtributoUltimaLinea:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL479
	ld bc, 2
	ldir
	ld a, (ix+5)
	add a, a
	add a, a
	add a, a
	or (ix+7)
	push af
	ld a, (ix+9)
	ld b, 6
__LABEL480:
	add a, a
	djnz __LABEL480
	pop de
	or d
	push af
	ld a, (ix+11)
	ld b, 7
__LABEL481:
	add a, a
	djnz __LABEL481
	pop de
	or d
	ld (ix-1), a
	ld (ix-3), 223
	ld (ix-2), 90
	jp __LABEL445
__LABEL448:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld a, (ix-1)
	pop hl
	ld (hl), a
__LABEL449:
	ld l, (ix-3)
	ld h, (ix-2)
	inc hl
	ld (ix-3), l
	ld (ix-2), h
__LABEL445:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld hl, 23295
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL448
__LABEL447:
_AtributoUltimaLinea__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_Sonido:
#line 1423
		ld hl,sfxData
		di
		push ix
		push iy
		ld b,0
		ld c,a
		add hl,bc
		add hl,bc
		ld e,(hl)
		inc hl
		ld d,(hl)
		push de
		pop ix
		ld a,(23624)
		rra
		rra
		rra
		and 7
		ld (sfxRoutineToneBorder  +1),a
		ld (sfxRoutineNoiseBorder +1),a
		ld (sfxRoutineSampleBorder+1),a
readData:
		ld a,(ix+0)
		ld c,(ix+1)
		ld b,(ix+2)
		ld e,(ix+3)
		ld d,(ix+4)
		push de
		pop iy
		dec a
		jr z,sfxRoutineTone
		dec a
		jr z,sfxRoutineNoise
		dec a
		jr z,sfxRoutineSample
		pop iy
		pop ix
		ei
		ret
sfxRoutineSample:
		ex de,hl
sfxRS0:
		ld e,8
		ld d,(hl)
		inc hl
sfxRS1:
		ld a,(ix+5)
sfxRS2:
		dec a
		jr nz,sfxRS2
		rl d
		sbc a,a
		and 16
sfxRoutineSampleBorder:
		or 0
		out (254),a
		dec e
		jr nz,sfxRS1
		dec bc
		ld a,b
		or c
		jr nz,sfxRS0
		ld c,6
nextData:
		add ix,bc
		jr readData
sfxRoutineTone:
		ld e,(ix+5)
		ld d,(ix+6)
		ld a,(ix+9)
		ld (sfxRoutineToneDuty+1),a
		ld hl,0
sfxRT0:
		push bc
		push iy
		pop bc
sfxRT1:
		add hl,de
		ld a,h
sfxRoutineToneDuty:
		cp 0
		sbc a,a
		and 16
sfxRoutineToneBorder:
		or 0
		out (254),a
		dec bc
		ld a,b
		or c
		jr nz,sfxRT1
		ld a,(sfxRoutineToneDuty+1)
		add a,(ix+10)
		ld (sfxRoutineToneDuty+1),a
		ld c,(ix+7)
		ld b,(ix+8)
		ex de,hl
		add hl,bc
		ex de,hl
		pop bc
		dec bc
		ld a,b
		or c
		jr nz,sfxRT0
		ld c,11
		jr nextData
sfxRoutineNoise:
		ld e,(ix+5)
		ld d,1
		ld h,d
		ld l,d
sfxRN0:
		push bc
		push iy
		pop bc
sfxRN1:
		ld a,(hl)
		and 16
sfxRoutineNoiseBorder:
		or 0
		out (254),a
		dec d
		jr nz,sfxRN2
		ld d,e
		inc hl
		ld a,h
		and 31
		ld h,a
sfxRN2:
		dec bc
		ld a,b
		or c
		jr nz,sfxRN1
		ld a,e
		add a,(ix+6)
		ld e,a
		pop bc
		dec bc
		ld a,b
		or c
		jr nz,sfxRN0
		ld c,7
		jr nextData
sfxData:
SoundEffectsData:
		defw SoundEffect0Data
		defw SoundEffect1Data
		defw SoundEffect2Data
		defw SoundEffect3Data
		defw SoundEffect4Data
		defw SoundEffect5Data
		defw SoundEffect6Data
		defw SoundEffect7Data
		defw SoundEffect8Data
		defw SoundEffect9Data
		defw SoundEffect10Data
		defw SoundEffect11Data
		defw SoundEffect12Data
		defw SoundEffect13Data
SoundEffect0Data:
		defb 1
		defw 20,50,2000,65486,128
		defb 0
SoundEffect1Data:
		defb 1
		defw 10,100,2000,100,128
		defb 0
SoundEffect2Data:
		defb 2
		defw 100,50,356
		defb 0
SoundEffect3Data:
		defb 2
		defw 1,1000,10
		defb 2
		defw 1,1000,1
		defb 0
SoundEffect4Data:
		defb 2
		defw 1,1000,10
		defb 1
		defw 20,100,400,65526,128
		defb 2
		defw 1,2000,1
		defb 0
SoundEffect5Data:
		defb 1
		defw 1,1000,1000,0,128
		defb 1
		defw 1,1000,0,0,0
		defb 1
		defw 1,2000,2000,0,128
		defb 1
		defw 1,2000,2000,0,16
		defb 0
SoundEffect6Data:
		defb 1
		defw 32,1000,2000,16384,320
		defb 0
SoundEffect7Data:
		defb 1
		defw 20,100,200,10,1025
		defb 1
		defw 30,100,0,0,0
		defb 1
		defw 50,100,200,10,1025
		defb 0
SoundEffect8Data:
		defb 1
		defw 50,200,500,65516,128
		defb 0
SoundEffect9Data:
		defb 1
		defw 10,1000,200,2,272
		defb 1
		defw 1,4000,0,0,0
		defb 1
		defw 10,1000,200,65534,272
		defb 0
SoundEffect10Data:
		defb 1
		defw 20,500,200,5,272
		defb 1
		defw 1,1000,0,0,0
		defb 1
		defw 30,500,200,8,272
		defb 0
SoundEffect11Data:
		defb 3
		defw 262
		defw Sample0Data+0
		defb 45
		defb 0
SoundEffect12Data:
		defb 3
		defw 160
		defw Sample1Data+0
		defb 45
		defb 0
SoundEffect13Data:
		defb 3
		defw 262
		defw Sample0Data+0
		defb 100
		defb 0
Sample0Data:
		defb 127,255,255,163,255,255,129,255,255,213,31,255,168,31,255,240
		defb 63,255,232,15,255,171,253,71,254,128,127,224,127,128,255,208
		defb 127,245,127,129,255,240,255,234,255,15,254,175,254,191,250,255
		defb 245,127,250,255,111,255,249,255,175,250,253,250,151,253,127,135
		defb 255,168,175,215,252,63,253,87,254,191,171,255,250,215,237,250
		defb 255,255,87,254,175,255,255,245,127,235,250,255,191,171,127,95
		defb 255,191,250,190,247,255,255,255,244,191,255,255,95,255,173,253
		defb 127,255,255,235,171,251,255,255,255,87,223,254,254,255,245,117
		defb 191,191,239,255,87,91,251,255,255,245,117,181,191,255,255,95
		defb 95,235,255,191,250,191,255,223,121,249,213,242,250,223,215,206
		defb 174,191,214,254,63,117,94,254,215,250,251,215,251,123,127,249
		defb 255,175,183,246,223,233,127,175,167,243,223,227,239,215,219,233
		defb 239,248,113,245,244,250,121,248,120,125,124,126,124,62,62,31
		defb 151,207,143,143,207,7,252,158,124,60,126,60,127,248,120,240
		defb 241,241,225,243,243,225,243,231,243,231,199,249,178,253,211,240
		defb 227,227,239,14,30,60,124,120,241,255,227,227,199,143,143,31
		defb 63,255,159,62,124,254
Sample1Data:
		defb 203,203,247,227,248,120,223,60,127,143,56,247,15,113,227,159
		defb 225,238,60,115,248,127,207,252,255,15,225,243,223,195,252,63
		defb 107,248,127,135,244,63,7,248,63,195,240,31,135,252,63,0
		defb 252,63,225,241,135,195,255,31,30,126,63,249,241,243,227,247
		defb 143,191,254,31,239,255,255,247,248,127,249,249,255,5,255,191
		defb 191,199,223,143,239,240,7,254,3,252,3,255,192,254,1,255
		defb 128,255,128,255,193,255,128,255,131,255,1,255,63,240,15,248
		defb 127,224,63,225,255,128,127,227,255,0,255,227,255,0,255,225
		defb 255,224,63,252,31,252,1,255,228,255,192,31,255,231,255,128
		defb 127,255,240,127,224,31,255,255,255,255,192,63,255,255,255,255
#line 1696
_Sonido__leave:
	ret
__LABEL2:
	DEFW 0001h
	DEFB 71h
__LABEL9:
	DEFW 0000h
__LABEL10:
	DEFW 0001h
	DEFB 61h
__LABEL17:
	DEFW 0001h
	DEFB 6Fh
__LABEL24:
	DEFW 0001h
	DEFB 70h
__LABEL31:
	DEFW 0001h
	DEFB 6Dh
__LABEL43:
	DEFW 0013h
	DEFB 4Fh
	DEFB 54h
	DEFB 52h
	DEFB 41h
	DEFB 20h
	DEFB 50h
	DEFB 41h
	DEFB 52h
	DEFB 54h
	DEFB 49h
	DEFB 44h
	DEFB 41h
	DEFB 3Fh
	DEFB 20h
	DEFB 28h
	DEFB 53h
	DEFB 2Fh
	DEFB 4Eh
	DEFB 29h
__LABEL44:
	DEFW 0001h
	DEFB 73h
__LABEL47:
	DEFW 0001h
	DEFB 6Eh
__LABEL50:
	DEFW 0004h
	DEFB 42h
	DEFB 59h
	DEFB 45h
	DEFB 21h
__LABEL63:
	DEFW 0001h
	DEFB 08h
__LABEL71:
	DEFW 0001h
	DEFB 20h
__LABEL106:
	DEFW 001Fh
	DEFB 42h
	DEFB 49h
	DEFB 45h
	DEFB 4Eh
	DEFB 56h
	DEFB 45h
	DEFB 4Eh
	DEFB 49h
	DEFB 44h
	DEFB 4Fh
	DEFB 20h
	DEFB 41h
	DEFB 20h
	DEFB 4Ch
	DEFB 41h
	DEFB 20h
	DEFB 49h
	DEFB 53h
	DEFB 4Ch
	DEFB 41h
	DEFB 20h
	DEFB 44h
	DEFB 45h
	DEFB 4Ch
	DEFB 20h
	DEFB 54h
	DEFB 45h
	DEFB 53h
	DEFB 4Fh
	DEFB 52h
	DEFB 4Fh
__LABEL107:
	DEFW 001Bh
	DEFB 45h
	DEFB 6Eh
	DEFB 20h
	DEFB 65h
	DEFB 73h
	DEFB 74h
	DEFB 61h
	DEFB 20h
	DEFB 61h
	DEFB 76h
	DEFB 65h
	DEFB 6Eh
	DEFB 74h
	DEFB 75h
	DEFB 72h
	DEFB 61h
	DEFB 20h
	DEFB 65h
	DEFB 6Eh
	DEFB 63h
	DEFB 61h
	DEFB 72h
	DEFB 6Eh
	DEFB 61h
	DEFB 73h
	DEFB 20h
	DEFB 61h
__LABEL108:
	DEFW 0015h
	DEFB 52h
	DEFB 69h
	DEFB 63h
	DEFB 6Bh
	DEFB 79h
	DEFB 20h
	DEFB 65h
	DEFB 6Ch
	DEFB 20h
	DEFB 50h
	DEFB 65h
	DEFB 72h
	DEFB 6Eh
	DEFB 69h
	DEFB 63h
	DEFB 69h
	DEFB 6Fh
	DEFB 73h
	DEFB 6Fh
	DEFB 20h
	DEFB 28h
__LABEL109:
	DEFW 0001h
	DEFB 95h
__LABEL110:
	DEFW 0008h
	DEFB 29h
	DEFB 20h
	DEFB 66h
	DEFB 61h
	DEFB 6Dh
	DEFB 6Fh
	DEFB 73h
	DEFB 6Fh
__LABEL111:
	DEFW 0020h
	DEFB 63h
	DEFB 61h
	DEFB 6Dh
	DEFB 6Fh
	DEFB 72h
	DEFB 72h
	DEFB 69h
	DEFB 73h
	DEFB 74h
	DEFB 61h
	DEFB 2Ch
	DEFB 20h
	DEFB 61h
	DEFB 6Dh
	DEFB 61h
	DEFB 6Eh
	DEFB 74h
	DEFB 65h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 20h
	DEFB 6Ch
	DEFB 61h
	DEFB 73h
	DEFB 20h
	DEFB 70h
	DEFB 65h
	DEFB 6Ch
	DEFB 65h
	DEFB 61h
	DEFB 73h
__LABEL112:
	DEFW 001Bh
	DEFB 79h
	DEFB 20h
	DEFB 62h
	DEFB 75h
	DEFB 73h
	DEFB 63h
	DEFB 61h
	DEFB 64h
	DEFB 6Fh
	DEFB 72h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 20h
	DEFB 63h
	DEFB 68h
	DEFB 61h
	DEFB 6Eh
	DEFB 63h
	DEFB 68h
	DEFB 75h
	DEFB 6Ch
	DEFB 6Ch
	DEFB 6Fh
	DEFB 73h
	DEFB 20h
	DEFB 61h
__LABEL113:
	DEFW 000Fh
	DEFB 74h
	DEFB 69h
	DEFB 65h
	DEFB 6Dh
	DEFB 70h
	DEFB 6Fh
	DEFB 20h
	DEFB 70h
	DEFB 61h
	DEFB 72h
	DEFB 63h
	DEFB 69h
	DEFB 61h
	DEFB 6Ch
	DEFB 2Eh
__LABEL114:
	DEFW 001Bh
	DEFB 45h
	DEFB 6Eh
	DEFB 20h
	DEFB 65h
	DEFB 6Ch
	DEFB 20h
	DEFB 75h
	DEFB 6Ch
	DEFB 74h
	DEFB 69h
	DEFB 6Dh
	DEFB 6Fh
	DEFB 20h
	DEFB 66h
	DEFB 72h
	DEFB 65h
	DEFB 67h
	DEFB 61h
	DEFB 64h
	DEFB 6Fh
	DEFB 20h
	DEFB 71h
	DEFB 75h
	DEFB 65h
	DEFB 20h
	DEFB 74h
	DEFB 65h
__LABEL115:
	DEFW 001Fh
	DEFB 6Dh
	DEFB 65h
	DEFB 74h
	DEFB 69h
	DEFB 73h
	DEFB 74h
	DEFB 65h
	DEFB 20h
	DEFB 63h
	DEFB 6Fh
	DEFB 6Eh
	DEFB 73h
	DEFB 65h
	DEFB 67h
	DEFB 75h
	DEFB 69h
	DEFB 73h
	DEFB 74h
	DEFB 65h
	DEFB 73h
	DEFB 20h
	DEFB 65h
	DEFB 6Ch
	DEFB 20h
	DEFB 6Dh
	DEFB 61h
	DEFB 70h
	DEFB 61h
	DEFB 20h
	DEFB 64h
	DEFB 65h
__LABEL116:
	DEFW 000Bh
	DEFB 75h
	DEFB 6Eh
	DEFB 20h
	DEFB 74h
	DEFB 65h
	DEFB 73h
	DEFB 6Fh
	DEFB 72h
	DEFB 6Fh
	DEFB 20h
	DEFB 28h
__LABEL117:
	DEFW 0001h
	DEFB 0A3h
__LABEL118:
	DEFW 0012h
	DEFB 29h
	DEFB 20h
	DEFB 65h
	DEFB 6Eh
	DEFB 74h
	DEFB 65h
	DEFB 72h
	DEFB 72h
	DEFB 61h
	DEFB 64h
	DEFB 6Fh
	DEFB 20h
	DEFB 65h
	DEFB 6Eh
	DEFB 20h
	DEFB 75h
	DEFB 6Eh
	DEFB 61h
__LABEL119:
	DEFW 001Eh
	DEFB 69h
	DEFB 73h
	DEFB 6Ch
	DEFB 61h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 73h
	DEFB 69h
	DEFB 65h
	DEFB 72h
	DEFB 74h
	DEFB 61h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 6Ch
	DEFB 20h
	DEFB 61h
	DEFB 72h
	DEFB 63h
	DEFB 68h
	DEFB 69h
	DEFB 70h
	DEFB 69h
	DEFB 65h
	DEFB 6Ch
	DEFB 61h
	DEFB 67h
	DEFB 6Fh
__LABEL120:
	DEFW 000Bh
	DEFB 41h
	DEFB 71h
	DEFB 75h
	DEFB 69h
	DEFB 6Eh
	DEFB 6Fh
	DEFB 73h
	DEFB 74h
	DEFB 6Fh
	DEFB 79h
	DEFB 2Eh
__LABEL121:
	DEFW 0020h
	DEFB 50h
	DEFB 6Fh
	DEFB 72h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 73h
	DEFB 67h
	DEFB 72h
	DEFB 61h
	DEFB 63h
	DEFB 69h
	DEFB 61h
	DEFB 20h
	DEFB 65h
	DEFB 6Ch
	DEFB 20h
	DEFB 6Dh
	DEFB 61h
	DEFB 74h
	DEFB 6Fh
	DEFB 6Eh
	DEFB 20h
	DEFB 61h
	DEFB 6Ch
	DEFB 20h
	DEFB 71h
	DEFB 75h
	DEFB 65h
	DEFB 20h
	DEFB 6Ch
	DEFB 65h
__LABEL122:
	DEFW 001Fh
	DEFB 71h
	DEFB 75h
	DEFB 69h
	DEFB 74h
	DEFB 61h
	DEFB 73h
	DEFB 74h
	DEFB 65h
	DEFB 20h
	DEFB 65h
	DEFB 6Ch
	DEFB 20h
	DEFB 6Dh
	DEFB 61h
	DEFB 70h
	DEFB 61h
	DEFB 20h
	DEFB 66h
	DEFB 6Fh
	DEFB 72h
	DEFB 6Dh
	DEFB 61h
	DEFB 20h
	DEFB 70h
	DEFB 61h
	DEFB 72h
	DEFB 74h
	DEFB 65h
	DEFB 20h
	DEFB 64h
	DEFB 65h
__LABEL123:
	DEFW 0015h
	DEFB 75h
	DEFB 6Eh
	DEFB 61h
	DEFB 20h
	DEFB 62h
	DEFB 61h
	DEFB 6Eh
	DEFB 64h
	DEFB 61h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 20h
	DEFB 70h
	DEFB 69h
	DEFB 72h
	DEFB 61h
	DEFB 74h
	DEFB 61h
	DEFB 73h
	DEFB 20h
__LABEL124:
	DEFW 0011h
	DEFB 2Dh
	DEFB 20h
	DEFB 6Ch
	DEFB 6Fh
	DEFB 73h
	DEFB 20h
	DEFB 54h
	DEFB 75h
	DEFB 65h
	DEFB 72h
	DEFB 74h
	DEFB 75h
	DEFB 6Eh
	DEFB 6Fh
	DEFB 73h
	DEFB 20h
	DEFB 2Dh
__LABEL125:
	DEFW 0018h
	DEFB 6Ch
	DEFB 6Fh
	DEFB 73h
	DEFB 20h
	DEFB 63h
	DEFB 75h
	DEFB 61h
	DEFB 6Ch
	DEFB 65h
	DEFB 73h
	DEFB 20h
	DEFB 68h
	DEFB 61h
	DEFB 72h
	DEFB 61h
	DEFB 6Eh
	DEFB 20h
	DEFB 74h
	DEFB 6Fh
	DEFB 64h
	DEFB 6Fh
	DEFB 20h
	DEFB 6Ch
	DEFB 6Fh
__LABEL126:
	DEFW 0017h
	DEFB 70h
	DEFB 6Fh
	DEFB 73h
	DEFB 69h
	DEFB 62h
	DEFB 6Ch
	DEFB 65h
	DEFB 20h
	DEFB 70h
	DEFB 61h
	DEFB 72h
	DEFB 61h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 74h
	DEFB 65h
	DEFB 6Eh
	DEFB 65h
	DEFB 72h
	DEFB 74h
	DEFB 65h
	DEFB 2Eh
__LABEL127:
	DEFW 0011h
	DEFB 2Dh
	DEFB 50h
	DEFB 75h
	DEFB 6Ch
	DEFB 73h
	DEFB 61h
	DEFB 20h
	DEFB 75h
	DEFB 6Eh
	DEFB 61h
	DEFB 20h
	DEFB 74h
	DEFB 65h
	DEFB 63h
	DEFB 6Ch
	DEFB 61h
	DEFB 2Dh
__LABEL128:
	DEFW 001Eh
	DEFB 50h
	DEFB 61h
	DEFB 72h
	DEFB 61h
	DEFB 20h
	DEFB 63h
	DEFB 6Fh
	DEFB 6Eh
	DEFB 74h
	DEFB 72h
	DEFB 6Fh
	DEFB 6Ch
	DEFB 61h
	DEFB 72h
	DEFB 20h
	DEFB 61h
	DEFB 20h
	DEFB 52h
	DEFB 69h
	DEFB 63h
	DEFB 6Bh
	DEFB 79h
	DEFB 20h
	DEFB 75h
	DEFB 73h
	DEFB 61h
	DEFB 20h
	DEFB 6Ch
	DEFB 61h
	DEFB 73h
__LABEL129:
	DEFW 001Eh
	DEFB 74h
	DEFB 65h
	DEFB 63h
	DEFB 6Ch
	DEFB 61h
	DEFB 73h
	DEFB 20h
	DEFB 51h
	DEFB 2Ch
	DEFB 41h
	DEFB 2Ch
	DEFB 4Fh
	DEFB 2Ch
	DEFB 50h
	DEFB 20h
	DEFB 79h
	DEFB 20h
	DEFB 4Dh
	DEFB 2Eh
	DEFB 20h
	DEFB 50h
	DEFB 61h
	DEFB 72h
	DEFB 61h
	DEFB 20h
	DEFB 6Dh
	DEFB 61h
	DEFB 79h
	DEFB 6Fh
	DEFB 72h
__LABEL130:
	DEFW 001Eh
	DEFB 64h
	DEFB 65h
	DEFB 73h
	DEFB 67h
	DEFB 72h
	DEFB 61h
	DEFB 63h
	DEFB 69h
	DEFB 61h
	DEFB 20h
	DEFB 52h
	DEFB 69h
	DEFB 63h
	DEFB 6Bh
	DEFB 79h
	DEFB 20h
	DEFB 65h
	DEFB 73h
	DEFB 20h
	DEFB 75h
	DEFB 6Eh
	DEFB 20h
	DEFB 62h
	DEFB 6Fh
	DEFB 72h
	DEFB 72h
	DEFB 61h
	DEFB 63h
	DEFB 68h
	DEFB 6Fh
__LABEL131:
	DEFW 001Ch
	DEFB 65h
	DEFB 6Dh
	DEFB 70h
	DEFB 65h
	DEFB 64h
	DEFB 65h
	DEFB 72h
	DEFB 6Eh
	DEFB 69h
	DEFB 64h
	DEFB 6Fh
	DEFB 20h
	DEFB 79h
	DEFB 20h
	DEFB 6Eh
	DEFB 6Fh
	DEFB 20h
	DEFB 65h
	DEFB 73h
	DEFB 20h
	DEFB 63h
	DEFB 61h
	DEFB 70h
	DEFB 61h
	DEFB 7Ah
	DEFB 20h
	DEFB 64h
	DEFB 65h
__LABEL132:
	DEFW 0020h
	DEFB 61h
	DEFB 6Eh
	DEFB 64h
	DEFB 61h
	DEFB 72h
	DEFB 20h
	DEFB 65h
	DEFB 6Eh
	DEFB 20h
	DEFB 6Ch
	DEFB 69h
	DEFB 6Eh
	DEFB 65h
	DEFB 61h
	DEFB 20h
	DEFB 72h
	DEFB 65h
	DEFB 63h
	DEFB 74h
	DEFB 61h
	DEFB 2Ch
	DEFB 20h
	DEFB 70h
	DEFB 6Fh
	DEFB 72h
	DEFB 20h
	DEFB 6Ch
	DEFB 6Fh
	DEFB 20h
	DEFB 71h
	DEFB 75h
	DEFB 65h
__LABEL133:
	DEFW 003Dh
	DEFB 63h
	DEFB 75h
	DEFB 61h
	DEFB 6Eh
	DEFB 64h
	DEFB 6Fh
	DEFB 20h
	DEFB 74h
	DEFB 65h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 73h
	DEFB 70h
	DEFB 6Ch
	DEFB 61h
	DEFB 63h
	DEFB 65h
	DEFB 73h
	DEFB 20h
	DEFB 6Ch
	DEFB 61h
	DEFB 74h
	DEFB 65h
	DEFB 72h
	DEFB 61h
	DEFB 6Ch
	DEFB 6Dh
	DEFB 65h
	DEFB 6Eh
	DEFB 74h
	DEFB 65h
	DEFB 74h
	DEFB 61h
	DEFB 6Dh
	DEFB 62h
	DEFB 69h
	DEFB 65h
	DEFB 6Eh
	DEFB 20h
	DEFB 6Ch
	DEFB 6Fh
	DEFB 20h
	DEFB 68h
	DEFB 61h
	DEFB 72h
	DEFB 61h
	DEFB 73h
	DEFB 20h
	DEFB 68h
	DEFB 61h
	DEFB 63h
	DEFB 69h
	DEFB 61h
	DEFB 20h
	DEFB 61h
	DEFB 62h
	DEFB 61h
	DEFB 6Ah
	DEFB 6Fh
	DEFB 2Eh
__LABEL134:
	DEFW 001Bh
	DEFB 4Ch
	DEFB 61h
	DEFB 20h
	DEFB 74h
	DEFB 65h
	DEFB 63h
	DEFB 6Ch
	DEFB 61h
	DEFB 20h
	DEFB 4Dh
	DEFB 20h
	DEFB 61h
	DEFB 62h
	DEFB 72h
	DEFB 65h
	DEFB 20h
	DEFB 65h
	DEFB 6Ch
	DEFB 20h
	DEFB 6Dh
	DEFB 61h
	DEFB 70h
	DEFB 61h
	DEFB 20h
	DEFB 64h
	DEFB 65h
	DEFB 6Ch
__LABEL135:
	DEFW 001Ch
	DEFB 74h
	DEFB 65h
	DEFB 73h
	DEFB 6Fh
	DEFB 72h
	DEFB 6Fh
	DEFB 20h
	DEFB 69h
	DEFB 6Eh
	DEFB 64h
	DEFB 69h
	DEFB 63h
	DEFB 61h
	DEFB 6Eh
	DEFB 64h
	DEFB 6Fh
	DEFB 74h
	DEFB 65h
	DEFB 20h
	DEFB 65h
	DEFB 6Ch
	DEFB 20h
	DEFB 63h
	DEFB 61h
	DEFB 6Dh
	DEFB 69h
	DEFB 6Eh
	DEFB 6Fh
__LABEL136:
	DEFW 001Eh
	DEFB 70h
	DEFB 65h
	DEFB 72h
	DEFB 6Fh
	DEFB 20h
	DEFB 63h
	DEFB 75h
	DEFB 69h
	DEFB 64h
	DEFB 61h
	DEFB 64h
	DEFB 6Fh
	DEFB 2Ch
	DEFB 20h
	DEFB 6Dh
	DEFB 69h
	DEFB 65h
	DEFB 6Eh
	DEFB 74h
	DEFB 72h
	DEFB 61h
	DEFB 73h
	DEFB 20h
	DEFB 70h
	DEFB 69h
	DEFB 65h
	DEFB 72h
	DEFB 64h
	DEFB 61h
	DEFB 73h
__LABEL137:
	DEFW 0018h
	DEFB 74h
	DEFB 69h
	DEFB 65h
	DEFB 6Dh
	DEFB 70h
	DEFB 6Fh
	DEFB 20h
	DEFB 63h
	DEFB 6Fh
	DEFB 6Eh
	DEFB 73h
	DEFB 75h
	DEFB 6Ch
	DEFB 74h
	DEFB 61h
	DEFB 6Eh
	DEFB 64h
	DEFB 6Fh
	DEFB 6Ch
	DEFB 6Fh
	DEFB 20h
	DEFB 6Ch
	DEFB 6Fh
	DEFB 73h
__LABEL138:
	DEFW 001Fh
	DEFB 70h
	DEFB 69h
	DEFB 72h
	DEFB 61h
	DEFB 74h
	DEFB 61h
	DEFB 73h
	DEFB 20h
	DEFB 73h
	DEFB 65h
	DEFB 20h
	DEFB 61h
	DEFB 63h
	DEFB 65h
	DEFB 72h
	DEFB 63h
	DEFB 61h
	DEFB 72h
	DEFB 61h
	DEFB 6Eh
	DEFB 20h
	DEFB 61h
	DEFB 20h
	DEFB 6Ch
	DEFB 61h
	DEFB 20h
	DEFB 69h
	DEFB 73h
	DEFB 6Ch
	DEFB 61h
	DEFB 2Eh
__LABEL139:
	DEFW 001Ch
	DEFB 4Dh
	DEFB 75h
	DEFB 63h
	DEFB 68h
	DEFB 61h
	DEFB 20h
	DEFB 73h
	DEFB 75h
	DEFB 65h
	DEFB 72h
	DEFB 74h
	DEFB 65h
	DEFB 20h
	DEFB 65h
	DEFB 6Eh
	DEFB 20h
	DEFB 74h
	DEFB 75h
	DEFB 20h
	DEFB 61h
	DEFB 76h
	DEFB 65h
	DEFB 6Eh
	DEFB 74h
	DEFB 75h
	DEFB 72h
	DEFB 61h
	DEFB 21h
__LABEL142:
	DEFW 0011h
	DEFB 44h
	DEFB 49h
	DEFB 46h
	DEFB 49h
	DEFB 43h
	DEFB 55h
	DEFB 4Ch
	DEFB 54h
	DEFB 41h
	DEFB 44h
	DEFB 3Fh
	DEFB 20h
	DEFB 28h
	DEFB 30h
	DEFB 2Dh
	DEFB 39h
	DEFB 29h
__LABEL143:
	DEFW 0001h
	DEFB 30h
__LABEL144:
	DEFW 0001h
	DEFB 39h
__LABEL156:
	DEFW 0001h
	DEFB 0A0h
__LABEL159:
	DEFW 0001h
	DEFB 0A1h
__LABEL162:
	DEFW 0001h
	DEFB 92h
__LABEL163:
	DEFW 0001h
	DEFB 93h
__LABEL164:
	DEFW 0019h
	DEFB 20h
	DEFB 4Ch
	DEFB 4Fh
	DEFB 53h
	DEFB 20h
	DEFB 50h
	DEFB 49h
	DEFB 52h
	DEFB 41h
	DEFB 54h
	DEFB 41h
	DEFB 53h
	DEFB 20h
	DEFB 48h
	DEFB 41h
	DEFB 4Eh
	DEFB 20h
	DEFB 4Ch
	DEFB 4Ch
	DEFB 45h
	DEFB 47h
	DEFB 41h
	DEFB 44h
	DEFB 4Fh
	DEFB 21h
__LABEL176:
	DEFW 0001h
	DEFB 94h
__LABEL177:
	DEFW 001Eh
	DEFB 20h
	DEFB 41h
	DEFB 52h
	DEFB 45h
	DEFB 4Eh
	DEFB 41h
	DEFB 53h
	DEFB 20h
	DEFB 4Dh
	DEFB 4Fh
	DEFB 56h
	DEFB 45h
	DEFB 44h
	DEFB 49h
	DEFB 5Ah
	DEFB 41h
	DEFB 53h
	DEFB 21h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL180:
	DEFW 0001h
	DEFB 91h
__LABEL181:
	DEFW 001Fh
	DEFB 20h
	DEFB 45h
	DEFB 53h
	DEFB 43h
	DEFB 41h
	DEFB 50h
	DEFB 41h
	DEFB 53h
	DEFB 2Ch
	DEFB 20h
	DEFB 50h
	DEFB 4Fh
	DEFB 52h
	DEFB 20h
	DEFB 4Ch
	DEFB 4Fh
	DEFB 53h
	DEFB 20h
	DEFB 50h
	DEFB 45h
	DEFB 4Ch
	DEFB 4Fh
	DEFB 53h
	DEFB 21h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL182:
	DEFW 001Dh
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL185:
	DEFW 001Ah
	DEFB 20h
	DEFB 4Eh
	DEFB 41h
	DEFB 54h
	DEFB 49h
	DEFB 56h
	DEFB 4Fh
	DEFB 53h
	DEFB 20h
	DEFB 48h
	DEFB 4Fh
	DEFB 53h
	DEFB 54h
	DEFB 49h
	DEFB 4Ch
	DEFB 45h
	DEFB 53h
	DEFB 20h
	DEFB 41h
	DEFB 54h
	DEFB 41h
	DEFB 43h
	DEFB 41h
	DEFB 4Eh
	DEFB 21h
	DEFB 20h
__LABEL188:
	DEFW 0016h
	DEFB 20h
	DEFB 53h
	DEFB 49h
	DEFB 21h
	DEFB 21h
	DEFB 20h
	DEFB 4Ch
	DEFB 4Fh
	DEFB 47h
	DEFB 52h
	DEFB 41h
	DEFB 53h
	DEFB 20h
	DEFB 45h
	DEFB 53h
	DEFB 43h
	DEFB 41h
	DEFB 50h
	DEFB 41h
	DEFB 52h
	DEFB 21h
	DEFB 20h
__LABEL189:
	DEFW 001Fh
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL192:
	DEFW 0001h
	DEFB 90h
__LABEL193:
	DEFW 001Eh
	DEFB 20h
	DEFB 43h
	DEFB 41h
	DEFB 45h
	DEFB 53h
	DEFB 20h
	DEFB 45h
	DEFB 4Eh
	DEFB 20h
	DEFB 55h
	DEFB 4Eh
	DEFB 20h
	DEFB 54h
	DEFB 45h
	DEFB 4Dh
	DEFB 50h
	DEFB 4Ch
	DEFB 4Fh
	DEFB 20h
	DEFB 41h
	DEFB 42h
	DEFB 41h
	DEFB 4Eh
	DEFB 44h
	DEFB 4Fh
	DEFB 4Eh
	DEFB 41h
	DEFB 44h
	DEFB 4Fh
	DEFB 21h
__LABEL208:
	DEFW 0001h
	DEFB 98h
__LABEL209:
	DEFW 0001h
	DEFB 99h
__LABEL220:
	DEFW 0001h
	DEFB 9Fh
__LABEL243:
	DEFW 0001h
	DEFB 9Ch
__LABEL244:
	DEFW 0001h
	DEFB 9Dh
__LABEL245:
	DEFW 0001h
	DEFB 9Eh
__LABEL246:
	DEFW 001Bh
	DEFB 20h
	DEFB 49h
	DEFB 4Eh
	DEFB 44h
	DEFB 49h
	DEFB 43h
	DEFB 41h
	DEFB 20h
	DEFB 45h
	DEFB 4Ch
	DEFB 20h
	DEFB 4Ch
	DEFB 55h
	DEFB 47h
	DEFB 41h
	DEFB 52h
	DEFB 20h
	DEFB 44h
	DEFB 45h
	DEFB 4Ch
	DEFB 20h
	DEFB 54h
	DEFB 45h
	DEFB 53h
	DEFB 4Fh
	DEFB 52h
	DEFB 4Fh
__LABEL252:
	DEFW 0001h
	DEFB 9Bh
__LABEL258:
	DEFW 0001h
	DEFB 9Ah
__LABEL270:
	DEFW 0001h
	DEFB 97h
__LABEL273:
	DEFW 0001h
	DEFB 96h
__LABEL324:
	DEFW 0020h
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
__LABEL325:
	DEFW 0002h
	DEFB 90h
	DEFB 91h
__LABEL326:
	DEFW 0002h
	DEFB 92h
	DEFB 93h
__LABEL327:
	DEFW 0020h
	DEFB 45h
	DEFB 53h
	DEFB 43h
	DEFB 41h
	DEFB 50h
	DEFB 41h
	DEFB 20h
	DEFB 50h
	DEFB 55h
	DEFB 4Ch
	DEFB 53h
	DEFB 41h
	DEFB 4Eh
	DEFB 44h
	DEFB 4Fh
	DEFB 20h
	DEFB 43h
	DEFB 4Fh
	DEFB 4Dh
	DEFB 4Fh
	DEFB 20h
	DEFB 53h
	DEFB 45h
	DEFB 20h
	DEFB 49h
	DEFB 4Eh
	DEFB 44h
	DEFB 49h
	DEFB 51h
	DEFB 55h
	DEFB 45h
	DEFB 21h
__LABEL336:
	DEFW 0005h
	DEFB 9Ch
	DEFB 20h
	DEFB 9Ch
	DEFB 20h
	DEFB 9Ch
__LABEL339:
	DEFW 0005h
	DEFB 9Dh
	DEFB 20h
	DEFB 9Dh
	DEFB 20h
	DEFB 9Dh
__LABEL340:
	DEFW 0005h
	DEFB 9Eh
	DEFB 20h
	DEFB 9Eh
	DEFB 20h
	DEFB 9Eh
__LABEL347:
	DEFW 0005h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL348:
	DEFW 0002h
	DEFB 20h
	DEFB 20h
__LABEL349:
	DEFW 0015h
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 9Bh
__LABEL352:
	DEFW 0003h
	DEFB 20h
	DEFB 90h
	DEFB 91h
__LABEL353:
	DEFW 0003h
	DEFB 20h
	DEFB 94h
	DEFB 95h
__LABEL354:
	DEFW 0002h
	DEFB 96h
	DEFB 97h
__LABEL359:
	DEFW 001Eh
	DEFB 53h
	DEFB 41h
	DEFB 4Ch
	DEFB 54h
	DEFB 41h
	DEFB 20h
	DEFB 4Ch
	DEFB 4Fh
	DEFB 53h
	DEFB 20h
	DEFB 4Fh
	DEFB 42h
	DEFB 53h
	DEFB 54h
	DEFB 41h
	DEFB 43h
	DEFB 55h
	DEFB 4Ch
	DEFB 4Fh
	DEFB 53h
	DEFB 20h
	DEFB 55h
	DEFB 53h
	DEFB 41h
	DEFB 4Eh
	DEFB 44h
	DEFB 4Fh
	DEFB 20h
	DEFB 4Dh
	DEFB 21h
__LABEL360:
	DEFW 0020h
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
__LABEL361:
	DEFW 0020h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
__LABEL362:
	DEFW 0020h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
	DEFB 99h
	DEFB 9Ah
	DEFB 98h
__LABEL393:
	DEFW 0002h
	DEFB 9Dh
	DEFB 20h
__LABEL396:
	DEFW 0002h
	DEFB 9Bh
	DEFB 20h
__LABEL401:
	DEFW 0004h
	DEFB 92h
	DEFB 93h
	DEFB 20h
	DEFB 20h
__LABEL402:
	DEFW 0004h
	DEFB 20h
	DEFB 9Eh
	DEFB 9Fh
	DEFB 20h
__LABEL405:
	DEFW 0002h
	DEFB 94h
	DEFB 95h
__LABEL414:
	DEFW 0002h
	DEFB 98h
	DEFB 99h
__LABEL415:
	DEFW 0002h
	DEFB 9Ah
	DEFB 9Bh
__LABEL416:
	DEFW 0002h
	DEFB 9Ch
	DEFB 9Dh
__LABEL417:
	DEFW 0002h
	DEFB 9Eh
	DEFB 9Fh
__LABEL420:
	DEFW 000Eh
	DEFB 43h
	DEFB 4Fh
	DEFB 52h
	DEFB 52h
	DEFB 45h
	DEFB 21h
	DEFB 20h
	DEFB 55h
	DEFB 53h
	DEFB 41h
	DEFB 20h
	DEFB 4Fh
	DEFB 2Fh
	DEFB 50h
__LABEL421:
	DEFW 0020h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
__LABEL422:
	DEFW 0008h
	DEFB 20h
	DEFB 98h
	DEFB 99h
	DEFB 9Ch
	DEFB 9Dh
	DEFB 98h
	DEFB 99h
	DEFB 20h
__LABEL423:
	DEFW 0008h
	DEFB 20h
	DEFB 9Ah
	DEFB 9Bh
	DEFB 9Eh
	DEFB 9Fh
	DEFB 9Ah
	DEFB 9Bh
	DEFB 20h
__LABEL424:
	DEFW 0008h
	DEFB 20h
	DEFB 9Ch
	DEFB 9Dh
	DEFB 98h
	DEFB 99h
	DEFB 9Ch
	DEFB 9Dh
	DEFB 20h
__LABEL425:
	DEFW 0008h
	DEFB 20h
	DEFB 9Eh
	DEFB 9Fh
	DEFB 9Ah
	DEFB 9Bh
	DEFB 9Eh
	DEFB 9Fh
	DEFB 20h
__LABEL442:
	DEFW 0020h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A0h
#line 1 "addf.asm"

#line 1 "stackf.asm"

	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------


	__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	                 ; Second argument to push into the stack calculator is popped out of the stack
	                 ; Since the caller routine also receives the parameters into the top of the stack
	                 ; four bytes must be removed from SP before pop them out

	    call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp __FPSTACK_PUSH


__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
					; This format is specified in the ZX 48K Manual
					; You can push a 16 bit signed integer as
					; 0 SS LL HH 0, being SS the sign and LL HH the low
					; and High byte respectively
		ld a, h
		rla			; sign to Carry
		sbc	a, a	; 0 if positive, FF if negative
		ld e, a
		ld d, l
		ld c, h
		xor a
		ld b, a
		jp __FPSTACK_PUSH
#line 2 "addf.asm"

	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order AF DE BC (F not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__ADDF:	; Addition
		call __FPSTACK_PUSH2

		; ------------- ROM ADD
		rst 28h
		defb 0fh	; ADD
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 7934 "IslaTesoro.zxbas"
#line 1 "alloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "error.asm"

	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 69 "alloc.asm"
#line 1 "heapinit.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 70 "alloc.asm"


	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "C:/ZXBasic/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "C:/ZXBasic/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 7935 "IslaTesoro.zxbas"
#line 1 "array.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "mul16.asm"

__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "array.asm"

#line 24 "C:/ZXBasic/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "C:/ZXBasic/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "C:/ZXBasic/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "C:/ZXBasic/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "C:/ZXBasic/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 7936 "IslaTesoro.zxbas"
#line 1 "bor16.asm"

; vim:ts=4:et:
	; FASTCALL bitwise or 16 version.
	; result in HL
; __FASTCALL__ version (operands: A, H)
	; Performs 16bit or 16bit and returns the boolean
; Input: HL, DE
; Output: HL <- HL OR DE

__BOR16:
		ld a, h
		or d
	    ld h, a

	    ld a, l
	    or e
	    ld l, a

	    ret

#line 7937 "IslaTesoro.zxbas"
#line 1 "border.asm"

	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register

	BORDER EQU 229Bh

	; Nothing to do! (Directly from the ZX Spectrum ROM)

#line 7938 "IslaTesoro.zxbas"
#line 1 "bright.asm"

	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "const.asm"

	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 5 "bright.asm"

BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 7939 "IslaTesoro.zxbas"
#line 1 "chr.asm"

	; CHR$(x, y, x) returns the string CHR$(x) + CHR$(y) + CHR$(z)
	;



CHR:	; Returns HL = Pointer to STRING (NULL if no memory)
			; Requires alloc.asm for dynamic memory heap.
		; Parameters: HL = Number of bytes to insert (already push onto the stack)
			; STACK => parameters (16 bit, only the High byte is considered)
			; Used registers A, A', BC, DE, HL, H'L'

			PROC

			LOCAL __POPOUT
			LOCAL TMP

	TMP		EQU 23629 ; (DEST System variable)

			ld a, h
			or l
			ret z	; If Number of parameters is ZERO, return NULL STRING

			ld b, h
			ld c, l

			pop hl	; Return address
			ld (TMP), hl

			push bc
			inc bc
			inc bc	; BC = BC + 2 => (2 bytes for the length number)
			call __MEM_ALLOC
			pop bc

			ld d, h
			ld e, l			; Saves HL in DE

			ld a, h
			or l
			jr z, __POPOUT	; No Memory, return

			ld (hl), c
			inc hl
			ld (hl), b
			inc hl

__POPOUT:	; Removes out of the stack every byte and return
				; If Zero Flag is set, don't store bytes in memory
			ex af, af' ; Save Zero Flag

			ld a, b
			or c
			jr z, __CHR_END

			dec bc
			pop af 	   ; Next byte

			ex af, af' ; Recovers Zero flag
			jr z, __POPOUT

			ex af, af' ; Saves Zero flag
			ld (hl), a
			inc hl
	        ex af, af' ; Recovers Zero Flag

			jp __POPOUT

__CHR_END:
			ld hl, (TMP)
			push hl		; Restores return addr
			ex de, hl	; Recovers original HL ptr
			ret

			ENDP

#line 7940 "IslaTesoro.zxbas"
#line 1 "circle.asm"

	; Bresenham's like circle algorithm
	; best known as Middle Point Circle drawing algorithm


#line 1 "plot.asm"

	; MIXED __FASTCAL__ / __CALLE__ PLOT Function
	; Plots a point into the screen calling the ZX ROM PLOT routine

	; Y in A (accumulator)
	; X in top of the stack


#line 1 "in_screen.asm"

#line 1 "sposn.asm"

	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 2 "in_screen.asm"


__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 9 "plot.asm"
#line 1 "cls.asm"

	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation



CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 10 "plot.asm"
#line 1 "attr.asm"

	; Attribute routines
; vim:ts=4:et:sw:







__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 11 "plot.asm"

PLOT:
		PROC

		LOCAL PLOT_SUB
		LOCAL PIXEL_ADDR
		LOCAL COORDS
		LOCAL __PLOT_ERR
	    LOCAL P_FLAG
	    LOCAL __PLOT_OVER1

	P_FLAG EQU 23697

		pop hl
		ex (sp), hl ; Callee

		ld b, a
		ld c, h

		ld a, 191
		cp b
		jr c, __PLOT_ERR ; jr is faster here (#1)

__PLOT:			; __FASTCALL__ entry (b, c) = pixel coords (y, x)
		ld (COORDS), bc	; Saves current point
		ld a, 191 ; Max y coord
		call PIXEL_ADDR
	    res 6, h    ; Starts from 0
	    ld bc, (SCREEN_ADDR)
	    add hl, bc  ; Now current offset

	    ld b, a
	    inc b
	    ld a, 0FEh
	LOCAL __PLOT_LOOP
__PLOT_LOOP:
	    rrca
	    djnz __PLOT_LOOP

	    ld b, a
	    ld a, (P_FLAG)
	    ld c, a
	    ld a, (hl)
	    bit 0, c        ; is it OVER 1
	    jr nz, __PLOT_OVER1
	    and b

__PLOT_OVER1:
	    bit 2, c        ; is it inverse 1
	    jr nz, __PLOT_END

	    xor b
	    cpl

	LOCAL __PLOT_END
__PLOT_END:
	    ld (hl), a
	    jp SET_PIXEL_ADDR_ATTR

__PLOT_ERR:
	    jp __OUT_OF_SCREEN_ERR ; Spent 3 bytes, but saves 3 T-States at (#1)

	PLOT_SUB EQU 22ECh
	PIXEL_ADDR EQU 22ACh
	COORDS EQU 5C7Dh
		ENDP
#line 6 "circle.asm"


	; Draws a circle at X, Y of radius R
	; X, Y on the Stack, R in accumulator (Byte)

			PROC
			LOCAL __CIRCLE_ERROR
			LOCAL __CIRCLE_LOOP
			LOCAL __CIRCLE_NEXT

__CIRCLE_ERROR:
	        jp __OUT_OF_SCREEN_ERR
	;; __CIRCLE_ERROR EQU __OUT_OF_SCREEN_ERR
;; __CIRCLE_ERROR:
	;; 		; Jumps here if out of screen
	;; 		scf ; Always sets carry Flag
	;;
	;; 		ld a, ERROR_OutOfScreen
	;; 		ld (ERR_NR), a
	;; 		ret
CIRCLE:
	        ;; Entry point
			pop hl	; Return Address
			pop de	; D = Y
			ex (sp), hl ; __CALLEE__ convention
			ld e, h ; E = X


			ld h, a ; H = R
			add a, d
			sub 192
			jr nc, __CIRCLE_ERROR

			ld a, d
			sub h
			jr c, __CIRCLE_ERROR

			ld a, e
			sub h
			jr c, __CIRCLE_ERROR

			ld a, h
			add a, e
			jr c, __CIRCLE_ERROR


; __FASTCALL__ Entry: D, E = Y, X point of the center
	; A = Radious
__CIRCLE:
			push de
			ld a, h
			exx
			pop de		; D'E' = x0, y0
			ld h, a		; H' = r

			ld c, e
			ld a, h
			add a, d
			ld b, a
			call __CIRCLE_PLOT	; PLOT (x0, y0 + r)

			ld b, d
			ld a, h
			add a, e
			ld c, a
			call __CIRCLE_PLOT	; PLOT (x0 + r, y0)

			ld c, e
			ld a, d
			sub h
			ld b, a
			call __CIRCLE_PLOT ; PLOT (x0, y0 - r)

			ld b, d
			ld a, e
			sub h
			ld c, a
			call __CIRCLE_PLOT ; PLOT (x0 - r, y0)

			exx
			ld b, 0		; B = x = 0
			ld c, h		; C = y = Radius
			ld hl, 1
			or a
			sbc hl, bc	; HL = f = 1 - radius

			ex de, hl
			ld hl, 0
			or a
			sbc hl, bc  ; HL = -radius
			add hl, hl	; HL = -2 * radius
			ex de, hl	; DE = -2 * radius = ddF_y, HL = f

			xor a		; A = ddF_x = 0
			ex af, af'	; Saves it

__CIRCLE_LOOP:
			ld a, b
			cp c
			ret nc		; Returns when x >= y

		bit 7, h	; HL >= 0? : if (f >= 0)...
			jp nz, __CIRCLE_NEXT

			dec c		; y--
			inc de
			inc de		; ddF_y += 2

			add hl, de	; f += ddF_y

__CIRCLE_NEXT:
			inc b		; x++
			ex af, af'
			add a, 2	; 1 Cycle faster than inc a, inc a

			inc hl		; f++
			push af
			add a, l
			ld l, a
			ld a, h
			adc a, 0	; f = f + ddF_x
			ld h, a
			pop af
			ex af, af'

			push bc
			exx
			pop hl		; H'L' = Y, X

			ld a, d
			add a, h
			ld b, a		; B = y0 + y
			ld a, e
			add a, l
			ld c, a		; C = x0 + x
			call __CIRCLE_PLOT ; plot(x0 + x, y0 + y)

			ld a, d
			add a, h
			ld b, a		; B = y0 + y
			ld a, e
			sub l
			ld c, a		; C = x0 - x
			call __CIRCLE_PLOT ; plot(x0 - x, y0 + y)

			ld a, d
			sub h
			ld b, a		; B = y0 - y
			ld a, e
			add a, l
			ld c, a		; C = x0 + x
			call __CIRCLE_PLOT ; plot(x0 + x, y0 - y)

			ld a, d
			sub h
			ld b, a		; B = y0 - y
			ld a, e
			sub l
			ld c, a		; C = x0 - x
			call __CIRCLE_PLOT ; plot(x0 - x, y0 - y)

			ld a, d
			add a, l
			ld b, a		; B = y0 + x
			ld a, e
			add a, h
			ld c, a		; C = x0 + y
			call __CIRCLE_PLOT ; plot(x0 + y, y0 + x)

			ld a, d
			add a, l
			ld b, a		; B = y0 + x
			ld a, e
			sub h
			ld c, a		; C = x0 - y
			call __CIRCLE_PLOT ; plot(x0 - y, y0 + x)

			ld a, d
			sub l
			ld b, a		; B = y0 - x
			ld a, e
			add a, h
			ld c, a		; C = x0 + y
			call __CIRCLE_PLOT ; plot(x0 + y, y0 - x)

			ld a, d
			sub l
			ld b, a		; B = y0 - x
			ld a, e
			sub h
			ld c, a		; C = x0 + y
			call __CIRCLE_PLOT ; plot(x0 - y, y0 - x)

			exx
			jp __CIRCLE_LOOP



__CIRCLE_PLOT:
			; Plots a point of the circle, preserving HL and DE
			push hl
			push de
			call __PLOT
			pop de
			pop hl
			ret

			ENDP
#line 7941 "IslaTesoro.zxbas"

#line 1 "copy_attr.asm"


#line 1 "print.asm"

; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that




#line 1 "table_jump.asm"


JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 9 "print.asm"
#line 1 "ink.asm"

	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register



INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 10 "print.asm"
#line 1 "paper.asm"

	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 11 "print.asm"
#line 1 "flash.asm"

	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 12 "print.asm"

#line 1 "over.asm"

	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 14 "print.asm"
#line 1 "inverse.asm"

	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "print.asm"
#line 1 "bold.asm"

	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register


BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 16 "print.asm"
#line 1 "italic.asm"

	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 17 "print.asm"



	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 75 "C:/ZXBasic/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 86 "C:/ZXBasic/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l            ; Lower than max?
	        jp c, __PRINT_CONT; Nothing to do
	        call __PRINT_EOL1
	        exx            ; counteracts __PRINT_EOL1 exx
	        jp __PRINT_CONT2

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 209 "C:/ZXBasic/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp l
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d
	        ld hl, __TVFLAGS
	        set 1, (hl)
	        ld a, d

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jp __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        ld hl, __PRINT_TAB2
	        ld (PRINT_JUMP_STATE), hl
	        ret

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jp __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jp __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp (hl)
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        call __PRINTCHAR
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "copy_attr.asm"
#line 4 "C:/ZXBasic/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs to temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "C:/ZXBasic/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 7943 "IslaTesoro.zxbas"
#line 1 "divf.asm"




	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses C EDHL registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order BC DE HL (B not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__DIVF:	; Division
		PROC
		LOCAL __DIVBYZERO
		LOCAL TMP, ERR_SP

	TMP         EQU 23629 ;(DEST)
	ERR_SP      EQU 23613

		call __FPSTACK_PUSH2

		ld hl, (ERR_SP)
		ld (TMP), hl
		ld hl, __DIVBYZERO
		push hl
		ld hl, 0
		add hl, sp
		ld (ERR_SP), hl

		; ------------- ROM DIV
		rst 28h
		defb 01h	; EXCHANGE
		defb 05h	; DIV
		defb 38h;   ; END CALC

		pop hl
		ld hl, (TMP)
		ld (ERR_SP), hl

		jp __FPSTACK_POP

__DIVBYZERO:
		ld hl, (TMP)
		ld (ERR_SP), hl

		ld a, ERROR_NumberTooBig
		ld (ERR_NR), a

		; Returns 0 on DIV BY ZERO error
		xor a
		ld b, a
		ld c, a
		ld d, a
		ld e, a
		ret

		ENDP

#line 7944 "IslaTesoro.zxbas"
#line 1 "draw.asm"

	; DRAW using bresenhams algorithm and screen positioning
; Copyleft (k) 2010 by J. Rodriguez (a.k.a. Boriel) http://www.boriel.com
; vim:ts=4:et:sw=4:

	; Y parameter in A
	; X parameter in high byte on top of the stack







#line 1 "PixelDown.asm"

	;
	; PixelDown
	; Alvin Albrecht 2002
	;

	; Pixel Down
	;
	; Adjusts screen address HL to move one pixel down in the display.
	; (0,0) is located at the top left corner of the screen.
	;
; enter: HL = valid screen address
; exit : Carry = moved off screen
	;        Carry'= moved off current cell (needs ATTR update)
	;        HL = moves one pixel down
; used : AF, HL

SP.PixelDown:
	   inc h
	   ld a,h
	   and $07
	   ret nz
	   ex af, af'  ; Sets carry on F'
	   scf         ; which flags ATTR must be updated
	   ex af, af'
	   ld a,h
	   sub $08
	   ld h,a
	   ld a,l
	   add a,$20
	   ld l,a
	   ret nc
	   ld a,h
	   add a,$08
	   ld h,a
	;IF DISP_HIRES
	;   and $18
	;   cp $18
	;ELSE
	   cp $58
	;ENDIF
	   ccf
	   ret
#line 15 "draw.asm"
#line 1 "PixelUp.asm"

	;
	; PixelUp
	; Alvin Albrecht 2002
	;

	; Pixel Up
	;
	; Adjusts screen address HL to move one pixel up in the display.
	; (0,0) is located at the top left corner of the screen.
	;
; enter: HL = valid screen address
; exit : Carry = moved off screen
	;        HL = moves one pixel up
; used : AF, HL

SP.PixelUp:
	   ld a,h
	   dec h
	   and $07
	   ret nz
	   ex af, af'
	   scf
	   ex af, af'
	   ld a,$08
	   add a,h
	   ld h,a
	   ld a,l
	   sub $20
	   ld l,a
	   ret nc
	   ld a,h
	   sub $08
	   ld h,a
	;IF DISP_HIRES
	;   and $18
	;   cp $18
	;   ccf
	;ELSE
	   cp $40
	;ENDIF
	   ret
#line 16 "draw.asm"
#line 1 "PixelLeft.asm"

	;
	; PixelLeft
	; Jose Rodriguez 2012
	;

	; PixelLeft
	;
	; Adjusts screen address HL and Pixel bit A to move one pixel to the left
	; on the display.  Start of line set Carry (Out of Screen)
	;
; enter: HL = valid screen address
	;        A = Bit Set
; exit : Carry = moved off screen
	;        Carry' Set if moved off current ATTR CELL
	;        HL = moves one character left, if needed
	;        A = Bit Set with new pixel pos.
; used : AF, HL


SP.PixelLeft:
	    rlca    ; Sets new pixel bit 1 to the right
	    ret nc
	    ex af, af' ; Signal in C' we've moved off current ATTR cell
	    ld a,l
	    dec a
	    ld l,a
	    cp 32      ; Carry if in screen
	    ccf
	    ld a, 1
	    ret

#line 17 "draw.asm"
#line 1 "PixelRight.asm"

	;
	; PixelRight
	; Jose Rodriguez 2012
	;


	; PixelRight
	;
	; Adjusts screen address HL and Pixel bit A to move one pixel to the left
	; on the display.  Start of line set Carry (Out of Screen)
	;
; enter: HL = valid screen address
	;        A = Bit Set
; exit : Carry = moved off screen
	;        Carry' Set if moved off current ATTR CELL
	;        HL = moves one character left, if needed
	;        A = Bit Set with new pixel pos.
; used : AF, HL


SP.PixelRight:
	    rrca    ; Sets new pixel bit 1 to the right
	    ret nc
	    ex af, af' ; Signal in C' we've moved off current ATTR cell
	    ld a, l
	    inc a
	    ld l, a
	    cp 32      ; Carry if IN screen
	    ccf
	    ld a, 80h
	    ret

#line 18 "draw.asm"

	;; DRAW PROCEDURE
	    PROC

	    LOCAL __DRAW1
	    LOCAL __DRAW2
	    LOCAL __DRAW3
	    LOCAL __DRAW4, __DRAW4_LOOP
	    LOCAL __DRAW5
	    LOCAL __DRAW6, __DRAW6_LOOP
	    LOCAL __DRAW_ERROR
	    LOCAL DX1, DX2, DY1, DY2
	    LOCAL __INCX, __INCY, __DECX, __DECY
	    LOCAL P_FLAG
	P_FLAG EQU 23697

__DRAW_ERROR:
	    jp __OUT_OF_SCREEN_ERR

DRAW:
	    ;; ENTRY POINT

	    LOCAL COORDS
	    LOCAL __DRAW_SETUP1, __DRAW_START, __PLOTOVER, __PLOTINVERSE

	    ex de, hl ; DE = Y OFFSET
	    pop hl	; return addr
	    ex (sp), hl ; CALLEE => HL = X OFFSET
	    ld bc, (COORDS)

	    ld a, c
	    add a, l
	    ld l, a
	    ld a, h
	    adc a, 0 ; HL = HL + C
	    ld h, a
	    jr nz, __DRAW_ERROR	; if a <> 0 => Out of Screen

	    ld a, b
	    add a, e
	    ld e, a
	    ld a, d
	    adc a, 0 ; DE = DE + B
	    ld d, a
	    jr nz, __DRAW_ERROR	; if a <> 0 => Out of Screen

	    ld a, 191
	    sub e
	    jr c, __DRAW_ERROR	; Out of screen

	    ld h, e			; now H,L = y2, x2

__DRAW:
	    ; __FASTCALL__ Entry. Plots from (COORDS) to coord H, L
	    push hl
	    ex de, hl		; D,E = y2, x2;

	    ld a, (P_FLAG)
	    ld c, a
	    bit 2, a        ; Test for INVERSE1
	    jr z, __DRAW_SETUP1
	    ld a, 2Fh       ; CPL
	    ld (__PLOTINVERSE), a
	    ld a, 0A6h      ; and (hl)
	    jp __DRAW_START

__DRAW_SETUP1:
	    xor a           ; nop
	    ld (__PLOTINVERSE), a
	    ld a, 0B6h      ; or (hl)
	    bit 0, c        ; Test for OVER
	    jr z, __DRAW_START
	    ld a, 0AEh      ; xor (hl)

__DRAW_START:
	    ld (__PLOTOVER), a ; "Pokes" last operation
	    exx
	    ld bc, (COORDS) ; B'C' = y1, x1
	    ld d, b         ; Saves B' in D'
	    ld a, 191
	    LOCAL __PIXEL_ADDR
	__PIXEL_ADDR EQU 22ACh
	    call __PIXEL_ADDR

	    ;; Now gets pixel mask in A register
	    ld b, a
	    inc b
	    xor a
	    scf
	    LOCAL __PIXEL_MASK
__PIXEL_MASK:
	    rra
	    djnz __PIXEL_MASK

	    ld b, d         ; Restores B' from D'
	    pop de			; D'E' = y2, x2
    exx             ; At this point: D'E' = y2,x2 coords
	                    ; B'C' = y1, y1  coords
	    ex af, af'      ; Saves A reg for later
	                    ; A' = Pixel mask
	                    ; H'L' = Screen Address of pixel

	    ld bc, (COORDS) ; B,C = y1, x1

	    ld a, e
	    sub c			; dx = X2 - X1
	    ld c, a			; Saves dx in c

	    ld a, 0Ch       ; INC C opcode
	    ld hl, __INCX   ; xi = 1
	    jr nc, __DRAW1

	    ld a, c
	    neg		 		; dx = X1 - X2
	    ld c, a
	    ld a, 0Dh       ; DEC C opcode
	    ld hl, __DECX   ; xi = -1

__DRAW1:
	    ld (DX1), a
	    ld (DX1 + 2), hl ; Updates DX1 call address
	    ld (DX2), a
	    ld (DX2 + 2), hl ; Updates DX2 call address

	    ld a, d
	    sub b			; dy = Y2 - Y1
	    ld b, a			; Saves dy in b

	    ld a, 4         ; INC B opcode
	    ld hl, __INCY   ; y1 = 1
	    jr nc, __DRAW2

	    ld a, b
	    neg
	    ld b, a         ; dy = Y2 - Y1
	    ld a, 5         ; DEC B opcode
	    ld hl, __DECY   ; y1 = -1

__DRAW2:
	    ld (DY1), a
	    ld (DY1 + 2), hl ; Updates DX1 call address
	    ld (DY2), a
	    ld (DY2 + 2), hl ; Updates DX2 call address

	    ld a, b
	    sub c			; dy - dx
	    jr c, __DRAW_DX_GT_DY	; DX > DY

	    ; At this point DY >= DX
	    ; --------------------------
	    ; HL = error = dY / 2
	    ld h, 0
	    ld l, b
	    srl l

	    ; DE = -dX
	    xor a
	    sub c
	    ld e, a
	    sbc a, a
	    ld d, a

	    ; BC = DY
	    ld c, b
	    ld b, h

	    exx
	    scf             ; Sets Carry to signal update ATTR
	    ex af, af'      ; Brings back pixel mask
	    ld e, a         ; Saves it in free E register
	    jp __DRAW4_LOOP

__DRAW3:			; While c != e => while y != y2
	    exx
	    add hl, de		; error -= dX
	    bit 7, h		;
	    exx				; recover coordinates
	    jr z, __DRAW4	; if error < 0

	    exx
	    add hl, bc		; error += dY
	    exx

	    ld a, e
DX1:                ; x += xi
	    inc c
	    call __INCX     ; This address will be dynamically updated
	    ld e, a

__DRAW4:

DY1:                ; y += yi
	    inc b
	    call __INCY     ; This address will be dynamically updated
	    ld a, e         ; Restores A reg.
	    call __FASTPLOT

__DRAW4_LOOP:
	    ld a, b
	    cp d
	    jp nz, __DRAW3
	    ld (COORDS), bc
	    ret

__DRAW_DX_GT_DY:	; DX > DY
	    ; --------------------------
	    ; HL = error = dX / 2
	    ld h, 0
	    ld l, c
	    srl l			; HL = error = DX / 2

	    ; DE = -dY
	    xor a
	    sub b
	    ld e, a
	    sbc a, a
	    ld d, a

	    ; BC = dX
	    ld b, h

	    exx
	    ld d, e
	    scf             ; Sets Carry to signal update ATTR
	    ex af, af'      ; Brings back pixel mask
	    ld e, a         ; Saves it in free E register
	    jp __DRAW6_LOOP

__DRAW5:			; While loop
	    exx
	    add hl, de		; error -= dY
	    bit 7, h		; if (error < 0)
	    exx				; Restore coords
	    jr z, __DRAW6	;
	    exx
	    add hl, bc		; error += dX
	    exx

DY2:                ; y += yi
	    inc b
	    call __INCY     ; This address will be dynamically updated

__DRAW6:
	    ld a, e
DX2:                ; x += xi
	    inc c
	    call __INCX     ; This address will be dynamically updated
	    ld e, a
	    call __FASTPLOT

__DRAW6_LOOP:
	    ld a, c			; Current X coord
	    cp d
	    jp nz, __DRAW5
	    ld (COORDS), bc
	    ret

	COORDS   EQU 5C7Dh

__DRAW_END:
	    exx
	    ret

	    ;; Given a A mask and an HL screen position
	    ;; return the next left position
	    ;; Also updates BC coords
	__DECX EQU SP.PixelLeft

	    ;; Like the above, but to the RIGHT
	    ;; Also updates BC coords
	__INCX EQU SP.PixelRight

	    ;; Given an HL screen position, calculates
	    ;; the above position
	    ;; Also updates BC coords
	__INCY EQU SP.PixelUp

	    ;; Given an HL screen position, calculates
	    ;; the above position
	    ;; Also updates BC coords
	__DECY EQU SP.PixelDown

	    ;; Puts the A register MASK in (HL)
__FASTPLOT:
__PLOTINVERSE:
	    nop         ; Replace with CPL if INVERSE 1
__PLOTOVER:
	    or (hl)     ; Replace with XOR (hl) if OVER 1 AND INVERSE 0
	                ; Replace with AND (hl) if INVERSE 1

	    ld (hl), a
	    ex af, af'  ; Recovers flag. If Carry set => update ATTR
	    ld a, e     ; Recovers A reg
	    ret nc

	    push hl
	    push de
	    push bc
	    call SET_PIXEL_ADDR_ATTR
	    pop bc
	    pop de
	    pop hl

	    LOCAL __FASTPLOTEND
__FASTPLOTEND:
	    or a        ; Resets carry flag
	    ex af, af'  ; Recovers A reg
	    ld a, e
	    ret

	    ENDP

#line 7945 "IslaTesoro.zxbas"
#line 1 "draw3.asm"

	; -----------------------------------------------------------
; vim: et:ts=4:sw=4:ruler:
	;
	; DRAW an arc using ZX ROM algorithm.
	; DRAW x, y, r => r = Arc in radians

	; r parameter in A ED BC register
	; X, and Y parameter in high byte on top of the stack






	; Ripped from the ZX Spectrum ROM

DRAW3:
	        PROC
	        LOCAL STACK_TO_BC
	        LOCAL STACK_TO_A
	        LOCAL COORDS
	        LOCAL L2477
	        LOCAL L2420
	        LOCAL L2439
	        LOCAL L245F
	        LOCAL L23C1
	        LOCAL L2D28
	        LOCAL SUM_C, SUM_B

	L2D28   EQU 02D28h
	COORDS  EQU 5C7Dh
	STACK_TO_BC EQU 2307h
	STACK_TO_A  EQU 2314h

	        exx
	        ex af, af'              ;; Preserves ARC
	        pop hl
	        pop de
	        ex (sp), hl             ;; CALLEE
	        push de
	        call __FPSTACK_I16      ;; X Offset
	        pop hl
	        call __FPSTACK_I16      ;; Y Offset
	        exx
	        ex af, af'
	        call __FPSTACK_PUSH     ;; R Arc

	;   Now enter the calculator and store the complete rotation angle in mem-5

	        RST     28H             ;; FP-CALC      x, y, A.
	        DEFB    $C5             ;;st-mem-5      x, y, A.

	;   Test the angle for the special case of 360 degrees.

	        DEFB    $A2             ;;stk-half      x, y, A, 1/2.
	        DEFB    $04             ;;multiply      x, y, A/2.
	        DEFB    $1F             ;;sin           x, y, sin(A/2).
	        DEFB    $31             ;;duplicate     x, y, sin(A/2),sin(A/2)
	        DEFB    $30             ;;not           x, y, sin(A/2), (0/1).
	        DEFB    $30             ;;not           x, y, sin(A/2), (1/0).
	        DEFB    $00             ;;jump-true     x, y, sin(A/2).

	        DEFB    $06             ;;forward to L23A3, DR-SIN-NZ
	                                ;;if sin(r/2) is not zero.

	;   The third parameter is 2*PI (or a multiple of 2*PI) so a 360 degrees turn
	;   would just be a straight line.  Eliminating this case here prevents
	;   division by zero at later stage.

	        DEFB    $02             ;;delete        x, y.
	        DEFB    $38             ;;end-calc      x, y.
	        JP      L2477

	; ---

	;   An arc can be drawn.

	;; DR-SIN-NZ
	        DEFB    $C0             ;;st-mem-0      x, y, sin(A/2).   store mem-0
	        DEFB    $02             ;;delete        x, y.

	;   The next step calculates (roughly) the diameter of the circle of which the
	;   arc will form part.  This value does not have to be too accurate as it is
	;   only used to evaluate the number of straight lines and then discarded.
	;   After all for a circle, the radius is used. Consequently, a circle of
	;   radius 50 will have 24 straight lines but an arc of radius 50 will have 20
	;   straight lines - when drawn in any direction.
	;   So that simple arithmetic can be used, the length of the chord can be
	;   calculated as X+Y rather than by Pythagoras Theorem and the sine of the
	;   nearest angle within reach is used.

	        DEFB    $C1             ;;st-mem-1      x, y.             store mem-1
	        DEFB    $02             ;;delete        x.

	        DEFB    $31             ;;duplicate     x, x.
	        DEFB    $2A             ;;abs           x, x (+ve).
	        DEFB    $E1             ;;get-mem-1     x, X, y.
	        DEFB    $01             ;;exchange      x, y, X.
	        DEFB    $E1             ;;get-mem-1     x, y, X, y.
	        DEFB    $2A             ;;abs           x, y, X, Y (+ve).
	        DEFB    $0F             ;;addition      x, y, X+Y.
	        DEFB    $E0             ;;get-mem-0     x, y, X+Y, sin(A/2).
	        DEFB    $05             ;;division      x, y, X+Y/sin(A/2).
	        DEFB    $2A             ;;abs           x, y, X+Y/sin(A/2) = D.

	;    Bring back sin(A/2) from mem-0 which will shortly get trashed.
	;    Then bring D to the top of the stack again.

	        DEFB    $E0             ;;get-mem-0     x, y, D, sin(A/2).
	        DEFB    $01             ;;exchange      x, y, sin(A/2), D.

	;   Note. that since the value at the top of the stack has arisen as a result
	;   of division then it can no longer be in integer form and the next re-stack
	;   is unnecessary. Only the Sinclair ZX80 had integer division.

	        ;;DEFB    $3D             ;;re-stack      (unnecessary)

	        DEFB    $38             ;;end-calc      x, y, sin(A/2), D.

	;   The next test avoids drawing 4 straight lines when the start and end pixels
	;   are adjacent (or the same) but is probably best dispensed with.

	        LD      A,(HL)          ; fetch exponent byte of D.
	        CP      $81             ; compare to 1
	        JR      NC,L23C1        ; forward, if > 1,  to DR-PRMS

	;   else delete the top two stack values and draw a simple straight line.

	        RST     28H             ;; FP-CALC
	        DEFB    $02             ;;delete
	        DEFB    $02             ;;delete
	        DEFB    $38             ;;end-calc      x, y.

	        JP      L2477           ; to LINE-DRAW

	; ---

	;   The ARC will consist of multiple straight lines so call the CIRCLE-DRAW
	;   PARAMETERS ROUTINE to pre-calculate sine values from the angle (in mem-5)
	;   and determine also the number of straight lines from that value and the
	;   'diameter' which is at the top of the calculator stack.

	;; DR-PRMS
L23C1:  CALL    247Dh           ; routine CD-PRMS1

	                                ; mem-0 ; (A)/No. of lines (=a) (step angle)
	                                ; mem-1 ; sin(a/2)
	                                ; mem-2 ; -
	                                ; mem-3 ; cos(a)                        const
	                                ; mem-4 ; sin(a)                        const
	                                ; mem-5 ; Angle of rotation (A)         in
	                                ; B     ; Count of straight lines - max 252.

	        PUSH    BC              ; Save the line count on the machine stack.

	;   Remove the now redundant diameter value D.

	        RST     28H             ;; FP-CALC      x, y, sin(A/2), D.
	        DEFB    $02             ;;delete        x, y, sin(A/2).

	;   Dividing the sine of the step angle by the sine of the total angle gives
	;   the length of the initial chord on a unary circle. This factor f is used
	;   to scale the coordinates of the first line which still points in the
	;   direction of the end point and may be larger.

	        DEFB    $E1             ;;get-mem-1     x, y, sin(A/2), sin(a/2)
	        DEFB    $01             ;;exchange      x, y, sin(a/2), sin(A/2)
	        DEFB    $05             ;;division      x, y, sin(a/2)/sin(A/2)
	        DEFB    $C1             ;;st-mem-1      x, y. f.
	        DEFB    $02             ;;delete        x, y.

	;   With the factor stored, scale the x coordinate first.

	        DEFB    $01             ;;exchange      y, x.
	        DEFB    $31             ;;duplicate     y, x, x.
	        DEFB    $E1             ;;get-mem-1     y, x, x, f.
	        DEFB    $04             ;;multiply      y, x, x*f    (=xx)
	        DEFB    $C2             ;;st-mem-2      y, x, xx.
	        DEFB    $02             ;;delete        y. x.

	;   Now scale the y coordinate.

	        DEFB    $01             ;;exchange      x, y.
	        DEFB    $31             ;;duplicate     x, y, y.
	        DEFB    $E1             ;;get-mem-1     x, y, y, f
	        DEFB    $04             ;;multiply      x, y, y*f    (=yy)

	;   Note. 'sin' and 'cos' trash locations mem-0 to mem-2 so fetch mem-2 to the
	;   calculator stack for safe keeping.

	        DEFB    $E2             ;;get-mem-2     x, y, yy, xx.

	;   Once we get the coordinates of the first straight line then the 'ROTATION
	;   FORMULA' used in the arc loop will take care of all other points, but we
	;   now use a variation of that formula to rotate the first arc through (A-a)/2
	;   radians.
	;
	;       xRotated = y * sin(angle) + x * cos(angle)
	;       yRotated = y * cos(angle) - x * sin(angle)
	;

	        DEFB    $E5             ;;get-mem-5     x, y, yy, xx, A.
	        DEFB    $E0             ;;get-mem-0     x, y, yy, xx, A, a.
	        DEFB    $03             ;;subtract      x, y, yy, xx, A-a.
	        DEFB    $A2             ;;stk-half      x, y, yy, xx, A-a, 1/2.
	        DEFB    $04             ;;multiply      x, y, yy, xx, (A-a)/2. (=angle)
	        DEFB    $31             ;;duplicate     x, y, yy, xx, angle, angle.
	        DEFB    $1F             ;;sin           x, y, yy, xx, angle, sin(angle)
	        DEFB    $C5             ;;st-mem-5      x, y, yy, xx, angle, sin(angle)
	        DEFB    $02             ;;delete        x, y, yy, xx, angle

	        DEFB    $20             ;;cos           x, y, yy, xx, cos(angle).

	;   Note. mem-0, mem-1 and mem-2 can be used again now...

	        DEFB    $C0             ;;st-mem-0      x, y, yy, xx, cos(angle).
	        DEFB    $02             ;;delete        x, y, yy, xx.

	        DEFB    $C2             ;;st-mem-2      x, y, yy, xx.
	        DEFB    $02             ;;delete        x, y, yy.

	        DEFB    $C1             ;;st-mem-1      x, y, yy.
	        DEFB    $E5             ;;get-mem-5     x, y, yy, sin(angle)
	        DEFB    $04             ;;multiply      x, y, yy*sin(angle).
	        DEFB    $E0             ;;get-mem-0     x, y, yy*sin(angle), cos(angle)
	        DEFB    $E2             ;;get-mem-2     x, y, yy*sin(angle), cos(angle), xx.
	        DEFB    $04             ;;multiply      x, y, yy*sin(angle), xx*cos(angle).
	        DEFB    $0F             ;;addition      x, y, xRotated.
	        DEFB    $E1             ;;get-mem-1     x, y, xRotated, yy.
	        DEFB    $01             ;;exchange      x, y, yy, xRotated.
	        DEFB    $C1             ;;st-mem-1      x, y, yy, xRotated.
	        DEFB    $02             ;;delete        x, y, yy.

	        DEFB    $E0             ;;get-mem-0     x, y, yy, cos(angle).
	        DEFB    $04             ;;multiply      x, y, yy*cos(angle).
	        DEFB    $E2             ;;get-mem-2     x, y, yy*cos(angle), xx.
	        DEFB    $E5             ;;get-mem-5     x, y, yy*cos(angle), xx, sin(angle).
	        DEFB    $04             ;;multiply      x, y, yy*cos(angle), xx*sin(angle).
	        DEFB    $03             ;;subtract      x, y, yRotated.
	        DEFB    $C2             ;;st-mem-2      x, y, yRotated.

	;   Now the initial x and y coordinates are made positive and summed to see
	;   if they measure up to anything significant.

	        DEFB    $2A             ;;abs           x, y, yRotated'.
	        DEFB    $E1             ;;get-mem-1     x, y, yRotated', xRotated.
	        DEFB    $2A             ;;abs           x, y, yRotated', xRotated'.
	        DEFB    $0F             ;;addition      x, y, yRotated+xRotated.
	        DEFB    $02             ;;delete        x, y.

	        DEFB    $38             ;;end-calc      x, y.

	;   Although the test value has been deleted it is still above the calculator
	;   stack in memory and conveniently DE which points to the first free byte
	;   addresses the exponent of the test value.

	        LD      A,(DE)          ; Fetch exponent of the length indicator.
	        CP      $81             ; Compare to that for 1

	        POP     BC              ; Balance the machine stack

	        JP      C,L2477         ; forward, if the coordinates of first line
	                                ; don't add up to more than 1, to LINE-DRAW

	;   Continue when the arc will have a discernable shape.

	        PUSH    BC              ; Restore line counter to the machine stack.

	;   The parameters of the DRAW command were relative and they are now converted
	;   to absolute coordinates by adding to the coordinates of the last point
	;   plotted. The first two values on the stack are the terminal tx and ty
	;   coordinates.  The x-coordinate is converted first but first the last point
	;   plotted is saved as it will initialize the moving ax, value.

	        RST     28H             ;; FP-CALC      x, y.
	        DEFB    $01             ;;exchange      y, x.
	        DEFB    $38             ;;end-calc      y, x.

	        LD      A,(COORDS)      ;; Fetch System Variable COORDS-x
	        CALL    L2D28           ;; routine STACK-A

	        RST     28H             ;; FP-CALC      y, x, last-x.

	;   Store the last point plotted to initialize the moving ax value.

	        DEFB    $C0             ;;st-mem-0      y, x, last-x.
	        DEFB    $0F             ;;addition      y, absolute x.
	        DEFB    $01             ;;exchange      tx, y.
	        DEFB    $38             ;;end-calc      tx, y.

	        LD      A,(COORDS + 1)  ; Fetch System Variable COORDS-y
	        CALL    L2D28           ; routine STACK-A

	        RST     28H             ;; FP-CALC      tx, y, last-y.

	;   Store the last point plotted to initialize the moving ay value.

	        DEFB    $C5             ;;st-mem-5      tx, y, last-y.
	        DEFB    $0F             ;;addition      tx, ty.

	;   Fetch the moving ax and ay to the calculator stack.

	        DEFB    $E0             ;;get-mem-0     tx, ty, ax.
	        DEFB    $E5             ;;get-mem-5     tx, ty, ax, ay.
	        DEFB    $38             ;;end-calc      tx, ty, ax, ay.

	        POP     BC              ; Restore the straight line count.

	; -----------------------------------
	; THE 'CIRCLE/DRAW CONVERGENCE POINT'
	; -----------------------------------
	;   The CIRCLE and ARC-DRAW commands converge here.
	;
	;   Note. for both the CIRCLE and ARC commands the minimum initial line count
	;   is 4 (as set up by the CD_PARAMS routine) and so the zero flag will never
	;   be set and the loop is always entered.  The first test is superfluous and
	;   the jump will always be made to ARC-START.

	;; DRW-STEPS
L2420:  DEC     B               ; decrement the arc count (4,8,12,16...).

	        ;JR      Z,L245F         ; forward, if zero (not possible), to ARC-END

	        JP      L2439           ; forward to ARC-START

	; --------------
	; THE 'ARC LOOP'
	; --------------
	;
	;   The arc drawing loop will draw up to 31 straight lines for a circle and up
	;   251 straight lines for an arc between two points. In both cases the final
	;   closing straight line is drawn at ARC_END, but it otherwise loops back to
	;   here to calculate the next coordinate using the ROTATION FORMULA where (a)
	;   is the previously calculated, constant CENTRAL ANGLE of the arcs.
	;
	;       Xrotated = x * cos(a) - y * sin(a)
	;       Yrotated = x * sin(a) + y * cos(a)
	;
	;   The values cos(a) and sin(a) are pre-calculated and held in mem-3 and mem-4
	;   for the duration of the routine.
	;   Memory location mem-1 holds the last relative x value (rx) and mem-2 holds
	;   the last relative y value (ry) used by DRAW.
	;
	;   Note. that this is a very clever twist on what is after all a very clever,
	;   well-used formula.  Normally the rotation formula is used with the x and y
	;   coordinates from the centre of the circle (or arc) and a supplied angle to
	;   produce two new x and y coordinates in an anticlockwise direction on the
	;   circumference of the circle.
	;   What is being used here, instead, is the relative X and Y parameters from
	;   the last point plotted that are required to get to the current point and
	;   the formula returns the next relative coordinates to use.

	;; ARC-LOOP
L2425:  RST     28H             ;; FP-CALC
	        DEFB    $E1             ;;get-mem-1     rx.
	        DEFB    $31             ;;duplicate     rx, rx.
	        DEFB    $E3             ;;get-mem-3     cos(a)
	        DEFB    $04             ;;multiply      rx, rx*cos(a).
	        DEFB    $E2             ;;get-mem-2     rx, rx*cos(a), ry.
	        DEFB    $E4             ;;get-mem-4     rx, rx*cos(a), ry, sin(a).
	        DEFB    $04             ;;multiply      rx, rx*cos(a), ry*sin(a).
	        DEFB    $03             ;;subtract      rx, rx*cos(a) - ry*sin(a)
	        DEFB    $C1             ;;st-mem-1      rx, new relative x rotated.
	        DEFB    $02             ;;delete        rx.

	        DEFB    $E4             ;;get-mem-4     rx, sin(a).
	        DEFB    $04             ;;multiply      rx*sin(a)
	        DEFB    $E2             ;;get-mem-2     rx*sin(a), ry.
	        DEFB    $E3             ;;get-mem-3     rx*sin(a), ry, cos(a).
	        DEFB    $04             ;;multiply      rx*sin(a), ry*cos(a).
	        DEFB    $0F             ;;addition      rx*sin(a) + ry*cos(a).
	        DEFB    $C2             ;;st-mem-2      new relative y rotated.
	        DEFB    $02             ;;delete        .
	        DEFB    $38             ;;end-calc      .

	;   Note. the calculator stack actually holds   tx, ty, ax, ay
	;   and the last absolute values of x and y
	;   are now brought into play.
	;
	;   Magically, the two new rotated coordinates rx and ry are all that we would
	;   require to draw a circle or arc - on paper!
	;   The Spectrum DRAW routine draws to the rounded x and y coordinate and so
	;   repetitions of values like 3.49 would mean that the fractional parts
	;   would be lost until eventually the draw coordinates might differ from the
	;   floating point values used above by several pixels.
	;   For this reason the accurate offsets calculated above are added to the
	;   accurate, absolute coordinates maintained in ax and ay and these new
	;   coordinates have the integer coordinates of the last plot position
	;   ( from System Variable COORDS ) subtracted from them to give the relative
	;   coordinates required by the DRAW routine.

	;   The mid entry point.

	;; ARC-START
L2439:  PUSH    BC              ; Preserve the arc counter on the machine stack.

	;   Store the absolute ay in temporary variable mem-0 for the moment.

	        RST     28H             ;; FP-CALC      ax, ay.
	        DEFB    $C0             ;;st-mem-0      ax, ay.
	        DEFB    $02             ;;delete        ax.

	;   Now add the fractional relative x coordinate to the fractional absolute
	;   x coordinate to obtain a new fractional x-coordinate.

	        DEFB    $E1             ;;get-mem-1     ax, xr.
	        DEFB    $0F             ;;addition      ax+xr (= new ax).
	        DEFB    $31             ;;duplicate     ax, ax.
	        DEFB    $38             ;;end-calc      ax, ax.

	        LD      A,(COORDS)       ; COORDS-x      last x    (integer ix 0-255)
	        CALL    L2D28           ; routine STACK-A

	        RST     28H             ;; FP-CALC      ax, ax, ix.
	        DEFB    $03             ;;subtract      ax, ax-ix  = relative DRAW Dx.

	;   Having calculated the x value for DRAW do the same for the y value.

	        DEFB    $E0             ;;get-mem-0     ax, Dx, ay.
	        DEFB    $E2             ;;get-mem-2     ax, Dx, ay, ry.
	        DEFB    $0F             ;;addition      ax, Dx, ay+ry (= new ay).
	        DEFB    $C0             ;;st-mem-0      ax, Dx, ay.
	        DEFB    $01             ;;exchange      ax, ay, Dx,
	        DEFB    $E0             ;;get-mem-0     ax, ay, Dx, ay.
	        DEFB    $38             ;;end-calc      ax, ay, Dx, ay.

	        LD      A,(COORDS + 1)  ; COORDS-y      last y (integer iy 0-175)
	        CALL    L2D28           ; routine STACK-A

	        RST     28H             ;; FP-CALC      ax, ay, Dx, ay, iy.
	        DEFB    $03             ;;subtract      ax, ay, Dx, ay-iy ( = Dy).
	        DEFB    $38             ;;end-calc      ax, ay, Dx, Dy.

	        CALL    L2477           ; Routine DRAW-LINE draws (Dx,Dy) relative to
	                                ; the last pixel plotted leaving absolute x
	                                ; and y on the calculator stack.
	                                ;               ax, ay.

	        POP     BC              ; Restore the arc counter from the machine stack.

	        DJNZ    L2425           ; Decrement and loop while > 0 to ARC-LOOP

	; -------------
	; THE 'ARC END'
	; -------------

	;   To recap the full calculator stack is       tx, ty, ax, ay.

	;   Just as one would do if drawing the curve on paper, the final line would
	;   be drawn by joining the last point plotted to the initial start point
	;   in the case of a CIRCLE or to the calculated end point in the case of
	;   an ARC.
	;   The moving absolute values of x and y are no longer required and they
	;   can be deleted to expose the closing coordinates.

	;; ARC-END
L245F:  RST     28H             ;; FP-CALC      tx, ty, ax, ay.
	        DEFB    $02             ;;delete        tx, ty, ax.
	        DEFB    $02             ;;delete        tx, ty.
	        DEFB    $01             ;;exchange      ty, tx.
	        DEFB    $38             ;;end-calc      ty, tx.

	;   First calculate the relative x coordinate to the end-point.

	        LD      A,($5C7D)       ; COORDS-x
	        CALL    L2D28           ; routine STACK-A

	        RST     28H             ;; FP-CALC      ty, tx, coords_x.
	        DEFB    $03             ;;subtract      ty, rx.

	;   Next calculate the relative y coordinate to the end-point.

	        DEFB    $01             ;;exchange      rx, ty.
	        DEFB    $38             ;;end-calc      rx, ty.

	        LD      A,($5C7E)       ; COORDS-y
	        CALL    L2D28           ; routine STACK-A

	        RST     28H             ;; FP-CALC      rx, ty, coords_y
	        DEFB    $03             ;;subtract      rx, ry.
	        DEFB    $38             ;;end-calc      rx, ry.
	;   Finally draw the last straight line.
L2477:
	        call    STACK_TO_BC     ;;Pops x, and y, and stores it in B, C
	        ld      hl, (COORDS)    ;;Calculates x2 and y2 in L, H

	        rl      e               ;; Rotate left to carry
	        ld      a, c
	        jr      nc, SUM_C
	        neg
SUM_C:
	        add     a, l
	        ld      l, a            ;; X2

	        rl      d               ;; Low sign to carry
	        ld      a, b
	        jr      nc, SUM_B
	        neg
SUM_B:
	        add     a, h
	        ld      h, a
	        jp      __DRAW          ;;forward to LINE-DRAW (Fastcalled)

	        ENDP
#line 7946 "IslaTesoro.zxbas"
#line 1 "eq16.asm"

__EQ16:	; Test if 16bit values HL == DE
		; Returns result in A: 0 = False, FF = True
			xor a	; Reset carry flag
			sbc hl, de
			ret nz
			inc a
			ret

#line 7947 "IslaTesoro.zxbas"

#line 1 "free.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.



	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 7949 "IslaTesoro.zxbas"
#line 1 "ftou32reg.asm"

#line 1 "neg32.asm"

__ABS32:
		bit 7, d
		ret z

__NEG32: ; Negates DEHL (Two's complement)
		ld a, l
		cpl
		ld l, a

		ld a, h
		cpl
		ld h, a

		ld a, e
		cpl
		ld e, a

		ld a, d
		cpl
		ld d, a

		inc l
		ret nz

		inc h
		ret nz

		inc de
		ret

#line 2 "ftou32reg.asm"

__FTOU32REG:	; Converts a Float to (un)signed 32 bit integer (NOTE: It's ALWAYS 32 bit signed)
					; Input FP number in A EDCB (A exponent, EDCB mantissa)
				; Output: DEHL 32 bit number (signed)
		PROC

		LOCAL __IS_FLOAT
		LOCAL __NEGATE

		or a
		jr nz, __IS_FLOAT
		; Here if it is a ZX ROM Integer

		ld h, c
		ld l, d
	ld a, e	 ; Takes sign: FF = -, 0 = +
		ld de, 0
		inc a
		jp z, __NEG32	; Negates if negative
		ret

__IS_FLOAT:  ; Jumps here if it is a true floating point number
		ld h, e
		push hl  ; Stores it for later (Contains Sign in H)

		push de
		push bc

		exx
		pop de   ; Loads mantissa into C'B' E'D'
		pop bc	 ;

		set 7, c ; Highest mantissa bit is always 1
		exx

		ld hl, 0 ; DEHL = 0
		ld d, h
		ld e, l

		;ld a, c  ; Get exponent
		sub 128  ; Exponent -= 128
		jr z, __FTOU32REG_END	; If it was <= 128, we are done (Integers must be > 128)
		jr c, __FTOU32REG_END	; It was decimal (0.xxx). We are done (return 0)

		ld b, a  ; Loop counter = exponent - 128

__FTOU32REG_LOOP:
		exx 	 ; Shift C'B' E'D' << 1, output bit stays in Carry
		sla d
		rl e
		rl b
		rl c

	    exx		 ; Shift DEHL << 1, inserting the carry on the right
		rl l
		rl h
		rl e
		rl d

		djnz __FTOU32REG_LOOP

__FTOU32REG_END:
		pop af   ; Take the sign bit
		or a	 ; Sets SGN bit to 1 if negative
		jp m, __NEGATE ; Negates DEHL

		ret

__NEGATE:
	    exx
	    ld a, d
	    or e
	    or b
	    or c
	    exx
	    jr z, __END
	    inc l
	    jr nz, __END
	    inc h
	    jr nz, __END
	    inc de
	LOCAL __END
__END:
	    jp __NEG32
		ENDP


__FTOU8:	; Converts float in C ED LH to Unsigned byte in A
		call __FTOU32REG
		ld a, l
		ret

#line 7950 "IslaTesoro.zxbas"
#line 1 "gtf.asm"

#line 1 "u32tofreg.asm"


__I8TOFREG:
		ld l, a
		rlca
		sbc a, a	; A = SGN(A)
		ld h, a
		ld e, a
		ld d, a

__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
					; to a Floating Point Number returned in (A ED CB)

		ld a, d
		or a		; Test sign

		jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __U32TOFREG	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret

__U8TOFREG:
					; Converts an unsigned 8 bit (A) to Floating point
		ld l, a
		ld h, 0
		ld e, h
		ld d, h

__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

		ld a, d
		or e
		or h
		or l
	    ld b, d
		ld c, e		; Returns 00 0000 0000 if ZERO
		ret z

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 128	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c

__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
		exx
		ld a, d 	; B'C'D'E' == 0 ?
		or e
		or b
		or c
		jp z, __U32TOFREG_END	; We are done

		srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
		rr c
		rr d
		rr e
		exx

		rr e ; Shift EDCB >> 1, inserting the carry on the left
		rr d
		rr c
		rr b

		inc l	; Increment exponent
		jp __U32TOFREG_LOOP


__U32TOFREG_END:
		exx
	    ld a, l     ; Puts the exponent in a
		res 7, e	; Sets the sign bit to 0 (positive)

		ret
	    ENDP

#line 2 "gtf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__GTF:	; A > B
		call __FPSTACK_PUSH2 ; ENTERS B, A

		; ------------- ROM NOS-GRTR
		ld b, 0Dh	; B < A
		rst 28h
		defb 0Dh	; B < A
		defb 38h;   ; END CALC

		call __FPSTACK_POP
		jp __FTOU8; Convert to 8 bits

#line 7951 "IslaTesoro.zxbas"

#line 1 "inkey.asm"

	; INKEY Function
	; Returns a string allocated in dynamic memory
	; containing the string.
	; An empty string otherwise.



INKEY:
		PROC
		LOCAL __EMPTY_INKEY
		LOCAL KEY_SCAN
		LOCAL KEY_TEST
		LOCAL KEY_CODE

		ld bc, 3	; 1 char length string
		call __MEM_ALLOC

		ld a, h
		or l
		ret z	; Return if NULL (No memory)

		push hl ; Saves memory pointer

		call KEY_SCAN
		jp nz, __EMPTY_INKEY

		call KEY_TEST
		jp nc, __EMPTY_INKEY

		dec d	; D is expected to be FLAGS so set bit 3 $FF
				; 'L' Mode so no keywords.
		ld e, a	; main key to A
				; C is MODE 0 'KLC' from above still.
		call KEY_CODE ; routine K-DECODE
		pop hl

		ld (hl), 1
		inc hl
		ld (hl), 0
		inc hl
		ld (hl), a
		dec hl
		dec hl	; HL Points to string result
		ret

__EMPTY_INKEY:
		pop hl
		xor a
		ld (hl), a
		inc hl
		ld (hl), a
		dec hl
		ret

	KEY_SCAN	EQU 028Eh
	KEY_TEST	EQU 031Eh
	KEY_CODE	EQU 0333h

		ENDP

#line 7953 "IslaTesoro.zxbas"
#line 1 "lei8.asm"

__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 7954 "IslaTesoro.zxbas"
#line 1 "loadstr.asm"



	; Loads a string (ptr) from HL
	; and duplicates it on dynamic memory again
	; Finally, it returns result pointer in HL

__ILOADSTR:		; This is the indirect pointer entry HL = (HL)
			ld a, h
			or l
			ret z
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a

__LOADSTR:		; __FASTCALL__ entry
			ld a, h
			or l
			ret z	; Return if NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl  ; BC = LEN(a$)

			inc bc
			inc bc	; BC = LEN(a$) + 2 (two bytes for length)

			push hl
			push bc
			call __MEM_ALLOC
			pop bc  ; Recover length
			pop de  ; Recover origin

			ld a, h
			or l
			ret z	; Return if NULL (No memory)

			ex de, hl ; ldir takes HL as source, DE as destiny, so SWAP HL,DE
			push de	; Saves destiny start
			ldir	; Copies string (length number included)
			pop hl	; Recovers destiny in hl as result
			ret
#line 7955 "IslaTesoro.zxbas"
#line 1 "ltf.asm"





	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A HL BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__LTF:	; A < B
		call __FPSTACK_PUSH2 ; Enters B, A

		; ------------- ROM NOS-LESS
		ld b, 0Ch	; A > B (Operands stack-reversed)
		rst 28h
		defb 0Ch;	; A > B
		defb 38h;   ; END CALC

		call __FPSTACK_POP
		jp __FTOU8 ; Convert to 8 bits

#line 7956 "IslaTesoro.zxbas"
#line 1 "lti8.asm"


#line 7957 "IslaTesoro.zxbas"
#line 1 "mul32.asm"

#line 1 "_mul32.asm"


; Ripped from: http://www.andreadrian.de/oldcpu/z80_number_cruncher.html#moztocid784223
	; Used with permission.
	; Multiplies 32x32 bit integer (DEHL x D'E'H'L')
	; 64bit result is returned in H'L'H L B'C'A C


__MUL32_64START:
			push hl
			exx
			ld b, h
			ld c, l		; BC = Low Part (A)
			pop hl		; HL = Load Part (B)
			ex de, hl	; DE = Low Part (B), HL = HightPart(A) (must be in B'C')
			push hl

			exx
			pop bc		; B'C' = HightPart(A)
			exx			; A = B'C'BC , B = D'E'DE

				; multiply routine 32 * 32bit = 64bit
				; h'l'hlb'c'ac = b'c'bc * d'e'de
				; needs register a, changes flags
				;
				; this routine was with tiny differences in the
				; sinclair zx81 rom for the mantissa multiply

__LMUL:
	        and     a               ; reset carry flag
	        sbc     hl,hl           ; result bits 32..47 = 0
	        exx
	        sbc     hl,hl           ; result bits 48..63 = 0
	        exx
	        ld      a,b             ; mpr is b'c'ac
	        ld      b,33            ; initialize loop counter
	        jp      __LMULSTART

__LMULLOOP:
	        jr      nc,__LMULNOADD  ; JP is 2 cycles faster than JR. Since it's inside a LOOP
	                                ; it can save up to 33 * 2 = 66 cycles
	                                ; But JR if 3 cycles faster if JUMP not taken!
	        add     hl,de           ; result += mpd
	        exx
	        adc     hl,de
	        exx

__LMULNOADD:
	        exx
	        rr      h               ; right shift upper
	        rr      l               ; 32bit of result
	        exx
	        rr      h
	        rr      l

__LMULSTART:
	        exx
	        rr      b               ; right shift mpr/
	        rr      c               ; lower 32bit of result
	        exx
	        rra                     ; equivalent to rr a
	        rr      c
	        djnz    __LMULLOOP

			ret						; result in h'l'hlb'c'ac

#line 2 "mul32.asm"

__MUL32:	; multiplies 32 bit un/signed integer.
				; First operand stored in DEHL, and 2nd onto stack
				; Lowest part of 2nd operand on top of the stack
				; returns the result in DE.HL
			exx
			pop hl	; Return ADDRESS
			pop de	; Low part
			ex (sp), hl ; CALLEE -> HL = High part
			ex de, hl
			call __MUL32_64START

__TO32BIT:  ; Converts H'L'HLB'C'AC to DEHL (Discards H'L'HL)
			exx
			push bc
			exx
			pop de
			ld h, a
			ld l, c
			ret


#line 7958 "IslaTesoro.zxbas"
#line 1 "mulf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__MULF:	; Multiplication
		call __FPSTACK_PUSH2

		; ------------- ROM MUL
		rst 28h
		defb 04h	;
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 7959 "IslaTesoro.zxbas"


#line 1 "pause.asm"

	; The PAUSE statement (Calling the ROM)

__PAUSE:
		ld b, h
	    ld c, l
	    jp 1F3Dh  ; PAUSE_1
#line 7962 "IslaTesoro.zxbas"
#line 1 "ploadf.asm"

	; Parameter / Local var load
	; A => Offset
	; IX = Stack Frame
; RESULT: HL => IX + DE

#line 1 "iloadf.asm"

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- ((HL))

__ILOADF:
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- (HL)

__LOADF:    ; Loads a 40 bits FP number from address pointed by HL
		ld a, (hl)
		inc hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
		ld c, (hl)
		inc hl
		ld b, (hl)
		ret

#line 7 "ploadf.asm"

__PLOADF:
	    push ix
	    pop hl
	    add hl, de
	    jp __LOADF

#line 7963 "IslaTesoro.zxbas"


#line 1 "print_eol_attr.asm"

	; Calls PRINT_EOL and then COPY_ATTR, so saves
	; 3 bytes




PRINT_EOL_ATTR:
		call PRINT_EOL
		jp COPY_ATTR
#line 7966 "IslaTesoro.zxbas"
#line 1 "printstr.asm"






	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 7967 "IslaTesoro.zxbas"
#line 1 "pstoref.asm"

	; Stores FP number in A ED CB at location HL+IX
	; HL = Offset
	; IX = Stack Frame
	; A ED CB = FP Number

#line 1 "storef.asm"

__PISTOREF:	; Indect Stores a float (A, E, D, C, B) at location stored in memory, pointed by (IX + HL)
			push de
			ex de, hl	; DE <- HL
			push ix
			pop hl		; HL <- IX
			add hl, de  ; HL <- IX + HL
			pop de

__ISTOREF:  ; Load address at hl, and stores A,E,D,C,B registers at that address. Modifies A' register
	        ex af, af'
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a     ; HL = (HL)
	        ex af, af'

__STOREF:	; Stores the given FP number in A EDCB at address HL
			ld (hl), a
			inc hl
			ld (hl), e
			inc hl
			ld (hl), d
			inc hl
			ld (hl), c
			inc hl
			ld (hl), b
			ret

#line 7 "pstoref.asm"

	; Stored a float number in A ED CB into the address pointed by IX + HL
__PSTOREF:
		push de
	    ex de, hl  ; DE <- HL
	    push ix
		pop hl	   ; HL <- IX
	    add hl, de ; HL <- IX + DE
		pop de
	    jp __STOREF

#line 7968 "IslaTesoro.zxbas"
#line 1 "pstorestr.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). A new copy of the string is created into the HEAP
	;

#line 1 "storestr.asm"

; vim:ts=4:et:sw=4
	; Stores value of current string pointed by DE register into address pointed by HL
	; Returns DE = Address pointer  (&a$)
	; Returns HL = HL               (b$ => might be needed later to free it from the heap)
	;
	; e.g. => HL = _variableName    (DIM _variableName$)
	;         DE = Address into the HEAP
	;
	; This function will resize (REALLOC) the space pointed by HL
	; before copying the content of b$ into a$


#line 1 "strcpy.asm"

#line 1 "realloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.







	; ---------------------------------------------------------------------
	; MEM_REALLOC
	;  Reallocates a block of memory in the heap.
	;
	; Parameters
	;  HL = Pointer to the original block
	;  BC = New Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	;
; Notes:
	;  If BC = 0, the block is freed, otherwise
	;  the content of the original block is copied to the new one, and
	;  the new size is adjusted. If BC < original length, the content
	;  will be truncated. Otherwise, extra block content might contain
	;  memory garbage.
	;
	; ---------------------------------------------------------------------
__REALLOC:    ; Reallocates block pointed by HL, with new length BC
	        PROC

	        LOCAL __REALLOC_END

	        ld a, h
	        or l
	        jp z, __MEM_ALLOC    ; If HL == NULL, just do a malloc

	        ld e, (hl)
	        inc hl
	        ld d, (hl)    ; DE = First 2 bytes of HL block

	        push hl
	        exx
	        pop de
	        inc de        ; DE' <- HL + 2
	        exx            ; DE' <- HL (Saves current pointer into DE')

	        dec hl        ; HL = Block start

	        push de
	        push bc
	        call __MEM_FREE        ; Frees current block
	        pop bc
	        push bc
	        call __MEM_ALLOC    ; Gets a new block of length BC
	        pop bc
	        pop de

	        ld a, h
	        or l
	        ret z        ; Return if HL == NULL (No memory)

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl        ; Recovers first 2 bytes in HL

	        dec bc
	        dec bc        ; BC = BC - 2 (Two bytes copied)

	        ld a, b
	        or c
	        jp z, __REALLOC_END        ; Ret if nothing to copy (BC == 0)

	        exx
	        push de
	        exx
	        pop de        ; DE <- DE' ; Start of remaining block

	        push hl        ; Saves current Block + 2 start
        ex de, hl    ; Exchanges them: DE is destiny block
	        ldir        ; Copies BC Bytes
	        pop hl        ; Recovers Block + 2 start

__REALLOC_END:

	        dec hl        ; Set HL
	        dec hl        ; To begin of block
	        ret

	        ENDP

#line 2 "strcpy.asm"

	; String library


__STRASSIGN: ; Performs a$ = b$ (HL = address of a$; DE = Address of b$)
			PROC

			LOCAL __STRREALLOC
			LOCAL __STRCONTINUE
			LOCAL __B_IS_NULL
			LOCAL __NOTHING_TO_COPY

			ld b, d
			ld c, e
			ld a, b
			or c
			jr z, __B_IS_NULL

			ex de, hl
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl		; BC = LEN(b$)
			ex de, hl	; DE = &b$

__B_IS_NULL:		; Jumps here if B$ pointer is NULL
			inc bc
			inc bc		; BC = BC + 2  ; (LEN(b$) + 2 bytes for storing length)

			push de
			push hl

			ld a, h
			or l
			jr z, __STRREALLOC

			dec hl
			ld d, (hl)
			dec hl
			ld e, (hl)	; DE = MEMBLOCKSIZE(a$)
			dec de
			dec de		; DE = DE - 2  ; (Membloksize takes 2 bytes for memblock length)

			ld h, b
			ld l, c		; HL = LEN(b$) + 2  => Minimum block size required
			ex de, hl	; Now HL = BLOCKSIZE(a$), DE = LEN(b$) + 2

			or a		; Prepare to subtract BLOCKSIZE(a$) - LEN(b$)
			sbc hl, de  ; Carry if len(b$) > Blocklen(a$)
			jr c, __STRREALLOC ; No need to realloc
			; Need to reallocate at least to len(b$) + 2
			ex de, hl	; DE = Remaining bytes in a$ mem block.
			ld hl, 4
			sbc hl, de  ; if remaining bytes < 4 we can continue
			jr nc,__STRCONTINUE ; Otherwise, we realloc, to free some bytes

__STRREALLOC:
			pop hl
			call __REALLOC	; Returns in HL a new pointer with BC bytes allocated
			push hl

__STRCONTINUE:	;   Pops hl and de SWAPPED
			pop de	;	DE = &a$
			pop hl	; 	HL = &b$

			ld a, d		; Return if not enough memory for new length
			or e
			ret z		; Return if DE == NULL (0)

__STRCPY:	; Copies string pointed by HL into string pointed by DE
				; Returns DE as HL (new pointer)
			ld a, h
			or l
			jr z, __NOTHING_TO_COPY
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl
			inc bc
			inc bc
			push de
			ldir
			pop hl
			ret

__NOTHING_TO_COPY:
			ex de, hl
			ld (hl), e
			inc hl
			ld (hl), d
			dec hl
			ret

			ENDP

#line 14 "storestr.asm"

__PISTORE_STR:          ; Indirect assignement at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR:           ; Indirect assignement, hl point to a pointer to a pointer to the heap!
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

__STORE_STR:
	    push de             ; Pointer to b$
	    push hl             ; Array pointer to variable memory address

	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

	    call __STRASSIGN    ; HL (a$) = DE (b$); HL changed to a new dynamic memory allocation
	    ex de, hl           ; DE = new address of a$
	    pop hl              ; Recover variable memory address pointer

	    ld (hl), e
	    inc hl
	    ld (hl), d          ; Stores a$ ptr into elemem ptr

	    pop hl              ; Returns ptr to b$ in HL (Caller might needed to free it from memory)
	    ret

#line 8 "pstorestr.asm"

__PSTORE_STR:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR

#line 7969 "IslaTesoro.zxbas"
#line 1 "pstorestr2.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "storestr2.asm"

	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.



__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR2:
		ld c, (hl)  ; Dereferences HL
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string variable address)

__STORE_STR2:
		push hl
		ld c, (hl)
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string address)

		push de
		call __MEM_FREE
		pop de

		pop hl
		ld (hl), e
		inc hl
		ld (hl), d
		dec hl		; HL points to mem address variable. This might be useful in the future.

		ret

#line 9 "pstorestr2.asm"

__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR2

#line 7970 "IslaTesoro.zxbas"
#line 1 "random.asm"

	; RANDOM functions

RANDOMIZE:
	    ; Randomize with 32 bit seed in DE HL
	    ; if SEED = 0, calls ROM to take frames as seed
	    PROC

	    LOCAL TAKE_FRAMES
	    LOCAL FRAMES

	    ld a, h
	    or l
	    or d
	    or e
	    jr z, TAKE_FRAMES

	    ld (RANDOM_SEED_LOW), hl
	    ld (RANDOM_SEED_HIGH), de
	    ret

TAKE_FRAMES:
	    ; Takes the seed from frames
	    ld hl, (FRAMES)
	    ld (RANDOM_SEED_LOW), hl
	    ld hl, (FRAMES + 2)
	    ld (RANDOM_SEED_HIGH), hl
	    ret

	FRAMES EQU    23672
	    ENDP

	RANDOM_SEED_HIGH EQU RAND+6    ; RANDOM seed, 16 higher bits
	RANDOM_SEED_LOW     EQU 23670  ; RANDOM seed, 16 lower bits


RAND:
	    PROC
	    LOCAL RAND_LOOP
	    ld b, 4
RAND_LOOP:
	    ld  hl,(RANDOM_SEED_LOW)   ; xz -> yw
	    ld  de,0C0DEh   ; yw -> zt
	    ld  (RANDOM_SEED_LOW),de  ; x = y, z = w
	    ld  a,e         ; w = w ^ ( w << 3 )
	    add a,a
	    add a,a
	    add a,a
	    xor e
	    ld  e,a
	    ld  a,h         ; t = x ^ (x << 1)
	    add a,a
	    xor h
	    ld  d,a
	    rra             ; t = t ^ (t >> 1) ^ w
	    xor d
	    xor e
	    ld  h,l         ; y = z
	    ld  l,a         ; w = t
	    ld  (RANDOM_SEED_HIGH),hl
	    push af
	    djnz RAND_LOOP
	    pop af
	    pop af
	    ld d, a
	    pop af
	    ld e, a
	    pop af
	    ld h, a
	    ret
	    ENDP

RND:
	    ; Returns a FLOATING point integer
	    ; using RAND as a mantissa
	    PROC
	    LOCAL RND_LOOP

	    call RAND
	    ; BC = HL since ZX BASIC uses ED CB A registers for FP
	    ld b, h
	    ld c, l

	    ld a, e
	    or d
	    or c
	    or b
	    ret z   ; Returns 0 if BC=DE=0

	    ; We already have a random 32 bit mantissa in ED CB
	    ; From 0001h to FFFFh

	    ld l, 81h	; Exponent
	    ; At this point we have [0 .. 1) FP number;

	    ; Now we must shift mantissa left until highest bit goes into carry
	    ld a, e ; Use A register for rotating E faster (using RLA instead of RL E)
RND_LOOP:
	    dec l
	    sla b
	    rl c
	    rl d
	    rla
	    jp nc, RND_LOOP

	    ; Now undo last mantissa left-shift once
	    ccf ; Clears carry to insert a 0 bit back into mantissa -> positive FP number
	    rra
	    rr d
	    rr c
	    rr b

	    ld e, a     ; E must have the highest byte
	    ld a, l     ; exponent in A
	    ret

	    ENDP

#line 7971 "IslaTesoro.zxbas"
#line 1 "sgnf.asm"

#line 1 "sgn.asm"

	; Returns SGN (SIGN) for 32, 16 and 8 bits signed integers, Fixed and FLOAT

	    PROC
	    LOCAL __ENDSGN

__SGNF:
	    or b
	    or c
	    or d
	    or e
	    ret z
	    ld a, e
	    jr __ENDSGN

__SGNF16:
__SGNI32:
		ld a, h
		or l
		or e
		or d
		ret z

	    ld a, d
	    jr __ENDSGN

__SGNI16:
		ld a, h
		or l
		ret z
		ld a, h

__ENDSGN:
		or a
		ld a, 1
		ret p
		neg
		ret

	    ENDP

#line 2 "sgnf.asm"

#line 7972 "IslaTesoro.zxbas"
#line 1 "sgni8.asm"

	; Returns SGN (SIGN) for 8 bits signed integer

__SGNI8:
		or a
		ret z
		ld a, 1
		ret p
		neg
		ret

#line 7973 "IslaTesoro.zxbas"


#line 1 "strcat.asm"


#line 1 "strlen.asm"

	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL

__STRLEN:	; Direct FASTCALL entry
			ld a, h
			or l
			ret z

			ld a, (hl)
			inc hl
			ld h, (hl)  ; LEN(str) in HL
			ld l, a
			ret


#line 3 "strcat.asm"

__ADDSTR:	; Implements c$ = a$ + b$
				; hl = &a$, de = &b$ (pointers)


__STRCAT2:	; This routine creates a new string in dynamic space
				; making room for it. Then copies a$ + b$ into it.
				; HL = a$, DE = b$

			PROC

			LOCAL __STR_CONT
			LOCAL __STRCATEND

			push hl
			call __STRLEN
			ld c, l
			ld b, h		; BC = LEN(a$)
			ex (sp), hl ; (SP) = LEN (a$), HL = a$
			push hl		; Saves pointer to a$

			inc bc
			inc bc		; +2 bytes to store length

			ex de, hl
			push hl
			call __STRLEN
			; HL = len(b$)

			add hl, bc	; Total str length => 2 + len(a$) + len(b$)

			ld c, l
			ld b, h		; BC = Total str length + 2
			call __MEM_ALLOC
			pop de		; HL = c$, DE = b$

			ex de, hl	; HL = b$, DE = c$
			ex (sp), hl ; HL = a$, (SP) = b$

			exx
			pop de		; D'E' = b$
			exx

			pop bc		; LEN(a$)

			ld a, d
			or e
		ret z		; If no memory: RETURN

__STR_CONT:
			push de		; Address of c$

			ld a, h
			or l
			jr nz, __STR_CONT1 ; If len(a$) != 0 do copy

	        ; a$ is NULL => uses HL = DE for transfer
			ld h, d
			ld l, e
			ld (hl), a	; This will copy 00 00 at (DE) location
	        inc de      ;
	        dec bc      ; Ensure BC will be set to 1 in the next step

__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
			inc bc
			inc bc		; BC = BC + 2
		ldir		; MEMCOPY: c$ = a$
			pop hl		; HL = c$

			exx
			push de		; Recovers b$; A ex hl,hl' would be very handy
			exx

			pop de		; DE = b$

__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
		  ; NOTE: Both DE, BC and AF are modified and lost
			  ; Returns HL (pointer to a$)
			  ; a$ Must be NOT NULL
			ld a, d
			or e
			ret z		; Returns if de is NULL (nothing to copy)

			push hl		; Saves HL to return it later

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl
			add hl, bc	; HL = end of (a$) string ; bc = len(a$)
			push bc		; Saves LEN(a$) for later

			ex de, hl	; DE = end of string (Begin of copy addr)
			ld c, (hl)
			inc hl
			ld b, (hl)	; BC = len(b$)

			ld a, b
			or c
			jr z, __STRCATEND; Return if len(b$) == 0

			push bc			 ; Save LEN(b$)
			inc hl			 ; Skip 2nd byte of len(b$)
			ldir			 ; Concatenate b$

			pop bc			 ; Recovers length (b$)
			pop hl			 ; Recovers length (a$)
			add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
			ex de, hl		 ; DE = LEN(a$+b$)
			pop hl

			ld (hl), e		 ; Updates new LEN and return
			inc hl
			ld (hl), d
			dec hl
			ret

__STRCATEND:
			pop hl		; Removes Len(a$)
			pop hl		; Restores original HL, so HL = a$
			ret

			ENDP

#line 7976 "IslaTesoro.zxbas"
#line 1 "string.asm"

	; String library



__STR_ISNULL:	; Returns A = FF if HL is 0, 0 otherwise
			ld a, h
			or l
			sub 1		; Only CARRY if HL is NULL
			sbc a, a	; Only FF if HL is NULL (0 otherwise)
			ret


__STRCMP:	; Compares strings at HL, DE: Returns 0 if EQual, -1 if HL < DE, +1 if HL > DE
				; A register is preserved and returned in A'
			PROC ; __FASTCALL__

			LOCAL __STRCMPZERO
			LOCAL __STRCMPEXIT
			LOCAL __STRCMPLOOP
			LOCAL __NOPRESERVEBC
			LOCAL __EQULEN
			LOCAL __EQULEN1
			LOCAL __HLZERO

			ex af, af'	; Saves current A register in A' (it's used by STRXX comparison functions)

			ld a, h
			or l
			jr z, __HLZERO

			ld a, d
			or e
			ld a, 1
			ret z		; Returns +1 if HL is not NULL and DE is NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl		; BC = LEN(a$)
			push hl		; HL = &a$, saves it

			ex de, hl
			ld e, (hl)
			inc hl
			ld d, (hl)
			inc hl
			ex de, hl	; HL = LEN(b$), de = &b$

			; At this point Carry is cleared, and A reg. = 1
			sbc hl, bc	; Carry if len(b$) > len(a$)
			jr z, __EQULEN	; Jump if they have the same length so A reg. = 0
			jr c, __EQULEN1 ; Jump if len(b$) > len(a$) so A reg. = 1
__NOPRESERVEBC:
			add hl, bc	; Restore HL (original length)
			ld b, h		; len(b$) <= len(a$)
			ld c, l		; so BC = hl
			dec a		; At this point A register = 0, it must be -1 since len(a$) > len(b$)
__EQULEN:
			dec a		; A = 0 if len(a$) = len(b$), -1 otherwise
__EQULEN1:
			pop hl		; Recovers A$ pointer
			push af		; Saves A for later (Value to return if strings reach the end)
	        ld a, b
	        or c
	        jr z, __STRCMPZERO ; empty string being compared

		; At this point: BC = lesser length, DE and HL points to b$ and a$ chars respectively
__STRCMPLOOP:
			ld a, (de)
			cpi
			jr nz, __STRCMPEXIT ; (HL) != (DE). Examine carry
			jp po, __STRCMPZERO ; END of string (both are equal)
			inc de
			jp __STRCMPLOOP

__STRCMPZERO:
			pop af		; This is -1 if len(a$) < len(b$), +1 if len(b$) > len(a$), 0 otherwise
			ret

__STRCMPEXIT:		; Sets A with the following value
			dec hl		; Get back to the last char
			cp (hl)
			sbc a, a	; A = -1 if carry => (DE) < (HL); 0 otherwise (DE) > (HL)
			cpl			; A = -1 if (HL) < (DE), 0 otherwise
			add a, a    ; A = A * 2 (thus -2 or 0)
			inc a		; A = A + 1 (thus -1 or 1)

			pop bc		; Discard top of the stack
			ret

__HLZERO:
			or d
			or e
			ret z		; Returns 0 (EQ) if HL == DE == NULL
			ld a, -1
			ret			; Returns -1 if HL is NULL and DE is not NULL

			ENDP

			; The following routines perform string comparison operations (<, >, ==, etc...)
			; On return, A will contain 0 for False, other value for True
			; Register A' will determine whether the incoming strings (HL, DE) will be freed
		; from dynamic memory on exit:
			;		Bit 0 => 1 means HL will be freed.
			;		Bit 1 => 1 means DE will be freed.

__STREQ:	; Compares a$ == b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;inc a		; If A == -1, return 0
			;jp z, __FREE_STR

			;dec a		;
			;dec a		; Return -1 if a = 0 (True), returns 0 if A == 1 (False)
	        sub 1
	        sbc a, a
			jp __FREE_STR


__STRNE:	; Compares a$ != b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;jp z, __FREE_STR

			;ld a, 0FFh	; Returns 0xFFh (True)
			jp __FREE_STR


__STRLT:	; Compares a$ < b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR ; Returns 0 if A == B

			dec a		; Returns 0 if A == 1 => a$ > b$
			;jp z, __FREE_STR

			;inc a		; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRLE:	; Compares a$ <= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			dec a		; Returns 0 if A == 1 => a$ < b$
			;jp z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGT:	; Compares a$ > b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR		; Returns 0 if A == B

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jp z, __FREE_STR		; Returns 0 if A == B

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGE:	; Compares a$ >= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jr z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return

__FREE_STR: ; This exit point will test A' for bits 0 and 1
				; If bit 0 is 1 => Free memory from HL pointer
				; If bit 1 is 1 => Free memory from DE pointer
				; Finally recovers A, to return the result
			PROC

			LOCAL __FREE_STR2
			LOCAL __FREE_END

			ex af, af'
			bit 0, a
			jr z, __FREE_STR2

			push af
			push de
			call __MEM_FREE
			pop de
			pop af

__FREE_STR2:
			bit 1, a
			jr z, __FREE_END

			ex de, hl
			call __MEM_FREE

__FREE_END:
			ex af, af'
			ret

			ENDP

#line 7977 "IslaTesoro.zxbas"

#line 1 "strslice.asm"

	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;





__STRSLICE:			; Callee entry
		pop hl			; Return ADDRESS
		pop bc			; Last char pos
		pop de			; 1st char pos
		ex (sp), hl		; CALLEE. -> String start

__STRSLICE_FAST:	; __FASTCALL__ Entry
		PROC

		LOCAL __CONT
		LOCAL __EMPTY
		LOCAL __FREE_ON_EXIT

		push hl			; Stores original HL pointer to be recovered on exit
		ex af, af'		; Saves A register for later

		push hl
		call __STRLEN
		inc bc			; Last character position + 1 (string starts from 0)
		or a
		sbc hl, bc		; Compares length with last char position
		jr nc, __CONT	; If Carry => We must copy to end of string
		add hl, bc		; Restore back original LEN(a$) in HL
		ld b, h
		ld c, l			; Copy to the end of str
		ccf				; Clears Carry flag for next subtraction

__CONT:
		ld h, b
		ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
		sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
		jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
		jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

		ld b, h
		ld c, l			; BC = Number of chars to copy
		inc bc
		inc bc			; +2 bytes for string length number

		push bc
		push de
		call __MEM_ALLOC
		pop de
		pop bc
		ld a, h
		or l
		jr z, __EMPTY	; Return if NULL (no memory)

		dec bc
		dec bc			; Number of chars to copy (Len of slice)

		ld (hl), c
		inc hl
		ld (hl), b
		inc hl			; Stores new string length

		ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
		inc hl
		inc hl			; Skip string length
		add hl, de		; Were to start from A$
		pop de			; Start of new string chars
		push de			; Stores it again
		ldir			; Copies BC chars
		pop de
		dec de
		dec de			; Points to String LEN start
		ex de, hl		; Returns it in HL
		jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
		pop hl
		ld hl, 0		; Return NULL


__FREE_ON_EXIT:
		ex af, af'		; Recover original A register
		ex (sp), hl		; Original HL pointer

		or a
		call nz, __MEM_FREE

		pop hl			; Recover result
		ret

		ENDP

#line 7979 "IslaTesoro.zxbas"
#line 1 "sub32.asm"

	; SUB32
	; Perform TOP of the stack - DEHL
	; Pops operand out of the stack (CALLEE)
	; and returns result in DEHL. Carry an Z are set correctly

__SUB32:
		exx
		pop bc		; saves return address in BC'
		exx

		or a        ; clears carry flag
		ld b, h     ; Operands come reversed => BC <- HL,  HL = HL - BC
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl

		ld b, h	    ; High part (DE) now in HL. Repeat operation
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl   ; DEHL now has de 32 bit result

		exx
		push bc		; puts return address back
		exx
		ret
#line 7980 "IslaTesoro.zxbas"
#line 1 "subf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------


__SUBF:	; Subtraction
		call __FPSTACK_PUSH2	; ENTERS B, A

		; ------------- ROM SUB
		rst 28h
		defb 01h	; EXCHANGE
		defb 03h	; SUB
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 7981 "IslaTesoro.zxbas"

#line 1 "val.asm"





VAL: ; Computes VAL(a$) using ROM FP-CALC
		 ; HL = address of a$
		 ; Returns FP number in C ED LH registers
		 ; A Register = 1 => Free a$ on return

		PROC

		LOCAL STK_STO_S
		LOCAL __RET_ZERO
		LOCAL ERR_SP
		LOCAL STKBOT
		LOCAL RECLAIM1
	    LOCAL CH_ADD
		LOCAL __VAL_ERROR
		LOCAL __VAL_EMPTY
	    LOCAL SET_MIN

	RECLAIM1	EQU 6629
	STKBOT		EQU 23651
	ERR_SP		EQU 23613
	CH_ADD      EQU 23645
	STK_STO_S	EQU	2AB2h
	SET_MIN     EQU 16B0h

	    ld d, a ; Preserves A register in DE
		ld a, h
		or l
		jr z, __RET_ZERO ; NULL STRING => Return 0

	    push de ; Saves A Register (now in D)
		push hl	; Not null string. Save its address for later

		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl

		ld a, b
		or c
		jr z, __VAL_EMPTY ; Jumps VAL_EMPTY on empty string

		ex de, hl ; DE = String start

	    ld hl, (CH_ADD)
	    push hl

		ld hl, (STKBOT)
		push hl

		ld hl, (ERR_SP)
		push hl

	    ;; Now put our error handler on ERR_SP
		ld hl, __VAL_ERROR
		push hl
		ld hl, 0
		add hl, sp
		ld (ERR_SP), hl

		call STK_STO_S ; Enter it on the stack

		ld b, 1Dh ; "VAL"
		rst 28h	; ROM CALC
		defb 1Dh ; VAL
		defb 38h ; END CALC

		pop hl 	; Discards our current error handler
		pop hl
		ld (ERR_SP), hl	; Restores ERR_SP

		pop de	         ; old STKBOT
		ld hl, (STKBOT)  ; current SKTBOT
		call	RECLAIM1 ; Recover unused space

	    pop hl  ; Discards old CH_ADD value
		pop hl 	; String pointer
		pop af	; Deletion flag
		or a
		call nz, __MEM_FREE	; Frees string content before returning

	    ld a, ERROR_Ok      ; Sets OK in the result
	    ld (ERR_NR), a

		jp __FPSTACK_POP	; Recovers result and return from there

__VAL_ERROR:	; Jumps here on ERROR
		pop hl
		ld (ERR_SP), hl ; Restores ERR_SP

		ld hl, (STKBOT)  ; current SKTBOT
		pop de	; old STKBOT
	    pop hl
	    ld (CH_ADD), hl  ; Recovers old CH_ADD

	    call 16B0h       ; Resets temporary areas after an error

__VAL_EMPTY:	; Jumps here on empty string
		pop hl      ; Recovers initial string address
	pop af      ; String flag: If not 0 => it's temporary
		or a
		call nz, __MEM_FREE ; Frees "" string

__RET_ZERO:	; Returns 0 Floating point on error
		ld a, ERROR_Ok
		ld (ERR_NR), a

		xor a
		ld b, a
		ld c, a
		ld d, b
		ld e, c
		ret

		ENDP

#line 7983 "IslaTesoro.zxbas"

ZXBASIC_USER_DATA:
	_input_LastK EQU 23560
_Accion:
	DEFB 00, 00
_MoverPiratas:
	DEFB 00
_Primera:
	DEFB 00h
_PasosPiratas:
	DEFB 32h
_PasosJugadorRetroceso:
	DEFB 0Ah
_AvancesPirataMapa:
	DEFB 01h
_VelocidadTemplo:
	DEFB 32h
	DEFB 00h
_HastaTeclaArena:
	DEFB 88h
	DEFB 13h
_ParaTeclaArena:
	DEFB 0E8h
	DEFB 03h
_cuenta:
	DEFB 00
_res:
	DEFB 00, 00
_imgCaptura:
	DEFW __LABEL482
_imgCaptura.__DATA__.__PTR__:
	DEFW _imgCaptura.__DATA__
_imgCaptura.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 17h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 60h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FEh
	DEFB 0Fh
	DEFB 33h
	DEFB 93h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 8Fh
	DEFB 0F8h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 17h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E1h
	DEFB 0FFh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F8h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 17h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 6Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 38h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 78h
	DEFB 09h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F1h
	DEFB 54h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0F0h
	DEFB 00h
	DEFB 0FFh
	DEFB 02h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 17h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F8h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 1Ch
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0E0h
	DEFB 78h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 03h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 3Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 83h
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F8h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F8h
	DEFB 03h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 07h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0FCh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0F8h
	DEFB 00h
	DEFB 0A7h
	DEFB 0F0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0C7h
	DEFB 0FEh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0Fh
	DEFB 03h
	DEFB 81h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0E0h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F0h
	DEFB 5Eh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 15h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0C7h
	DEFB 0FEh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0ECh
	DEFB 00h
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 1Fh
	DEFB 87h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 67h
	DEFB 83h
	DEFB 0F8h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 15h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0DFh
	DEFB 0FEh
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0C3h
	DEFB 80h
	DEFB 07h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 1Fh
	DEFB 87h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0FCh
	DEFB 27h
	DEFB 0DEh
	DEFB 7Eh
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 80h
	DEFB 0C0h
	DEFB 03h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FEh
	DEFB 1Fh
	DEFB 07h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F2h
	DEFB 0AAh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 11h
	DEFB 0C3h
	DEFB 3Fh
	DEFB 80h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 00h
	DEFB 01h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0F1h
	DEFB 3Eh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0B2h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F7h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0F2h
	DEFB 1Ch
	DEFB 3Ch
	DEFB 07h
	DEFB 0C0h
	DEFB 10h
	DEFB 01h
	DEFB 87h
	DEFB 80h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C7h
	DEFB 0D9h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 67h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FEh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 03h
	DEFB 0F9h
	DEFB 0BCh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 03h
	DEFB 0F8h
	DEFB 01h
	DEFB 0DFh
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0ECh
	DEFB 46h
	DEFB 1Ch
	DEFB 21h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 03h
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 6Ch
	DEFB 0F1h
	DEFB 0E3h
	DEFB 3Fh
	DEFB 0FEh
	DEFB 67h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C0h
	DEFB 21h
	DEFB 0BFh
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 07h
	DEFB 0F1h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0E1h
	DEFB 3Dh
	DEFB 81h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0EFh
	DEFB 0F0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0C1h
	DEFB 0EAh
	DEFB 0FAh
	DEFB 0Fh
	DEFB 80h
	DEFB 00h
	DEFB 01h
	DEFB 83h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E1h
	DEFB 98h
	DEFB 61h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 86h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 03h
	DEFB 0F9h
	DEFB 0DCh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 07h
	DEFB 0F8h
	DEFB 01h
	DEFB 0DFh
	DEFB 0FDh
	DEFB 7Fh
	DEFB 0F3h
	DEFB 0E4h
	DEFB 46h
	DEFB 1Ch
	DEFB 01h
	DEFB 37h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0Fh
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 4Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FCh
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 0C0h
	DEFB 31h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C1h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 8Fh
	DEFB 01h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0EFh
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FDh
	DEFB 0FCh
	DEFB 1Bh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 83h
	DEFB 78h
	DEFB 1Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 61h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 97h
	DEFB 07h
	DEFB 0FFh
	DEFB 48h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 03h
	DEFB 0F8h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0F0h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 07h
	DEFB 0FEh
	DEFB 03h
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F3h
	DEFB 0E4h
	DEFB 6Fh
	DEFB 0FCh
	DEFB 61h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E6h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 30h
	DEFB 88h
	DEFB 0FFh
	DEFB 80h
	DEFB 03h
	DEFB 93h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 0E0h
	DEFB 31h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 73h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 0E0h
	DEFB 00h
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0DEh
	DEFB 01h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0D7h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 7Fh
	DEFB 77h
	DEFB 33h
	DEFB 8Fh
	DEFB 0FCh
	DEFB 0C1h
	DEFB 0C1h
	DEFB 00h
	DEFB 9Ch
	DEFB 38h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 80h
	DEFB 61h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E6h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FBh
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 03h
	DEFB 0F0h
	DEFB 3Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 07h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 0DFh
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E3h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 1Ch
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 71h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F8h
	DEFB 03h
	DEFB 60h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0F2h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0FCh
	DEFB 0F0h
	DEFB 01h
	DEFB 38h
	DEFB 0Fh
	DEFB 0E2h
	DEFB 01h
	DEFB 87h
	DEFB 0FEh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0CEh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 06h
	DEFB 73h
	DEFB 60h
	DEFB 0CFh
	DEFB 0FEh
	DEFB 0E3h
	DEFB 0FDh
	DEFB 90h
	DEFB 10h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 61h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E4h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 03h
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F1h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F0h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E7h
	DEFB 0FEh
	DEFB 0Fh
	DEFB 0F1h
	DEFB 0FFh
	DEFB 37h
	DEFB 1Ch
	DEFB 46h
	DEFB 7Fh
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F0h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E3h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0C0h
	DEFB 65h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0FEh
	DEFB 7Eh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0B0h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F8h
	DEFB 0F8h
	DEFB 00h
	DEFB 0E7h
	DEFB 70h
	DEFB 0FFh
	DEFB 0BEh
	DEFB 01h
	DEFB 83h
	DEFB 0FEh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0CCh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 16h
	DEFB 0FEh
	DEFB 00h
	DEFB 67h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0D8h
	DEFB 0E1h
	DEFB 0FFh
	DEFB 0FDh
	DEFB 0E5h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 03h
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 93h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E3h
	DEFB 0BEh
	DEFB 1Fh
	DEFB 0F1h
	DEFB 0D3h
	DEFB 21h
	DEFB 1Ch
	DEFB 0C6h
	DEFB 8Fh
	DEFB 63h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E3h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 67h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FDh
	DEFB 0FDh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FCh
	DEFB 03h
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0DDh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 0F8h
	DEFB 07h
	DEFB 43h
	DEFB 0F0h
	DEFB 0DCh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0CCh
	DEFB 1Fh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 12h
	DEFB 0CCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 08h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 61h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0E9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0EFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 03h
	DEFB 0F0h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FEh
	DEFB 1Ch
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FBh
	DEFB 0BFh
	DEFB 1Fh
	DEFB 0F1h
	DEFB 0DBh
	DEFB 21h
	DEFB 3Ch
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 80h
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E3h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 47h
	DEFB 0F8h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 71h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F9h
	DEFB 0F9h
	DEFB 01h
	DEFB 3Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0FEh
	DEFB 82h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0A0h
	DEFB 81h
	DEFB 0EEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F0h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F4h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 87h
	DEFB 0E0h
	DEFB 0AFh
	DEFB 01h
	DEFB 0BFh
	DEFB 00h
	DEFB 10h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C4h
	DEFB 19h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 02h
	DEFB 08h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 80h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0F9h
	DEFB 70h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 13h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0DFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 03h
	DEFB 0F8h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0E6h
	DEFB 1Ch
	DEFB 61h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0CFh
	DEFB 1Fh
	DEFB 0F0h
	DEFB 6Bh
	DEFB 91h
	DEFB 3Fh
	DEFB 0BDh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 80h
	DEFB 0Eh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0A1h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 20h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0A5h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 7Fh
	DEFB 0EFh
	DEFB 0FEh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0EFh
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0DFh
	DEFB 0E1h
	DEFB 0FEh
	DEFB 0CFh
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0F0h
	DEFB 3Fh
	DEFB 7Fh
	DEFB 0FCh
	DEFB 0FBh
	DEFB 6Fh
	DEFB 2Ah
	DEFB 5Fh
	DEFB 0BFh
	DEFB 7Dh
	DEFB 9Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 07h
	DEFB 8Eh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 78h
	DEFB 0Fh
	DEFB 3Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 9Eh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 9Eh
	DEFB 00h
	DEFB 1Eh
	DEFB 3Ch
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 3Eh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 07h
	DEFB 8Fh
	DEFB 07h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 00h
	DEFB 78h
	DEFB 0F0h
	DEFB 0F8h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 80h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 0F0h
	DEFB 0FCh
	DEFB 3Fh
	DEFB 7Eh
	DEFB 0F0h
	DEFB 7Eh
	DEFB 00h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 7Eh
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 1Fh
	DEFB 9Fh
	DEFB 3Ch
	DEFB 00h
	DEFB 0FDh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 03h
	DEFB 0E3h
	DEFB 0E3h
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0E7h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 3Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 01h
	DEFB 0FFh
	DEFB 0F1h
	DEFB 0EDh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 97h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0BDh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0BFh
	DEFB 0FCh
	DEFB 0FBh
	DEFB 0DFh
	DEFB 0CEh
	DEFB 0E1h
	DEFB 0E6h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 98h
	DEFB 7Fh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0F0h
	DEFB 3Eh
	DEFB 3Fh
	DEFB 0FBh
	DEFB 7Dh
	DEFB 0E3h
	DEFB 0E8h
	DEFB 3Fh
	DEFB 0BFh
	DEFB 7Fh
	DEFB 0FBh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 07h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 78h
	DEFB 1Eh
	DEFB 3Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 01h
	DEFB 1Fh
	DEFB 0BCh
	DEFB 00h
	DEFB 1Eh
	DEFB 7Ch
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 01h
	DEFB 07h
	DEFB 9Fh
	DEFB 07h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 00h
	DEFB 0Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 0E0h
	DEFB 78h
	DEFB 3Eh
	DEFB 7Ch
	DEFB 0F0h
	DEFB 7Ch
	DEFB 00h
	DEFB 0Fh
	DEFB 0C0h
	DEFB 7Ch
	DEFB 0F8h
	DEFB 0FFh
	DEFB 00h
	DEFB 3Eh
	DEFB 1Fh
	DEFB 1Eh
	DEFB 1Ch
	DEFB 00h
	DEFB 0F9h
	DEFB 0F0h
	DEFB 78h
	DEFB 0F0h
	DEFB 7Ch
	DEFB 03h
	DEFB 0C3h
	DEFB 0C3h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F3h
	DEFB 67h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 01h
	DEFB 0FFh
	DEFB 0F7h
	DEFB 7Fh
	DEFB 87h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 01h
	DEFB 0FFh
	DEFB 0F7h
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 97h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 0F3h
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F2h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 77h
	DEFB 0F3h
	DEFB 0E6h
	DEFB 0BFh
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 38h
	DEFB 1Fh
	DEFB 1Fh
	DEFB 00h
	DEFB 0F9h
	DEFB 3Eh
	DEFB 1Ch
	DEFB 0E5h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0BEh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C3h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0F0h
	DEFB 1Eh
	DEFB 78h
	DEFB 00h
	DEFB 1Fh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 78h
	DEFB 1Fh
	DEFB 3Ch
	DEFB 00h
	DEFB 3Eh
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 0F0h
	DEFB 78h
	DEFB 3Ch
	DEFB 38h
	DEFB 0Fh
	DEFB 1Eh
	DEFB 07h
	DEFB 80h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 3Fh
	DEFB 0FBh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 03h
	DEFB 0FFh
	DEFB 0EFh
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 3Fh
	DEFB 0D4h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0DFh
	DEFB 0F9h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0F2h
	DEFB 0FFh
	DEFB 0BFh
	DEFB 0FDh
	DEFB 0FBh
	DEFB 0F7h
	DEFB 6Fh
	DEFB 0F3h
	DEFB 0DDh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0DEh
	DEFB 0FFh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 18h
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0FCh
	DEFB 8Fh
	DEFB 0Eh
	DEFB 0F5h
	DEFB 0BBh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 83h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E3h
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0F0h
	DEFB 3Dh
	DEFB 0F0h
	DEFB 00h
	DEFB 3Eh
	DEFB 78h
	DEFB 78h
	DEFB 01h
	DEFB 3Eh
	DEFB 78h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 00h
	DEFB 78h
	DEFB 78h
	DEFB 01h
	DEFB 0Fh
	DEFB 3Eh
	DEFB 0Fh
	DEFB 81h
	DEFB 0E1h
	DEFB 0E1h
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0DEh
	DEFB 0DFh
	DEFB 0CFh
	DEFB 0FEh
	DEFB 0Fh
	DEFB 0F0h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0F9h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FDh
	DEFB 3Fh
	DEFB 0D7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F9h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0F2h
	DEFB 0FFh
	DEFB 0BBh
	DEFB 0FCh
	DEFB 0FBh
	DEFB 0D7h
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0D9h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FBh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0Ch
	DEFB 07h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 0FCh
	DEFB 00h
	DEFB 5Bh
	DEFB 0FFh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 8Eh
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 0FFh
	DEFB 70h
	DEFB 0FFh
	DEFB 0C3h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 3Ch
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 0Fh
	DEFB 3Ch
	DEFB 01h
	DEFB 0EEh
	DEFB 1Eh
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F8h
	DEFB 03h
	DEFB 0DCh
	DEFB 3Ch
	DEFB 0F0h
	DEFB 3Fh
	DEFB 0E7h
	DEFB 83h
	DEFB 0C7h
	DEFB 9Eh
	DEFB 07h
	DEFB 0B8h
	DEFB 07h
	DEFB 0FCh
	DEFB 07h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0F0h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 3Ch
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 0F8h
	DEFB 3Ch
	DEFB 78h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 0F1h
	DEFB 0F0h
	DEFB 78h
	DEFB 78h
	DEFB 01h
	DEFB 1Fh
	DEFB 3Eh
	DEFB 0Fh
	DEFB 01h
	DEFB 0E3h
	DEFB 0E1h
	DEFB 0E1h
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0BDh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0F9h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0FCh
	DEFB 0E7h
	DEFB 0D7h
	DEFB 0FFh
	DEFB 0EFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F7h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0BBh
	DEFB 0FCh
	DEFB 0FBh
	DEFB 0D7h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FBh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FBh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 83h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 1Eh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 3Fh
	DEFB 0C6h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 01h
	DEFB 0FEh
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 7Fh
	DEFB 0B0h
	DEFB 16h
	DEFB 43h
	DEFB 99h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0F3h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 3Ch
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 0Fh
	DEFB 7Eh
	DEFB 07h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 7Eh
	DEFB 00h
	DEFB 03h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 7Fh
	DEFB 0F8h
	DEFB 1Fh
	DEFB 87h
	DEFB 0C3h
	DEFB 0C7h
	DEFB 0BEh
	DEFB 1Fh
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 0E0h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 0F0h
	DEFB 78h
	DEFB 0F0h
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 70h
	DEFB 0F0h
	DEFB 78h
	DEFB 1Eh
	DEFB 7Ch
	DEFB 0Fh
	DEFB 01h
	DEFB 0E3h
	DEFB 0C1h
	DEFB 0E3h
	DEFB 0E1h
	DEFB 0E3h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 3Dh
	DEFB 3Fh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F9h
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0DFh
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 0F7h
	DEFB 0E4h
	DEFB 0DFh
	DEFB 0EFh
	DEFB 0FBh
	DEFB 4Fh
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0F7h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0F0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0BDh
	DEFB 0FEh
	DEFB 2Bh
	DEFB 0D7h
	DEFB 0DFh
	DEFB 7Fh
	DEFB 0E6h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FBh
	DEFB 0FEh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FDh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 41h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0EFh
	DEFB 0EFh
	DEFB 00h
	DEFB 0FFh
	DEFB 7Fh
	DEFB 3Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 07h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 3Ch
	DEFB 70h
	DEFB 3Ch
	DEFB 03h
	DEFB 00h
	DEFB 70h
	DEFB 18h
	DEFB 4Bh
	DEFB 0F1h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 3Ch
	DEFB 07h
	DEFB 9Ch
	DEFB 00h
	DEFB 0Fh
	DEFB 0FEh
	DEFB 0Fh
	DEFB 3Eh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 07h
	DEFB 9Ch
	DEFB 1Eh
	DEFB 7Ch
	DEFB 3Fh
	DEFB 3Ch
	DEFB 1Eh
	DEFB 03h
	DEFB 0C7h
	DEFB 87h
	DEFB 0FEh
	DEFB 3Ch
	DEFB 0F8h
	DEFB 3Ch
	DEFB 78h
	DEFB 3Ch
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 0E0h
	DEFB 3Ch
	DEFB 18h
	DEFB 00h
	DEFB 78h
	DEFB 0F0h
	DEFB 79h
	DEFB 0F0h
	DEFB 78h
	DEFB 0F0h
	DEFB 00h
	DEFB 3Ch
	DEFB 30h
	DEFB 0F3h
	DEFB 0E0h
	DEFB 0F1h
	DEFB 0F0h
	DEFB 79h
	DEFB 9Eh
	DEFB 0FCh
	DEFB 1Eh
	DEFB 01h
	DEFB 0E7h
	DEFB 0C1h
	DEFB 0E3h
	DEFB 0E1h
	DEFB 0E3h
	DEFB 0C3h
	DEFB 0C3h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 73h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F9h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 71h
	DEFB 0FFh
	DEFB 0DFh
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0ECh
	DEFB 0DFh
	DEFB 0EFh
	DEFB 0FEh
	DEFB 4Fh
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0F7h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0F0h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 2Bh
	DEFB 0DFh
	DEFB 0BFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F9h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 07h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 60h
	DEFB 70h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 41h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 78h
	DEFB 0Fh
	DEFB 1Ch
	DEFB 00h
	DEFB 0Fh
	DEFB 0DEh
	DEFB 1Eh
	DEFB 3Eh
	DEFB 0Fh
	DEFB 0DEh
	DEFB 00h
	DEFB 0Fh
	DEFB 1Ch
	DEFB 3Ch
	DEFB 7Ch
	DEFB 3Eh
	DEFB 3Ch
	DEFB 1Ch
	DEFB 03h
	DEFB 0C7h
	DEFB 87h
	DEFB 0FEh
	DEFB 78h
	DEFB 0F8h
	DEFB 38h
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 0C0h
	DEFB 3Ch
	DEFB 38h
	DEFB 00h
	DEFB 0F0h
	DEFB 0F6h
	DEFB 7Bh
	DEFB 0F0h
	DEFB 0F0h
	DEFB 00h
	DEFB 0F6h
	DEFB 00h
	DEFB 3Ch
	DEFB 70h
	DEFB 0F7h
	DEFB 0E0h
	DEFB 0F3h
	DEFB 0E0h
	DEFB 7Bh
	DEFB 9Fh
	DEFB 0DDh
	DEFB 9Eh
	DEFB 01h
	DEFB 0EFh
	DEFB 0C1h
	DEFB 0E7h
	DEFB 0EDh
	DEFB 0E7h
	DEFB 83h
	DEFB 0E3h
	DEFB 0E3h
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 68h
	DEFB 68h
	DEFB 2Dh
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 48h
	DEFB 48h
	DEFB 00h
	DEFB 68h
	DEFB 08h
	DEFB 48h
	DEFB 68h
	DEFB 68h
	DEFB 16h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 08h
	DEFB 48h
	DEFB 38h
	DEFB 08h
	DEFB 48h
	DEFB 38h
	DEFB 68h
	DEFB 68h
	DEFB 13h
	DEFB 38h
	DEFB 38h
	DEFB 03h
	DEFB 78h
	DEFB 79h
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 48h
	DEFB 38h
	DEFB 68h
	DEFB 68h
	DEFB 12h
	DEFB 38h
	DEFB 38h
	DEFB 04h
	DEFB 78h
	DEFB 78h
	DEFB 03h
	DEFB 38h
	DEFB 68h
	DEFB 68h
	DEFB 11h
	DEFB 38h
	DEFB 38h
	DEFB 05h
	DEFB 78h
	DEFB 78h
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 68h
	DEFB 68h
	DEFB 0Fh
	DEFB 38h
	DEFB 38h
	DEFB 07h
	DEFB 78h
	DEFB 78h
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 02h
	DEFB 68h
	DEFB 68h
	DEFB 0Ch
	DEFB 38h
	DEFB 38h
	DEFB 06h
	DEFB 30h
	DEFB 30h
	DEFB 05h
	DEFB 38h
	DEFB 38h
	DEFB 04h
	DEFB 68h
	DEFB 68h
	DEFB 07h
	DEFB 38h
	DEFB 38h
	DEFB 05h
	DEFB 10h
	DEFB 30h
	DEFB 78h
	DEFB 78h
	DEFB 01h
	DEFB 30h
	DEFB 30h
	DEFB 04h
	DEFB 38h
	DEFB 38h
	DEFB 04h
	DEFB 68h
	DEFB 68h
	DEFB 04h
	DEFB 38h
	DEFB 38h
	DEFB 07h
	DEFB 70h
	DEFB 72h
	DEFB 78h
	DEFB 70h
	DEFB 50h
	DEFB 30h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 06h
	DEFB 68h
	DEFB 68h
	DEFB 06h
	DEFB 38h
	DEFB 38h
	DEFB 03h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 38h
	DEFB 70h
	DEFB 7Eh
	DEFB 7Eh
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 06h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 68h
	DEFB 68h
	DEFB 09h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 38h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 7Eh
	DEFB 70h
	DEFB 70h
	DEFB 06h
	DEFB 38h
	DEFB 68h
	DEFB 68h
	DEFB 0Eh
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 38h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 50h
	DEFB 10h
	DEFB 10h
	DEFB 02h
	DEFB 70h
	DEFB 68h
	DEFB 68h
	DEFB 11h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 38h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 78h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 02h
	DEFB 68h
	DEFB 68h
	DEFB 10h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 10h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 30h
	DEFB 78h
	DEFB 78h
	DEFB 03h
	DEFB 30h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 68h
	DEFB 68h
	DEFB 10h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 30h
	DEFB 30h
	DEFB 06h
	DEFB 38h
	DEFB 10h
	DEFB 68h
	DEFB 68h
	DEFB 0Fh
	DEFB 10h
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 10h
	DEFB 10h
	DEFB 00h
	DEFB 30h
	DEFB 30h
	DEFB 05h
	DEFB 10h
	DEFB 10h
	DEFB 00h
	DEFB 50h
	DEFB 68h
	DEFB 68h
	DEFB 0Dh
	DEFB 38h
	DEFB 10h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 10h
	DEFB 10h
	DEFB 04h
	DEFB 50h
	DEFB 50h
	DEFB 03h
	DEFB 10h
	DEFB 50h
	DEFB 68h
	DEFB 68h
	DEFB 0Eh
	DEFB 50h
	DEFB 50h
	DEFB 09h
	DEFB 10h
	DEFB 10h
	DEFB 02h
	DEFB 68h
	DEFB 68h
	DEFB 10h
	DEFB 10h
	DEFB 10h
	DEFB 00h
	DEFB 50h
	DEFB 10h
	DEFB 10h
	DEFB 06h
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 68h
	DEFB 68h
	DEFB 05h
	DEFB 6Ah
	DEFB 6Ah
	DEFB 01h
	DEFB 68h
	DEFB 68h
	DEFB 00h
	DEFB 6Ah
	DEFB 6Ah
	DEFB 00h
	DEFB 68h
	DEFB 68h
	DEFB 11h
	DEFB 6Ah
	DEFB 6Ah
	DEFB 00h
	DEFB 68h
	DEFB 68h
	DEFB 02h
	DEFB 6Ah
	DEFB 6Ah
	DEFB 02h
	DEFB 68h
	DEFB 6Ah
	DEFB 6Ah
	DEFB 17h
	DEFB 68h
	DEFB 68h
	DEFB 00h
	DEFB 6Ah
	DEFB 6Ah
	DEFB 02h
	DEFB 68h
	DEFB 6Ah
	DEFB 6Ah
	DEFB 39h
__LABEL482:
	DEFW 0000h
	DEFB 01h
_imgArena:
	DEFW __LABEL483
_imgArena.__DATA__.__PTR__:
	DEFW _imgArena.__DATA__
_imgArena.__DATA__:
	DEFB 0FFh
	DEFB 0FFh
	DEFB 48h
	DEFB 0FCh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0F8h
	DEFB 07h
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 07h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E5h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 0F7h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 15h
	DEFB 0FEh
	DEFB 01h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0C4h
	DEFB 7Fh
	DEFB 0FDh
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 33h
	DEFB 0FEh
	DEFB 60h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 57h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 07h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 83h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 15h
	DEFB 0FEh
	DEFB 01h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 80h
	DEFB 7Fh
	DEFB 0FCh
	DEFB 47h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FCh
	DEFB 31h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 57h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0A0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 07h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 9Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 18h
	DEFB 0FCh
	DEFB 03h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0F3h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 10h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 80h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 2Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 07h
	DEFB 0F8h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 57h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FCh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 07h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 9Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 18h
	DEFB 0FCh
	DEFB 03h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0F1h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 3Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 01h
	DEFB 80h
	DEFB 01h
	DEFB 0F0h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 3Ah
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0F9h
	DEFB 0EFh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 67h
	DEFB 0EBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 18h
	DEFB 0FCh
	DEFB 03h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0FCh
	DEFB 5Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0FCh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 78h
	DEFB 00h
	DEFB 0Eh
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 10h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 10h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 38h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 07h
	DEFB 0FCh
	DEFB 07h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 7Fh
	DEFB 0E8h
	DEFB 1Fh
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 18h
	DEFB 0FCh
	DEFB 03h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0E7h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0E0h
	DEFB 04h
	DEFB 03h
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FEh
	DEFB 59h
	DEFB 20h
	DEFB 80h
	DEFB 00h
	DEFB 0Dh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 37h
	DEFB 0FEh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 19h
	DEFB 0F8h
	DEFB 07h
	DEFB 0FEh
	DEFB 41h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 07h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 07h
	DEFB 0E7h
	DEFB 9Fh
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 15h
	DEFB 0FCh
	DEFB 01h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0E1h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 04h
	DEFB 01h
	DEFB 91h
	DEFB 0FFh
	DEFB 98h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FEh
	DEFB 0CFh
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 37h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 19h
	DEFB 0F8h
	DEFB 07h
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 07h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 15h
	DEFB 0FEh
	DEFB 01h
	DEFB 0E4h
	DEFB 1Fh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 06h
	DEFB 00h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 0C7h
	DEFB 08h
	DEFB 18h
	DEFB 1Eh
	DEFB 0AFh
	DEFB 0C0h
	DEFB 60h
	DEFB 00h
	DEFB 07h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 01h
	DEFB 0E1h
	DEFB 0C0h
	DEFB 20h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Ch
	DEFB 60h
	DEFB 00h
	DEFB 01h
	DEFB 0EAh
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 01h
	DEFB 0FBh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 18h
	DEFB 0Ch
	DEFB 00h
	DEFB 38h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 81h
	DEFB 80h
	DEFB 00h
	DEFB 0Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 7Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 80h
	DEFB 60h
	DEFB 03h
	DEFB 7Fh
	DEFB 0C3h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 01h
	DEFB 8Ch
	DEFB 40h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 03h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 55h
	DEFB 0Ch
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FDh
	DEFB 0F8h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 20h
	DEFB 00h
	DEFB 03h
	DEFB 0FDh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 03h
	DEFB 0Fh
	DEFB 00h
	DEFB 0Ch
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Fh
	DEFB 01h
	DEFB 0C5h
	DEFB 60h
	DEFB 38h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 20h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 01h
	DEFB 0E0h
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 00h
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 10h
	DEFB 02h
	DEFB 00h
	DEFB 0C0h
	DEFB 0FDh
	DEFB 0F0h
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0C0h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 88h
	DEFB 00h
	DEFB 60h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 90h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0CCh
	DEFB 60h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 7Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 15h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 7Ch
	DEFB 00h
	DEFB 0D0h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 18h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FAh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0F0h
	DEFB 20h
	DEFB 00h
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 06h
	DEFB 7Ch
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 1Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 1Fh
	DEFB 01h
	DEFB 80h
	DEFB 38h
	DEFB 18h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 3Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 01h
	DEFB 0E0h
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 08h
	DEFB 01h
	DEFB 8Eh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 80h
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 60h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 3Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 03h
	DEFB 0FFh
	DEFB 00h
	DEFB 03h
	DEFB 0F8h
	DEFB 06h
	DEFB 00h
	DEFB 30h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0E4h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 64h
	DEFB 22h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 54h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0C0h
	DEFB 1Fh
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 5Fh
	DEFB 80h
	DEFB 00h
	DEFB 0E0h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Fh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 07h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 06h
	DEFB 00h
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 7Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 1Bh
	DEFB 0E0h
	DEFB 00h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 07h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Eh
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 1Fh
	DEFB 81h
	DEFB 1Fh
	DEFB 03h
	DEFB 88h
	DEFB 1Ch
	DEFB 0Eh
	DEFB 00h
	DEFB 0F9h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 7Fh
	DEFB 0FEh
	DEFB 08h
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0C0h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 04h
	DEFB 00h
	DEFB 0F0h
	DEFB 7Fh
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 30h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 3Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 07h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 0Eh
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0F1h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 24h
	DEFB 38h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0F4h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 01h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0C0h
	DEFB 00h
	DEFB 0E0h
	DEFB 0Ch
	DEFB 00h
	DEFB 03h
	DEFB 0F3h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 7Fh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 08h
	DEFB 80h
	DEFB 00h
	DEFB 0E4h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 03h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 0Eh
	DEFB 38h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 85h
	DEFB 1Fh
	DEFB 03h
	DEFB 00h
	DEFB 06h
	DEFB 03h
	DEFB 80h
	DEFB 1Dh
	DEFB 0FFh
	DEFB 0FBh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 0Fh
	DEFB 0FEh
	DEFB 20h
	DEFB 04h
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 40h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 7Ch
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 06h
	DEFB 00h
	DEFB 0AFh
	DEFB 0F9h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 0F8h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 38h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 80h
	DEFB 03h
	DEFB 86h
	DEFB 00h
	DEFB 7Fh
	DEFB 0D4h
	DEFB 0FAh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 24h
	DEFB 1Ch
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 02h
	DEFB 00h
	DEFB 0E8h
	DEFB 80h
	DEFB 00h
	DEFB 56h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 30h
	DEFB 00h
	DEFB 1Eh
	DEFB 38h
	DEFB 00h
	DEFB 3Dh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 06h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 30h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 70h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 80h
	DEFB 0Fh
	DEFB 03h
	DEFB 00h
	DEFB 03h
	DEFB 81h
	DEFB 0C0h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 30h
	DEFB 07h
	DEFB 0FFh
	DEFB 0F9h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 01h
	DEFB 00h
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Ch
	DEFB 18h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 60h
	DEFB 00h
	DEFB 78h
	DEFB 1Fh
	DEFB 79h
	DEFB 0FCh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 20h
	DEFB 34h
	DEFB 1Ch
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 80h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 0FCh
	DEFB 0C0h
	DEFB 00h
	DEFB 36h
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0Ch
	DEFB 00h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 0CFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 81h
	DEFB 7Fh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 18h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 7Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0E1h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 80h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 0BEh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 01h
	DEFB 0C0h
	DEFB 0Fh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0E0h
	DEFB 78h
	DEFB 13h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 07h
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 8Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 80h
	DEFB 18h
	DEFB 00h
	DEFB 0FDh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 08h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 38h
	DEFB 00h
	DEFB 07h
	DEFB 0D1h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 10h
	DEFB 00h
	DEFB 02h
	DEFB 14h
	DEFB 1Ch
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 60h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 80h
	DEFB 01h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0F0h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 20h
	DEFB 70h
	DEFB 0C0h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0F0h
	DEFB 00h
	DEFB 03h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 40h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 1Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 4Fh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 98h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 01h
	DEFB 0CDh
	DEFB 0Fh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 38h
	DEFB 1Fh
	DEFB 73h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Fh
	DEFB 0F7h
	DEFB 0F0h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 03h
	DEFB 3Fh
	DEFB 83h
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 00h
	DEFB 0FCh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 08h
	DEFB 0C0h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 0Ch
	DEFB 00h
	DEFB 0F2h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 94h
	DEFB 5Ch
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 04h
	DEFB 0A0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0C0h
	DEFB 02h
	DEFB 18h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0A0h
	DEFB 7Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0C3h
	DEFB 0C0h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 20h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 06h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 30h
	DEFB 0F0h
	DEFB 00h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 67h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 4Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 08h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 18h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Ch
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 33h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 26h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 80h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 01h
	DEFB 0C0h
	DEFB 0Fh
	DEFB 87h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 04h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 26h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 11h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 4Ch
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 0C0h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 02h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 80h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 3Eh
	DEFB 1Eh
	DEFB 1Eh
	DEFB 00h
	DEFB 1Fh
	DEFB 0Ch
	DEFB 0FFh
	DEFB 0F8h
	DEFB 08h
	DEFB 30h
	DEFB 0F0h
	DEFB 0E1h
	DEFB 0F0h
	DEFB 0C3h
	DEFB 0C0h
	DEFB 0FCh
	DEFB 3Fh
	DEFB 07h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0FFh
	DEFB 87h
	DEFB 0F8h
	DEFB 1Eh
	DEFB 04h
	DEFB 0Ch
	DEFB 03h
	DEFB 0FFh
	DEFB 0C3h
	DEFB 0C7h
	DEFB 81h
	DEFB 0C0h
	DEFB 0C1h
	DEFB 0E0h
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0F8h
	DEFB 0Fh
	DEFB 00h
	DEFB 0FCh
	DEFB 1Ch
	DEFB 1Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 08h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0Ch
	DEFB 0C0h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 11h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 13h
	DEFB 80h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0C0h
	DEFB 00h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 18h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 04h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 02h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 21h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 48h
	DEFB 00h
	DEFB 00h
	DEFB 15h
	DEFB 03h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 02h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 0Ch
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 00h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 7Eh
	DEFB 3Eh
	DEFB 1Eh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 18h
	DEFB 21h
	DEFB 0F0h
	DEFB 0C1h
	DEFB 0E1h
	DEFB 0C3h
	DEFB 0C1h
	DEFB 0FCh
	DEFB 3Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 0FCh
	DEFB 3Eh
	DEFB 0Ch
	DEFB 1Eh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0C3h
	DEFB 0C7h
	DEFB 0C3h
	DEFB 0C1h
	DEFB 0C3h
	DEFB 0F0h
	DEFB 1Fh
	DEFB 1Fh
	DEFB 00h
	DEFB 0FCh
	DEFB 1Fh
	DEFB 83h
	DEFB 0FCh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 02h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0D0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 08h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 08h
	DEFB 0C0h
	DEFB 00h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0E0h
	DEFB 00h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 07h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 10h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 04h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 02h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 43h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 90h
	DEFB 00h
	DEFB 00h
	DEFB 15h
	DEFB 0Eh
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 02h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 18h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 7Ch
	DEFB 3Eh
	DEFB 1Ch
	DEFB 3Fh
	DEFB 07h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 30h
	DEFB 61h
	DEFB 0E1h
	DEFB 0C3h
	DEFB 0E1h
	DEFB 87h
	DEFB 0C3h
	DEFB 0FCh
	DEFB 7Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 01h
	DEFB 20h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0D0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 08h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 06h
	DEFB 60h
	DEFB 00h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 61h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 04h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 22h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 01h
	DEFB 87h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 90h
	DEFB 00h
	DEFB 00h
	DEFB 15h
	DEFB 18h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 02h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 60h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 00h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0FCh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 3Fh
	DEFB 83h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 70h
	DEFB 0C3h
	DEFB 0E1h
	DEFB 83h
	DEFB 0C2h
	DEFB 0Fh
	DEFB 83h
	DEFB 0F8h
	DEFB 7Eh
	DEFB 1Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 90h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 01h
	DEFB 86h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 22h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 07h
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 90h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 0Fh
	DEFB 0E0h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 01h
	DEFB 0C0h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 0F0h
	DEFB 8Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 70h
	DEFB 0E1h
	DEFB 0F0h
	DEFB 0F8h
	DEFB 7Fh
	DEFB 07h
	DEFB 0C3h
	DEFB 0Ch
	DEFB 01h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0FCh
	DEFB 7Ch
	DEFB 38h
	DEFB 3Fh
	DEFB 83h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0E0h
	DEFB 0C3h
	DEFB 0C1h
	DEFB 83h
	DEFB 0C0h
	DEFB 3Fh
	DEFB 87h
	DEFB 0F8h
	DEFB 7Eh
	DEFB 1Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 12h
	DEFB 20h
	DEFB 06h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 90h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 04h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 98h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0DEh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0F9h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 1Eh
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 08h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 26h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 0Ch
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 90h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 06h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 0C0h
	DEFB 07h
	DEFB 80h
	DEFB 7Fh
	DEFB 0F8h
	DEFB 20h
	DEFB 40h
	DEFB 0F0h
	DEFB 78h
	DEFB 7Ch
	DEFB 03h
	DEFB 0C2h
	DEFB 0Eh
	DEFB 07h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 0F1h
	DEFB 0F8h
	DEFB 7Ch
	DEFB 38h
	DEFB 7Fh
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0E1h
	DEFB 0E1h
	DEFB 00h
	DEFB 87h
	DEFB 0C3h
	DEFB 07h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 87h
	DEFB 0F8h
	DEFB 7Eh
	DEFB 1Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0E4h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 04h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0CCh
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 2Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 03h
	DEFB 0FFh
	DEFB 0E3h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 08h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 44h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 30h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 01h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 38h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 07h
	DEFB 86h
	DEFB 0Fh
	DEFB 0Ch
	DEFB 7Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F8h
	DEFB 70h
	DEFB 0F8h
	DEFB 63h
	DEFB 0C0h
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0C3h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 0E1h
	DEFB 0F8h
	DEFB 7Ch
	DEFB 30h
	DEFB 7Ch
	DEFB 61h
	DEFB 0FFh
	DEFB 0E1h
	DEFB 0C3h
	DEFB 87h
	DEFB 0C2h
	DEFB 07h
	DEFB 0C3h
	DEFB 0E7h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 66h
	DEFB 1Ch
	DEFB 3Ch
	DEFB 3Ch
	DEFB 01h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 04h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 64h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Bh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FCh
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 08h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 44h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 40h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 01h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 60h
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0Eh
	DEFB 0Fh
	DEFB 1Ch
	DEFB 7Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 10h
	DEFB 0F8h
	DEFB 70h
	DEFB 0F0h
	DEFB 0E3h
	DEFB 0C0h
	DEFB 0Eh
	DEFB 3Fh
	DEFB 87h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0FFh
	DEFB 0C3h
	DEFB 0F8h
	DEFB 1Ch
	DEFB 20h
	DEFB 78h
	DEFB 63h
	DEFB 0FFh
	DEFB 0C3h
	DEFB 0C3h
	DEFB 00h
	DEFB 81h
	DEFB 0C0h
	DEFB 44h
	DEFB 0C3h
	DEFB 0C7h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 46h
	DEFB 18h
	DEFB 7Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 16h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 38h
	DEFB 38h
	DEFB 28h
	DEFB 58h
	DEFB 58h
	DEFB 00h
	DEFB 38h
	DEFB 58h
	DEFB 58h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 19h
	DEFB 58h
	DEFB 58h
	DEFB 05h
	DEFB 38h
	DEFB 38h
	DEFB 17h
	DEFB 58h
	DEFB 58h
	DEFB 02h
	DEFB 38h
	DEFB 58h
	DEFB 58h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 17h
	DEFB 58h
	DEFB 58h
	DEFB 07h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 78h
	DEFB 38h
	DEFB 38h
	DEFB 03h
	DEFB 58h
	DEFB 58h
	DEFB 07h
	DEFB 38h
	DEFB 38h
	DEFB 12h
	DEFB 58h
	DEFB 58h
	DEFB 00h
	DEFB 38h
	DEFB 58h
	DEFB 58h
	DEFB 06h
	DEFB 38h
	DEFB 38h
	DEFB 13h
	DEFB 10h
	DEFB 58h
	DEFB 58h
	DEFB 07h
	DEFB 38h
	DEFB 38h
	DEFB 0Dh
	DEFB 70h
	DEFB 70h
	DEFB 04h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 58h
	DEFB 5Eh
	DEFB 70h
	DEFB 58h
	DEFB 58h
	DEFB 03h
	DEFB 70h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 03h
	DEFB 72h
	DEFB 72h
	DEFB 01h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 05h
	DEFB 72h
	DEFB 72h
	DEFB 01h
	DEFB 76h
	DEFB 5Eh
	DEFB 5Eh
	DEFB 01h
	DEFB 58h
	DEFB 58h
	DEFB 03h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 04h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 06h
	DEFB 72h
	DEFB 72h
	DEFB 04h
	DEFB 70h
	DEFB 5Eh
	DEFB 58h
	DEFB 58h
	DEFB 04h
	DEFB 5Eh
	DEFB 70h
	DEFB 70h
	DEFB 10h
	DEFB 72h
	DEFB 72h
	DEFB 05h
	DEFB 5Eh
	DEFB 58h
	DEFB 58h
	DEFB 03h
	DEFB 5Eh
	DEFB 72h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 0Ch
	DEFB 72h
	DEFB 72h
	DEFB 01h
	DEFB 76h
	DEFB 76h
	DEFB 02h
	DEFB 5Eh
	DEFB 58h
	DEFB 58h
	DEFB 02h
	DEFB 5Eh
	DEFB 72h
	DEFB 72h
	DEFB 01h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 07h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 70h
	DEFB 72h
	DEFB 72h
	DEFB 08h
	DEFB 5Eh
	DEFB 58h
	DEFB 58h
	DEFB 01h
	DEFB 5Eh
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 0Bh
	DEFB 72h
	DEFB 72h
	DEFB 02h
	DEFB 76h
	DEFB 76h
	DEFB 03h
	DEFB 5Eh
	DEFB 58h
	DEFB 58h
	DEFB 01h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 0Eh
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 72h
	DEFB 72h
	DEFB 06h
	DEFB 5Eh
	DEFB 58h
	DEFB 58h
	DEFB 01h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 05h
	DEFB 72h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 07h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 72h
	DEFB 5Eh
	DEFB 5Eh
	DEFB 02h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 03h
	DEFB 72h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 72h
	DEFB 72h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 72h
	DEFB 02h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 70h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 07h
	DEFB 72h
	DEFB 72h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 12h
	DEFB 72h
	DEFB 72h
	DEFB 04h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 72h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 03h
	DEFB 46h
	DEFB 46h
	DEFB 16h
	DEFB 72h
	DEFB 72h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 72h
	DEFB 46h
	DEFB 46h
	DEFB 16h
	DEFB 72h
	DEFB 72h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 03h
	DEFB 46h
	DEFB 46h
	DEFB 16h
	DEFB 72h
	DEFB 70h
	DEFB 70h
	DEFB 05h
	DEFB 46h
	DEFB 46h
	DEFB 16h
	DEFB 70h
	DEFB 70h
	DEFB 02h
__LABEL483:
	DEFW 0000h
	DEFB 01h
_imgLanzas:
	DEFW __LABEL484
_imgLanzas.__DATA__.__PTR__:
	DEFW _imgLanzas.__DATA__
_imgLanzas.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 40h
	DEFB 63h
	DEFB 0Fh
	DEFB 0C3h
	DEFB 00h
	DEFB 00h
	DEFB 17h
	DEFB 36h
	DEFB 00h
	DEFB 0Ch
	DEFB 00h
	DEFB 80h
	DEFB 0Fh
	DEFB 0DEh
	DEFB 07h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 08h
	DEFB 00h
	DEFB 7Eh
	DEFB 0C7h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 30h
	DEFB 0Ch
	DEFB 1Ch
	DEFB 61h
	DEFB 80h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0C0h
	DEFB 01h
	DEFB 80h
	DEFB 0C0h
	DEFB 6Fh
	DEFB 0DFh
	DEFB 99h
	DEFB 0FFh
	DEFB 5Ch
	DEFB 0BFh
	DEFB 0F0h
	DEFB 8Dh
	DEFB 0BFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 20h
	DEFB 51h
	DEFB 80h
	DEFB 0B8h
	DEFB 79h
	DEFB 0FFh
	DEFB 0BDh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0DFh
	DEFB 0FBh
	DEFB 87h
	DEFB 0FEh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 03h
	DEFB 00h
	DEFB 01h
	DEFB 0C6h
	DEFB 39h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 3Fh
	DEFB 87h
	DEFB 7Ch
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0C7h
	DEFB 8Fh
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0B3h
	DEFB 87h
	DEFB 9Eh
	DEFB 00h
	DEFB 07h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 46h
	DEFB 7Ah
	DEFB 0Fh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 16h
	DEFB 03h
	DEFB 1Eh
	DEFB 00h
	DEFB 3Ch
	DEFB 0C6h
	DEFB 01h
	DEFB 8Fh
	DEFB 0D8h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 17h
	DEFB 03h
	DEFB 3Fh
	DEFB 0E7h
	DEFB 9Bh
	DEFB 0FFh
	DEFB 00h
	DEFB 0CCh
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 05h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0DFh
	DEFB 18h
	DEFB 0F9h
	DEFB 0D0h
	DEFB 0FFh
	DEFB 0E1h
	DEFB 8Fh
	DEFB 0BFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 30h
	DEFB 0C1h
	DEFB 0C0h
	DEFB 38h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 9Dh
	DEFB 0FFh
	DEFB 0E3h
	DEFB 85h
	DEFB 0FEh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0BEh
	DEFB 78h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FEh
	DEFB 1Eh
	DEFB 5Fh
	DEFB 8Eh
	DEFB 3Ch
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 71h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F7h
	DEFB 87h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0F1h
	DEFB 0C7h
	DEFB 0DEh
	DEFB 00h
	DEFB 1Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 18h
	DEFB 06h
	DEFB 3Ah
	DEFB 7Fh
	DEFB 83h
	DEFB 00h
	DEFB 00h
	DEFB 17h
	DEFB 18h
	DEFB 00h
	DEFB 30h
	DEFB 0C7h
	DEFB 81h
	DEFB 8Fh
	DEFB 0D0h
	DEFB 0C7h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 30h
	DEFB 00h
	DEFB 03h
	DEFB 0B7h
	DEFB 0BEh
	DEFB 5Bh
	DEFB 0DFh
	DEFB 98h
	DEFB 0DCh
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 0E0h
	DEFB 00h
	DEFB 30h
	DEFB 0F8h
	DEFB 33h
	DEFB 9Fh
	DEFB 1Bh
	DEFB 0FDh
	DEFB 0DCh
	DEFB 3Fh
	DEFB 0E7h
	DEFB 83h
	DEFB 47h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 0F8h
	DEFB 0C1h
	DEFB 0CCh
	DEFB 3Bh
	DEFB 0EFh
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0E3h
	DEFB 0C1h
	DEFB 0FEh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 0Ah
	DEFB 7Eh
	DEFB 0FEh
	DEFB 3Ch
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FEh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 8Ch
	DEFB 3Eh
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 73h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FBh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 7Fh
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F7h
	DEFB 0C3h
	DEFB 0DEh
	DEFB 00h
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0F1h
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F9h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 10h
	DEFB 0Ch
	DEFB 02h
	DEFB 37h
	DEFB 8Bh
	DEFB 00h
	DEFB 00h
	DEFB 19h
	DEFB 0C0h
	DEFB 03h
	DEFB 97h
	DEFB 0CFh
	DEFB 0D0h
	DEFB 0C6h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 38h
	DEFB 00h
	DEFB 71h
	DEFB 0B3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0DDh
	DEFB 0D8h
	DEFB 0D8h
	DEFB 00h
	DEFB 39h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 04h
	DEFB 70h
	DEFB 04h
	DEFB 11h
	DEFB 0F8h
	DEFB 3Bh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FEh
	DEFB 5Fh
	DEFB 7Fh
	DEFB 0E7h
	DEFB 87h
	DEFB 0C7h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 64h
	DEFB 00h
	DEFB 0C0h
	DEFB 18h
	DEFB 0FFh
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0E3h
	DEFB 0E1h
	DEFB 0FEh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 18h
	DEFB 3Eh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C6h
	DEFB 1Eh
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E1h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0DEh
	DEFB 00h
	DEFB 7Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0BFh
	DEFB 9Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 1Bh
	DEFB 0Ch
	DEFB 00h
	DEFB 0Fh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 19h
	DEFB 0E0h
	DEFB 61h
	DEFB 0DFh
	DEFB 0CFh
	DEFB 0C0h
	DEFB 06h
	DEFB 00h
	DEFB 03h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 07h
	DEFB 00h
	DEFB 18h
	DEFB 03h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 18h
	DEFB 18h
	DEFB 00h
	DEFB 38h
	DEFB 80h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 06h
	DEFB 70h
	DEFB 06h
	DEFB 09h
	DEFB 0FEh
	DEFB 0D9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 4Fh
	DEFB 6Eh
	DEFB 0E7h
	DEFB 8Fh
	DEFB 9Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 77h
	DEFB 09h
	DEFB 0E6h
	DEFB 5Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0E7h
	DEFB 0C1h
	DEFB 0FEh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 0Bh
	DEFB 7Eh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0D6h
	DEFB 1Eh
	DEFB 0Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E3h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0BEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0E3h
	DEFB 0FCh
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 1Eh
	DEFB 00h
	DEFB 03h
	DEFB 0Fh
	DEFB 9Fh
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 06h
	DEFB 0FEh
	DEFB 67h
	DEFB 0FFh
	DEFB 0EFh
	DEFB 80h
	DEFB 06h
	DEFB 00h
	DEFB 33h
	DEFB 0Bh
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 07h
	DEFB 86h
	DEFB 18h
	DEFB 03h
	DEFB 80h
	DEFB 0DFh
	DEFB 9Fh
	DEFB 0FBh
	DEFB 0FEh
	DEFB 18h
	DEFB 38h
	DEFB 0F8h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 0F0h
	DEFB 30h
	DEFB 08h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 90h
	DEFB 67h
	DEFB 0C6h
	DEFB 0Fh
	DEFB 9Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 01h
	DEFB 0F7h
	DEFB 0B9h
	DEFB 0E7h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FDh
	DEFB 0DFh
	DEFB 0CFh
	DEFB 0E3h
	DEFB 0FEh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 0C0h
	DEFB 00h
	DEFB 03h
	DEFB 6Eh
	DEFB 3Fh
	DEFB 0CFh
	DEFB 0CFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 3Fh
	DEFB 0DFh
	DEFB 0Fh
	DEFB 0Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FEh
	DEFB 0E1h
	DEFB 0FCh
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 1Ch
	DEFB 00h
	DEFB 0DFh
	DEFB 8Fh
	DEFB 0BFh
	DEFB 04h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 14h
	DEFB 18h
	DEFB 18h
	DEFB 00h
	DEFB 04h
	DEFB 7Fh
	DEFB 67h
	DEFB 0FFh
	DEFB 0EFh
	DEFB 80h
	DEFB 8Ch
	DEFB 00h
	DEFB 62h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 10h
	DEFB 03h
	DEFB 86h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 80h
	DEFB 0DFh
	DEFB 9Fh
	DEFB 0FBh
	DEFB 0FEh
	DEFB 18h
	DEFB 33h
	DEFB 0F0h
	DEFB 00h
	DEFB 86h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 0D7h
	DEFB 3Ch
	DEFB 00h
	DEFB 7Eh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 6Fh
	DEFB 0C6h
	DEFB 07h
	DEFB 97h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 02h
	DEFB 00h
	DEFB 01h
	DEFB 85h
	DEFB 0E1h
	DEFB 1Fh
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0BFh
	DEFB 0E3h
	DEFB 0F8h
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 0Eh
	DEFB 9Fh
	DEFB 0CFh
	DEFB 0B3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0BFh
	DEFB 0EFh
	DEFB 0Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 87h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 11h
	DEFB 70h
	DEFB 00h
	DEFB 08h
	DEFB 01h
	DEFB 0DBh
	DEFB 8Fh
	DEFB 3Eh
	DEFB 04h
	DEFB 0C1h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 13h
	DEFB 18h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 67h
	DEFB 0E5h
	DEFB 5Bh
	DEFB 0FFh
	DEFB 0B0h
	DEFB 8Ch
	DEFB 0Ch
	DEFB 61h
	DEFB 80h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 07h
	DEFB 80h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 0EDh
	DEFB 0EFh
	DEFB 0D9h
	DEFB 0FEh
	DEFB 1Ch
	DEFB 3Fh
	DEFB 0F0h
	DEFB 01h
	DEFB 87h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 30h
	DEFB 13h
	DEFB 70h
	DEFB 00h
	DEFB 0F8h
	DEFB 37h
	DEFB 0FFh
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0EAh
	DEFB 0FFh
	DEFB 99h
	DEFB 0Fh
	DEFB 0BFh
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0C7h
	DEFB 79h
	DEFB 1Fh
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0DEh
	DEFB 3Fh
	DEFB 87h
	DEFB 0F8h
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0FEh
	DEFB 67h
	DEFB 0Fh
	DEFB 0C7h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0BBh
	DEFB 8Fh
	DEFB 9Eh
	DEFB 00h
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0DFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FBh
	DEFB 0C0h
	DEFB 00h
	DEFB 60h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0DFh
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 80h
	DEFB 40h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F8h
	DEFB 7Eh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 02h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 3Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0E7h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 87h
	DEFB 80h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 07h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 3Eh
	DEFB 1Ch
	DEFB 07h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 1Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 0F0h
	DEFB 03h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0E0h
	DEFB 01h
	DEFB 0F3h
	DEFB 80h
	DEFB 7Ch
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 01h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 0FEh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F9h
	DEFB 0C3h
	DEFB 0F0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 70h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0EFh
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 81h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F6h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F8h
	DEFB 0FEh
	DEFB 2Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 87h
	DEFB 80h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FDh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FEh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 3Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 07h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0E1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 3Fh
	DEFB 1Ch
	DEFB 03h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 81h
	DEFB 0F0h
	DEFB 03h
	DEFB 8Fh
	DEFB 0FEh
	DEFB 0F8h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0E0h
	DEFB 00h
	DEFB 0FBh
	DEFB 80h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 03h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 0EFh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F1h
	DEFB 0E7h
	DEFB 0F8h
	DEFB 00h
	DEFB 07h
	DEFB 0F0h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0F8h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 80h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0FEh
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 83h
	DEFB 0C0h
	DEFB 01h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 70h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 07h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
	DEFB 1Fh
	DEFB 0F9h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0Eh
	DEFB 03h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 81h
	DEFB 0E0h
	DEFB 03h
	DEFB 8Fh
	DEFB 0FCh
	DEFB 0F8h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 0FBh
	DEFB 0C0h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 01h
	DEFB 0EFh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E1h
	DEFB 0C7h
	DEFB 0FCh
	DEFB 00h
	DEFB 07h
	DEFB 0F8h
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 7Eh
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0E0h
	DEFB 08h
	DEFB 0C9h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 9Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 83h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0BFh
	DEFB 81h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FEh
	DEFB 70h
	DEFB 1Eh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 07h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
	DEFB 1Fh
	DEFB 0F1h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 8Eh
	DEFB 01h
	DEFB 0E7h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 83h
	DEFB 0E0h
	DEFB 03h
	DEFB 87h
	DEFB 0FCh
	DEFB 78h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 0FDh
	DEFB 0C0h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 3Fh
	DEFB 80h
	DEFB 01h
	DEFB 0C7h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E1h
	DEFB 0E7h
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 0F8h
	DEFB 07h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 7Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F0h
	DEFB 05h
	DEFB 52h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0EFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FDh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 83h
	DEFB 0C0h
	DEFB 00h
	DEFB 30h
	DEFB 03h
	DEFB 0FFh
	DEFB 80h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 7Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 78h
	DEFB 1Fh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
	DEFB 3Fh
	DEFB 0E1h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0CFh
	DEFB 01h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 7Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0C3h
	DEFB 0C0h
	DEFB 03h
	DEFB 9Fh
	DEFB 0F8h
	DEFB 78h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0DFh
	DEFB 0C0h
	DEFB 00h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 7Fh
	DEFB 00h
	DEFB 01h
	DEFB 0CFh
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C1h
	DEFB 0E7h
	DEFB 0BFh
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 3Fh
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0F0h
	DEFB 03h
	DEFB 52h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0A7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0CFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FBh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 38h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 38h
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 0Eh
	DEFB 00h
	DEFB 3Dh
	DEFB 81h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 07h
	DEFB 0C7h
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0C7h
	DEFB 80h
	DEFB 07h
	DEFB 3Fh
	DEFB 0F8h
	DEFB 7Ch
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0EFh
	DEFB 0C0h
	DEFB 00h
	DEFB 3Eh
	DEFB 0E0h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C1h
	DEFB 0E7h
	DEFB 9Fh
	DEFB 80h
	DEFB 01h
	DEFB 0FCh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 3Fh
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 1Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 01h
	DEFB 24h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0BFh
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 81h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 8Fh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F3h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 3Ch
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FCh
	DEFB 38h
	DEFB 0Fh
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 78h
	DEFB 01h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 03h
	DEFB 0E7h
	DEFB 00h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0CFh
	DEFB 80h
	DEFB 07h
	DEFB 7Fh
	DEFB 10h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C7h
	DEFB 0C0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 03h
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 81h
	DEFB 0EFh
	DEFB 0Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 0FCh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0EFh
	DEFB 0EFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F0h
	DEFB 08h
	DEFB 81h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 3Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0C3h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 87h
	DEFB 81h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E6h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 3Eh
	DEFB 0FFh
	DEFB 0FBh
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 7Ch
	DEFB 1Ch
	DEFB 07h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 0F8h
	DEFB 01h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 03h
	DEFB 0F7h
	DEFB 80h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0EFh
	DEFB 00h
	DEFB 07h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FDh
	DEFB 0C3h
	DEFB 0E0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 07h
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 01h
	DEFB 0EFh
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 7Ch
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 01h
	DEFB 0EFh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 7Eh
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 3Eh
	DEFB 7Fh
	DEFB 00h
	DEFB 38h
	DEFB 00h
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 07h
	DEFB 0E0h
	DEFB 03h
	DEFB 0F0h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 07h
	DEFB 0FCh
	DEFB 03h
	DEFB 0C0h
	DEFB 70h
	DEFB 00h
	DEFB 3Ch
	DEFB 07h
	DEFB 0FDh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 81h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 03h
	DEFB 79h
	DEFB 0C0h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Fh
	DEFB 8Fh
	DEFB 7Ch
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 1Dh
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 01h
	DEFB 0E0h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0Fh
	DEFB 83h
	DEFB 0C3h
	DEFB 0C3h
	DEFB 00h
	DEFB 0C1h
	DEFB 0E6h
	DEFB 00h
	DEFB 0Fh
	DEFB 0EFh
	DEFB 9Eh
	DEFB 1Eh
	DEFB 3Ch
	DEFB 1Eh
	DEFB 78h
	DEFB 7Eh
	DEFB 07h
	DEFB 81h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0C3h
	DEFB 0F7h
	DEFB 0E7h
	DEFB 0F8h
	DEFB 00h
	DEFB 78h
	DEFB 70h
	DEFB 0FCh
	DEFB 7Eh
	DEFB 7Ch
	DEFB 3Fh
	DEFB 0E3h
	DEFB 0C0h
	DEFB 0Fh
	DEFB 0E1h
	DEFB 0FEh
	DEFB 07h
	DEFB 0C7h
	DEFB 0C7h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FCh
	DEFB 3Fh
	DEFB 0DCh
	DEFB 00h
	DEFB 07h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 01h
	DEFB 0EFh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 3Eh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 3Dh
	DEFB 0FFh
	DEFB 00h
	DEFB 38h
	DEFB 00h
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 03h
	DEFB 0F0h
	DEFB 01h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 07h
	DEFB 0F8h
	DEFB 01h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 00h
	DEFB 38h
	DEFB 01h
	DEFB 0FCh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0C1h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 03h
	DEFB 79h
	DEFB 0C0h
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 80h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Fh
	DEFB 0CFh
	DEFB 7Eh
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 27h
	DEFB 01h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0Fh
	DEFB 03h
	DEFB 83h
	DEFB 0C3h
	DEFB 0C1h
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0CFh
	DEFB 0BCh
	DEFB 1Eh
	DEFB 7Ch
	DEFB 3Ch
	DEFB 78h
	DEFB 7Ch
	DEFB 07h
	DEFB 81h
	DEFB 0E1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0E0h
	DEFB 07h
	DEFB 83h
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0E0h
	DEFB 00h
	DEFB 78h
	DEFB 70h
	DEFB 78h
	DEFB 7Ch
	DEFB 78h
	DEFB 1Fh
	DEFB 0C1h
	DEFB 0C0h
	DEFB 07h
	DEFB 0C0h
	DEFB 0F8h
	DEFB 07h
	DEFB 87h
	DEFB 87h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 0FCh
	DEFB 7Fh
	DEFB 1Ch
	DEFB 00h
	DEFB 07h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 01h
	DEFB 0EFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 7Bh
	DEFB 0FFh
	DEFB 80h
	DEFB 38h
	DEFB 00h
	DEFB 1Eh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 01h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0Fh
	DEFB 0F0h
	DEFB 01h
	DEFB 0E0h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0F0h
	DEFB 3Fh
	DEFB 0E0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 03h
	DEFB 3Dh
	DEFB 0C0h
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 80h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 0E7h
	DEFB 3Fh
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 27h
	DEFB 03h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0Fh
	DEFB 07h
	DEFB 83h
	DEFB 0C7h
	DEFB 81h
	DEFB 0F0h
	DEFB 00h
	DEFB 0Fh
	DEFB 9Fh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 78h
	DEFB 3Ch
	DEFB 0F0h
	DEFB 78h
	DEFB 07h
	DEFB 01h
	DEFB 0E1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 2Fh
	DEFB 07h
	DEFB 0BCh
	DEFB 0FEh
	DEFB 1Ch
	DEFB 00h
	DEFB 07h
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F0h
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 7Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 80h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 78h
	DEFB 00h
	DEFB 1Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F8h
	DEFB 01h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 3Fh
	DEFB 0C0h
	DEFB 01h
	DEFB 0E0h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0E0h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 03h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0C0h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 0F7h
	DEFB 9Fh
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 27h
	DEFB 03h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 1Eh
	DEFB 07h
	DEFB 87h
	DEFB 87h
	DEFB 00h
	DEFB 80h
	DEFB 0F8h
	DEFB 00h
	DEFB 1Fh
	DEFB 1Eh
	DEFB 78h
	DEFB 3Ch
	DEFB 0F8h
	DEFB 7Bh
	DEFB 0E0h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 03h
	DEFB 0C3h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 2Fh
	DEFB 0Fh
	DEFB 9Fh
	DEFB 0FCh
	DEFB 1Ch
	DEFB 00h
	DEFB 07h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 7Eh
	DEFB 00h
	DEFB 0Fh
	DEFB 80h
	DEFB 7Ch
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 0FFh
	DEFB 0E7h
	DEFB 80h
	DEFB 70h
	DEFB 00h
	DEFB 1Eh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Ch
	DEFB 00h
	DEFB 0FEh
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 7Fh
	DEFB 80h
	DEFB 00h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0F0h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 01h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 03h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0C0h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 0FBh
	DEFB 9Fh
	DEFB 8Fh
	DEFB 00h
	DEFB 00h
	DEFB 27h
	DEFB 03h
	DEFB 0C1h
	DEFB 0E0h
	DEFB 1Eh
	DEFB 0E0h
	DEFB 7Eh
	DEFB 00h
	DEFB 0Fh
	DEFB 1Eh
	DEFB 3Ch
	DEFB 1Eh
	DEFB 0Fh
	DEFB 01h
	DEFB 0F0h
	DEFB 79h
	DEFB 0E7h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 1Eh
	DEFB 07h
	DEFB 07h
	DEFB 00h
	DEFB 8Fh
	DEFB 80h
	DEFB 0F8h
	DEFB 00h
	DEFB 1Eh
	DEFB 3Eh
	DEFB 78h
	DEFB 7Ch
	DEFB 0F8h
	DEFB 7Fh
	DEFB 80h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 03h
	DEFB 0C3h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 2Fh
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0F0h
	DEFB 3Ch
	DEFB 00h
	DEFB 07h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 3Fh
	DEFB 00h
	DEFB 0Fh
	DEFB 0C0h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 01h
	DEFB 0FFh
	DEFB 0C3h
	DEFB 80h
	DEFB 70h
	DEFB 00h
	DEFB 1Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Eh
	DEFB 00h
	DEFB 0FEh
	DEFB 07h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 00h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 7Ch
	DEFB 1Fh
	DEFB 0F8h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 07h
	DEFB 0FBh
	DEFB 0E0h
	DEFB 00h
	DEFB 03h
	DEFB 3Fh
	DEFB 80h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0E0h
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0CFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 0Fh
	DEFB 0C0h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 1Bh
	DEFB 03h
	DEFB 0C1h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0BFh
	DEFB 7Eh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 07h
	DEFB 0F8h
	DEFB 7Bh
	DEFB 0E3h
	DEFB 0F0h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 1Ch
	DEFB 0Fh
	DEFB 07h
	DEFB 8Fh
	DEFB 00h
	DEFB 7Ch
	DEFB 00h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 0F0h
	DEFB 79h
	DEFB 0F0h
	DEFB 78h
	DEFB 00h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 03h
	DEFB 0C7h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 2Fh
	DEFB 1Fh
	DEFB 1Fh
	DEFB 00h
	DEFB 0E0h
	DEFB 38h
	DEFB 00h
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 1Fh
	DEFB 80h
	DEFB 07h
	DEFB 0E0h
	DEFB 3Eh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 01h
	DEFB 0FFh
	DEFB 83h
	DEFB 0C0h
	DEFB 70h
	DEFB 00h
	DEFB 3Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 03h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 00h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 3Eh
	DEFB 1Fh
	DEFB 0F8h
	DEFB 7Ch
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 0Fh
	DEFB 0F7h
	DEFB 0C0h
	DEFB 00h
	DEFB 03h
	DEFB 1Fh
	DEFB 80h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0E0h
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 7Fh
	DEFB 0C7h
	DEFB 0C7h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 1Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0F3h
	DEFB 0E1h
	DEFB 0E7h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0Fh
	DEFB 1Eh
	DEFB 0Fh
	DEFB 38h
	DEFB 7Fh
	DEFB 0E3h
	DEFB 0C0h
	DEFB 79h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 3Ch
	DEFB 0Fh
	DEFB 07h
	DEFB 9Fh
	DEFB 07h
	DEFB 3Ch
	DEFB 00h
	DEFB 3Ch
	DEFB 78h
	DEFB 0F0h
	DEFB 7Bh
	DEFB 0F0h
	DEFB 78h
	DEFB 31h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 33h
	DEFB 0C7h
	DEFB 87h
	DEFB 87h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 2Ch
	DEFB 1Eh
	DEFB 3Fh
	DEFB 0C0h
	DEFB 38h
	DEFB 00h
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 0Fh
	DEFB 0C0h
	DEFB 03h
	DEFB 0E0h
	DEFB 1Eh
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 03h
	DEFB 0FEh
	DEFB 03h
	DEFB 0C0h
	DEFB 70h
	DEFB 00h
	DEFB 3Ch
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 80h
	DEFB 7Fh
	DEFB 83h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 79h
	DEFB 0C0h
	DEFB 00h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Fh
	DEFB 0Eh
	DEFB 0FCh
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 1Fh
	DEFB 0E7h
	DEFB 0C0h
	DEFB 00h
	DEFB 03h
	DEFB 1Fh
	DEFB 80h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0F0h
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 47h
	DEFB 0E7h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 01h
	DEFB 0E0h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 1Bh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0E1h
	DEFB 0E3h
	DEFB 0E1h
	DEFB 0C7h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0DEh
	DEFB 0Fh
	DEFB 1Eh
	DEFB 1Eh
	DEFB 00h
	DEFB 38h
	DEFB 7Fh
	DEFB 0E3h
	DEFB 80h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 0Bh
	DEFB 78h
	DEFB 0Fh
	DEFB 0C7h
	DEFB 0BFh
	DEFB 0Fh
	DEFB 38h
	DEFB 00h
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 0FCh
	DEFB 7Fh
	DEFB 76h
	DEFB 78h
	DEFB 71h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 73h
	DEFB 0CFh
	DEFB 07h
	DEFB 0C7h
	DEFB 0C7h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 22h
	DEFB 50h
	DEFB 50h
	DEFB 8Fh
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 36h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 07h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 11h
	DEFB 38h
	DEFB 38h
	DEFB 02h
	DEFB 50h
	DEFB 50h
	DEFB 1Bh
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 50h
	DEFB 50h
	DEFB 07h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 50h
	DEFB 50h
	DEFB 0Fh
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 50h
	DEFB 50h
	DEFB 03h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 02h
	DEFB 50h
	DEFB 50h
	DEFB 19h
	DEFB 38h
	DEFB 38h
	DEFB 08h
	DEFB 50h
	DEFB 50h
	DEFB 12h
	DEFB 38h
	DEFB 38h
	DEFB 05h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 50h
	DEFB 50h
	DEFB 0Eh
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 50h
	DEFB 50h
	DEFB 02h
	DEFB 78h
	DEFB 50h
	DEFB 50h
	DEFB 09h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 05h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 02h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 50h
	DEFB 50h
	DEFB 0FFh
	DEFB 50h
	DEFB 50h
	DEFB 47h
__LABEL484:
	DEFW 0000h
	DEFB 01h
_imgTesoro:
	DEFW __LABEL485
_imgTesoro.__DATA__.__PTR__:
	DEFW _imgTesoro.__DATA__
_imgTesoro.__DATA__:
	DEFB 0FFh
	DEFB 0FFh
	DEFB 2Eh
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 01h
	DEFB 0C3h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 0F8h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 34h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 0C0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 03h
	DEFB 83h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 34h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 0C0h
	DEFB 30h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 83h
	DEFB 01h
	DEFB 81h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 34h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 07h
	DEFB 83h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 3Bh
	DEFB 80h
	DEFB 38h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 87h
	DEFB 01h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0E0h
	DEFB 70h
	DEFB 00h
	DEFB 1Ch
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 3Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Dh
	DEFB 83h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 3Fh
	DEFB 83h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 3Bh
	DEFB 80h
	DEFB 78h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 8Eh
	DEFB 00h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 19h
	DEFB 0FCh
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 0Ch
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 3Fh
	DEFB 83h
	DEFB 0E1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 80h
	DEFB 7Ch
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 0CCh
	DEFB 00h
	DEFB 63h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 80h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0FEh
	DEFB 00h
	DEFB 0Fh
	DEFB 80h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 0F8h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 00h
	DEFB 0ECh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 0DCh
	DEFB 00h
	DEFB 67h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0FEh
	DEFB 00h
	DEFB 06h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E1h
	DEFB 0C0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ch
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 01h
	DEFB 0C6h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 0F8h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 0Eh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0FEh
	DEFB 00h
	DEFB 07h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F9h
	DEFB 0C0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FBh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 7Eh
	DEFB 00h
	DEFB 01h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F0h
	DEFB 7Fh
	DEFB 0F8h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0FFh
	DEFB 0C3h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 80h
	DEFB 20h
	DEFB 00h
	DEFB 1Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 06h
	DEFB 03h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0F8h
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 81h
	DEFB 80h
	DEFB 0Fh
	DEFB 0C0h
	DEFB 0FEh
	DEFB 07h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 0FEh
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 87h
	DEFB 0C3h
	DEFB 0FEh
	DEFB 1Fh
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 87h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 83h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0F1h
	DEFB 80h
	DEFB 00h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0Eh
	DEFB 00h
	DEFB 01h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 7Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 7Fh
	DEFB 0E1h
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 0C0h
	DEFB 20h
	DEFB 00h
	DEFB 1Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 70h
	DEFB 00h
	DEFB 0Eh
	DEFB 00h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 06h
	DEFB 03h
	DEFB 00h
	DEFB 1Fh
	DEFB 0C7h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 80h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0F0h
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0C1h
	DEFB 00h
	DEFB 07h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 07h
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 3Fh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 3Fh
	DEFB 80h
	DEFB 0FEh
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0C7h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 8Fh
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0FEh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 80h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0E1h
	DEFB 80h
	DEFB 00h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 02h
	DEFB 00h
	DEFB 03h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0E1h
	DEFB 0FEh
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 3Fh
	DEFB 0E1h
	DEFB 0F0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FEh
	DEFB 00h
	DEFB 0C3h
	DEFB 0F0h
	DEFB 00h
	DEFB 40h
	DEFB 60h
	DEFB 00h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 03h
	DEFB 8Eh
	DEFB 00h
	DEFB 1Fh
	DEFB 81h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 1Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 0Eh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0C3h
	DEFB 00h
	DEFB 07h
	DEFB 0F0h
	DEFB 7Fh
	DEFB 03h
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 1Fh
	DEFB 0E1h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 7Fh
	DEFB 80h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0E0h
	DEFB 0E0h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0C3h
	DEFB 0E1h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 8Fh
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 03h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0FEh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C3h
	DEFB 80h
	DEFB 00h
	DEFB 0C0h
	DEFB 07h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0F0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0C3h
	DEFB 0F8h
	DEFB 00h
	DEFB 3Bh
	DEFB 80h
	DEFB 00h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 03h
	DEFB 0Eh
	DEFB 00h
	DEFB 1Fh
	DEFB 0F1h
	DEFB 0E0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 81h
	DEFB 0F0h
	DEFB 00h
	DEFB 60h
	DEFB 0C0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 3Fh
	DEFB 80h
	DEFB 0Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 06h
	DEFB 07h
	DEFB 0F0h
	DEFB 7Fh
	DEFB 03h
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 7Fh
	DEFB 00h
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0E0h
	DEFB 0E0h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0E3h
	DEFB 0E1h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 9Fh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 02h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 0C0h
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FEh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 87h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 01h
	DEFB 81h
	DEFB 80h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FCh
	DEFB 07h
	DEFB 87h
	DEFB 0F8h
	DEFB 00h
	DEFB 60h
	DEFB 0C0h
	DEFB 00h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 06h
	DEFB 03h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FBh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0C0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 1Eh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0C2h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0FCh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 3Fh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0FEh
	DEFB 0Fh
	DEFB 07h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 01h
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0C1h
	DEFB 0E1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0E1h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 1Fh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 02h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Eh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FEh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Fh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FCh
	DEFB 03h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 40h
	DEFB 60h
	DEFB 00h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 01h
	DEFB 0C3h
	DEFB 80h
	DEFB 00h
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 06h
	DEFB 03h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0C0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 3Eh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0C3h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 3Fh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0Fh
	DEFB 87h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 3Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0F1h
	DEFB 0FEh
	DEFB 00h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0C1h
	DEFB 0E1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0F0h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 3Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 00h
	DEFB 7Fh
	DEFB 00h
	DEFB 0Eh
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 02h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 18h
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 70h
	DEFB 00h
	DEFB 18h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0E1h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FCh
	DEFB 03h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 80h
	DEFB 20h
	DEFB 00h
	DEFB 3Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 0Ch
	DEFB 01h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 80h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 80h
	DEFB 1Fh
	DEFB 0F0h
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 81h
	DEFB 00h
	DEFB 0Fh
	DEFB 80h
	DEFB 0FCh
	DEFB 07h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0E0h
	DEFB 7Fh
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0Fh
	DEFB 83h
	DEFB 0FCh
	DEFB 3Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F3h
	DEFB 0FCh
	DEFB 00h
	DEFB 0F8h
	DEFB 7Fh
	DEFB 0C3h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0F0h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 7Ch
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0Ch
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 00h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 10h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 0DFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FCh
	DEFB 3Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 06h
	DEFB 00h
	DEFB 60h
	DEFB 00h
	DEFB 01h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 0FFh
	DEFB 87h
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0FCh
	DEFB 03h
	DEFB 3Fh
	DEFB 0F0h
	DEFB 00h
	DEFB 80h
	DEFB 20h
	DEFB 00h
	DEFB 1Fh
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0F8h
	DEFB 00h
	DEFB 0Ch
	DEFB 01h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 80h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 80h
	DEFB 00h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0C0h
	DEFB 1Fh
	DEFB 0F8h
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 3Fh
	DEFB 0F8h
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 81h
	DEFB 80h
	DEFB 0Fh
	DEFB 80h
	DEFB 0FEh
	DEFB 07h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FCh
	DEFB 00h
	DEFB 7Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 1Fh
	DEFB 0C0h
	DEFB 7Eh
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 8Fh
	DEFB 0C3h
	DEFB 0FCh
	DEFB 1Fh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F7h
	DEFB 0FCh
	DEFB 00h
	DEFB 0F8h
	DEFB 7Fh
	DEFB 87h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0F8h
	DEFB 7Eh
	DEFB 7Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 81h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 10h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0C3h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 10h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C0h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 01h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 09h
	DEFB 0FCh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 45h
	DEFB 0F8h
	DEFB 0F1h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 07h
	DEFB 0FFh
	DEFB 0C1h
	DEFB 0F8h
	DEFB 3Ch
	DEFB 31h
	DEFB 0F8h
	DEFB 3Fh
	DEFB 07h
	DEFB 0E1h
	DEFB 0F0h
	DEFB 0E1h
	DEFB 87h
	DEFB 0E0h
	DEFB 3Fh
	DEFB 07h
	DEFB 0FFh
	DEFB 0E0h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 80h
	DEFB 78h
	DEFB 3Eh
	DEFB 0Fh
	DEFB 0C1h
	DEFB 0E1h
	DEFB 1Fh
	DEFB 07h
	DEFB 0C7h
	DEFB 0C7h
	DEFB 00h
	DEFB 88h
	DEFB 31h
	DEFB 0Fh
	DEFB 0FCh
	DEFB 73h
	DEFB 8Ch
	DEFB 78h
	DEFB 0E3h
	DEFB 88h
	DEFB 71h
	DEFB 0CEh
	DEFB 30h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 1Eh
	DEFB 30h
	DEFB 0F1h
	DEFB 8Fh
	DEFB 0FEh
	DEFB 39h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 89h
	DEFB 8Eh
	DEFB 62h
	DEFB 1Ch
	DEFB 63h
	DEFB 0C7h
	DEFB 0F1h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 10h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C0h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 01h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0C0h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 37h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 0F1h
	DEFB 0F1h
	DEFB 00h
	DEFB 0Eh
	DEFB 03h
	DEFB 0FFh
	DEFB 09h
	DEFB 0E1h
	DEFB 1Eh
	DEFB 20h
	DEFB 0F0h
	DEFB 1Eh
	DEFB 07h
	DEFB 0C4h
	DEFB 38h
	DEFB 0E3h
	DEFB 0C7h
	DEFB 0C4h
	DEFB 3Ch
	DEFB 23h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0C7h
	DEFB 0F0h
	DEFB 3Ch
	DEFB 07h
	DEFB 08h
	DEFB 0F0h
	DEFB 0Ch
	DEFB 23h
	DEFB 8Fh
	DEFB 81h
	DEFB 80h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FCh
	DEFB 23h
	DEFB 88h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 80h
	DEFB 0F0h
	DEFB 8Eh
	DEFB 20h
	DEFB 0C0h
	DEFB 83h
	DEFB 0Eh
	DEFB 20h
	DEFB 31h
	DEFB 1Fh
	DEFB 0FEh
	DEFB 11h
	DEFB 0C1h
	DEFB 0FFh
	DEFB 81h
	DEFB 84h
	DEFB 60h
	DEFB 3Ch
	DEFB 47h
	DEFB 87h
	DEFB 0F1h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 25h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 10h
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C0h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Eh
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 80h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FCh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 25h
	DEFB 0E0h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0E1h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0E0h
	DEFB 00h
	DEFB 0E3h
	DEFB 0Ch
	DEFB 63h
	DEFB 0FEh
	DEFB 18h
	DEFB 0E3h
	DEFB 1Eh
	DEFB 08h
	DEFB 0E3h
	DEFB 1Ch
	DEFB 63h
	DEFB 8Ch
	DEFB 38h
	DEFB 0C3h
	DEFB 0C7h
	DEFB 8Ch
	DEFB 3Ch
	DEFB 63h
	DEFB 0FFh
	DEFB 8Ch
	DEFB 63h
	DEFB 0FFh
	DEFB 0C7h
	DEFB 0E3h
	DEFB 18h
	DEFB 0C7h
	DEFB 18h
	DEFB 0F0h
	DEFB 1Ch
	DEFB 63h
	DEFB 9Fh
	DEFB 0C3h
	DEFB 0C2h
	DEFB 18h
	DEFB 3Fh
	DEFB 0FEh
	DEFB 0Fh
	DEFB 0C1h
	DEFB 0F1h
	DEFB 0E1h
	DEFB 0C1h
	DEFB 0F8h
	DEFB 1Fh
	DEFB 01h
	DEFB 0E1h
	DEFB 87h
	DEFB 0Fh
	DEFB 0Ch
	DEFB 78h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 03h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 87h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 7Eh
	DEFB 0Fh
	DEFB 0CFh
	DEFB 0F8h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 25h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 08h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C0h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 80h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 25h
	DEFB 0E0h
	DEFB 7Ch
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0E1h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0F1h
	DEFB 0E3h
	DEFB 0C7h
	DEFB 1Ch
	DEFB 67h
	DEFB 0FEh
	DEFB 31h
	DEFB 0C7h
	DEFB 1Eh
	DEFB 10h
	DEFB 0E3h
	DEFB 38h
	DEFB 0C3h
	DEFB 1Ch
	DEFB 70h
	DEFB 0C7h
	DEFB 87h
	DEFB 1Ch
	DEFB 78h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 18h
	DEFB 63h
	DEFB 0FFh
	DEFB 0C7h
	DEFB 0C6h
	DEFB 18h
	DEFB 0CEh
	DEFB 38h
	DEFB 0E0h
	DEFB 0F8h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 37h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Ch
	DEFB 18h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0Ch
	DEFB 30h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0E1h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FCh
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 35h
	DEFB 0FCh
	DEFB 78h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0E1h
	DEFB 0E3h
	DEFB 86h
	DEFB 1Ch
	DEFB 3Fh
	DEFB 0FCh
	DEFB 21h
	DEFB 87h
	DEFB 1Ch
	DEFB 11h
	DEFB 0E1h
	DEFB 0F0h
	DEFB 0C6h
	DEFB 1Ch
	DEFB 71h
	DEFB 87h
	DEFB 8Fh
	DEFB 1Ch
	DEFB 70h
	DEFB 0E3h
	DEFB 0FEh
	DEFB 18h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 86h
	DEFB 38h
	DEFB 7Ch
	DEFB 38h
	DEFB 0E1h
	DEFB 0F0h
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 07h
	DEFB 0E0h
	DEFB 00h
	DEFB 01h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0F8h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 45h
	DEFB 0F8h
	DEFB 78h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0E3h
	DEFB 0C3h
	DEFB 8Eh
	DEFB 3Eh
	DEFB 1Fh
	DEFB 0FCh
	DEFB 73h
	DEFB 8Eh
	DEFB 1Ch
	DEFB 21h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 00h
	DEFB 0Eh
	DEFB 18h
	DEFB 71h
	DEFB 8Fh
	DEFB 8Eh
	DEFB 18h
	DEFB 71h
	DEFB 0C3h
	DEFB 0FEh
	DEFB 01h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 80h
	DEFB 7Ch
	DEFB 3Ch
	DEFB 70h
	DEFB 0E1h
	DEFB 0F1h
	DEFB 0C3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 38h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 01h
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 45h
	DEFB 0F8h
	DEFB 78h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0E3h
	DEFB 0C7h
	DEFB 8Eh
	DEFB 3Eh
	DEFB 1Fh
	DEFB 0FCh
	DEFB 7Fh
	DEFB 8Eh
	DEFB 38h
	DEFB 63h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 00h
	DEFB 1Eh
	DEFB 38h
	DEFB 61h
	DEFB 0Fh
	DEFB 1Eh
	DEFB 38h
	DEFB 0F1h
	DEFB 0C7h
	DEFB 0FEh
	DEFB 03h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 80h
	DEFB 0FCh
	DEFB 3Ch
	DEFB 71h
	DEFB 0E3h
	DEFB 0F1h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 37h
	DEFB 0E1h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 01h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 45h
	DEFB 0F8h
	DEFB 0F8h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0E3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0C7h
	DEFB 0C7h
	DEFB 00h
	DEFB 8Ch
	DEFB 3Fh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 7Fh
	DEFB 8Ch
	DEFB 38h
	DEFB 0E3h
	DEFB 0F8h
	DEFB 71h
	DEFB 0FEh
	DEFB 30h
	DEFB 0E2h
	DEFB 0Fh
	DEFB 1Eh
	DEFB 30h
	DEFB 0F1h
	DEFB 87h
	DEFB 0FEh
	DEFB 3Fh
	DEFB 0C7h
	DEFB 0FFh
	DEFB 8Fh
	DEFB 8Fh
	DEFB 00h
	DEFB 0FEh
	DEFB 1Ch
	DEFB 61h
	DEFB 0C3h
	DEFB 0F1h
	DEFB 87h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 30h
	DEFB 38h
	DEFB 38h
	DEFB 0Ch
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 38h
	DEFB 38h
	DEFB 1Ah
	DEFB 70h
	DEFB 70h
	DEFB 04h
	DEFB 38h
	DEFB 38h
	DEFB 19h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 38h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 11h
	DEFB 70h
	DEFB 70h
	DEFB 07h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 70h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 04h
	DEFB 38h
	DEFB 38h
	DEFB 02h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 0Eh
	DEFB 70h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 04h
	DEFB 38h
	DEFB 38h
	DEFB 03h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 0Ch
	DEFB 70h
	DEFB 70h
	DEFB 0Bh
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 0Bh
	DEFB 70h
	DEFB 70h
	DEFB 11h
	DEFB 38h
	DEFB 38h
	DEFB 0Bh
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 05h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 02h
	DEFB 38h
	DEFB 38h
	DEFB 08h
	DEFB 70h
	DEFB 38h
	DEFB 70h
	DEFB 70h
	DEFB 0Ch
	DEFB 38h
	DEFB 70h
	DEFB 70h
	DEFB 04h
	DEFB 30h
	DEFB 70h
	DEFB 38h
	DEFB 38h
	DEFB 05h
	DEFB 70h
	DEFB 70h
	DEFB 17h
	DEFB 38h
	DEFB 38h
	DEFB 05h
	DEFB 70h
	DEFB 70h
	DEFB 16h
	DEFB 30h
	DEFB 38h
	DEFB 38h
	DEFB 06h
	DEFB 70h
	DEFB 70h
	DEFB 15h
	DEFB 38h
	DEFB 38h
	DEFB 07h
	DEFB 70h
	DEFB 70h
	DEFB 15h
	DEFB 38h
	DEFB 38h
	DEFB 08h
	DEFB 70h
	DEFB 70h
	DEFB 15h
	DEFB 38h
	DEFB 38h
	DEFB 07h
	DEFB 70h
	DEFB 70h
	DEFB 15h
	DEFB 38h
	DEFB 38h
	DEFB 08h
	DEFB 70h
	DEFB 70h
	DEFB 12h
	DEFB 38h
	DEFB 38h
	DEFB 0Ah
	DEFB 70h
	DEFB 70h
	DEFB 12h
	DEFB 38h
	DEFB 38h
	DEFB 0Ah
	DEFB 70h
	DEFB 70h
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 05h
	DEFB 70h
	DEFB 70h
	DEFB 06h
	DEFB 38h
	DEFB 38h
	DEFB 03h
	DEFB 70h
	DEFB 70h
	DEFB 9Eh
__LABEL485:
	DEFW 0000h
	DEFB 01h
_imgPiedra:
	DEFW __LABEL486
_imgPiedra.__DATA__.__PTR__:
	DEFW _imgPiedra.__DATA__
_imgPiedra.__DATA__:
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 00h
	DEFB 1Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 00h
	DEFB 7Fh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 7Fh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 7Fh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Dh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 60h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Dh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Dh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 70h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 01h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Dh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Dh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ah
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FEh
	DEFB 07h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 01h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Ah
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 3Fh
	DEFB 83h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0F0h
	DEFB 03h
	DEFB 52h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0FCh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 3Fh
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0F0h
	DEFB 01h
	DEFB 24h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 81h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 17h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0E7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 80h
	DEFB 00h
	DEFB 60h
	DEFB 40h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F0h
	DEFB 08h
	DEFB 81h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 3Fh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0C3h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0D3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 5Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 80h
	DEFB 00h
	DEFB 80h
	DEFB 40h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0F8h
	DEFB 7Eh
	DEFB 03h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 02h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 3Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0E7h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0F9h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0CFh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 70h
	DEFB 0FFh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0C0h
	DEFB 00h
	DEFB 81h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0F8h
	DEFB 0FEh
	DEFB 2Fh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 1Ch
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 14h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0C0h
	DEFB 00h
	DEFB 80h
	DEFB 80h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0C1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 11h
	DEFB 0E0h
	DEFB 08h
	DEFB 0C9h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 9Fh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 12h
	DEFB 0F3h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 10h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Dh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 07h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0F0h
	DEFB 05h
	DEFB 52h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Eh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 13h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0E0h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 80h
	DEFB 00h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 03h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 01h
	DEFB 0E0h
	DEFB 78h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0Fh
	DEFB 83h
	DEFB 0C3h
	DEFB 0C3h
	DEFB 00h
	DEFB 0C1h
	DEFB 0E6h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0EFh
	DEFB 9Eh
	DEFB 1Eh
	DEFB 3Ch
	DEFB 1Eh
	DEFB 78h
	DEFB 7Eh
	DEFB 07h
	DEFB 81h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 0C3h
	DEFB 0F7h
	DEFB 0E7h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 78h
	DEFB 70h
	DEFB 0FCh
	DEFB 7Eh
	DEFB 7Ch
	DEFB 3Fh
	DEFB 0E3h
	DEFB 0C0h
	DEFB 0Fh
	DEFB 0E1h
	DEFB 0FEh
	DEFB 07h
	DEFB 0C7h
	DEFB 0C7h
	DEFB 00h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0F0h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 00h
	DEFB 0FFh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 03h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 3Fh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 01h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0Fh
	DEFB 03h
	DEFB 83h
	DEFB 0C3h
	DEFB 0C1h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0CFh
	DEFB 0BCh
	DEFB 1Eh
	DEFB 7Ch
	DEFB 3Ch
	DEFB 78h
	DEFB 7Ch
	DEFB 07h
	DEFB 81h
	DEFB 0E1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 0E0h
	DEFB 07h
	DEFB 83h
	DEFB 0E7h
	DEFB 0C3h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 78h
	DEFB 70h
	DEFB 78h
	DEFB 7Ch
	DEFB 78h
	DEFB 1Fh
	DEFB 0C1h
	DEFB 0C0h
	DEFB 07h
	DEFB 0C0h
	DEFB 0F8h
	DEFB 07h
	DEFB 87h
	DEFB 87h
	DEFB 00h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0E0h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 03h
	DEFB 0F8h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 01h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 70h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 7Eh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FCh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 03h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 0Fh
	DEFB 07h
	DEFB 83h
	DEFB 0C7h
	DEFB 81h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 9Fh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 78h
	DEFB 3Ch
	DEFB 0F0h
	DEFB 78h
	DEFB 07h
	DEFB 01h
	DEFB 0E1h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 03h
	DEFB 0C0h
	DEFB 00h
	DEFB 01h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 7Ch
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 03h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 01h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 1Eh
	DEFB 07h
	DEFB 87h
	DEFB 87h
	DEFB 00h
	DEFB 80h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 1Fh
	DEFB 1Eh
	DEFB 78h
	DEFB 3Ch
	DEFB 0F8h
	DEFB 7Bh
	DEFB 0E0h
	DEFB 0F8h
	DEFB 0Fh
	DEFB 03h
	DEFB 0C3h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0FEh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FEh
	DEFB 01h
	DEFB 0FFh
	DEFB 80h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 00h
	DEFB 0FFh
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0F8h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 78h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 03h
	DEFB 0C1h
	DEFB 0E0h
	DEFB 1Eh
	DEFB 0E0h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 1Eh
	DEFB 3Ch
	DEFB 1Eh
	DEFB 0Fh
	DEFB 01h
	DEFB 0F0h
	DEFB 79h
	DEFB 0E7h
	DEFB 0FCh
	DEFB 0Fh
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 1Eh
	DEFB 07h
	DEFB 07h
	DEFB 00h
	DEFB 8Fh
	DEFB 80h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 1Eh
	DEFB 3Eh
	DEFB 78h
	DEFB 7Ch
	DEFB 0F8h
	DEFB 7Fh
	DEFB 80h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 03h
	DEFB 0C3h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Dh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0F0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0FCh
	DEFB 01h
	DEFB 0FFh
	DEFB 80h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0FCh
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0E0h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 03h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 0Fh
	DEFB 0C0h
	DEFB 78h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 03h
	DEFB 0C1h
	DEFB 0E0h
	DEFB 7Fh
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 0Fh
	DEFB 0BFh
	DEFB 7Eh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 07h
	DEFB 0F8h
	DEFB 7Bh
	DEFB 0E3h
	DEFB 0F0h
	DEFB 3Fh
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 1Ch
	DEFB 0Fh
	DEFB 07h
	DEFB 8Fh
	DEFB 00h
	DEFB 7Ch
	DEFB 0FFh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 00h
	DEFB 0F0h
	DEFB 79h
	DEFB 0F0h
	DEFB 78h
	DEFB 00h
	DEFB 0F0h
	DEFB 0Fh
	DEFB 03h
	DEFB 0C7h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0FBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 0F8h
	DEFB 01h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 80h
	DEFB 0FFh
	DEFB 07h
	DEFB 0F0h
	DEFB 0FFh
	DEFB 0C0h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 1Fh
	DEFB 0E0h
	DEFB 78h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 07h
	DEFB 0FFh
	DEFB 0F0h
	DEFB 0F3h
	DEFB 0E1h
	DEFB 0E7h
	DEFB 0FFh
	DEFB 07h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0Fh
	DEFB 1Eh
	DEFB 0Fh
	DEFB 38h
	DEFB 7Fh
	DEFB 0E3h
	DEFB 0C0h
	DEFB 79h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 3Ch
	DEFB 0Fh
	DEFB 07h
	DEFB 9Fh
	DEFB 07h
	DEFB 3Ch
	DEFB 0FFh
	DEFB 3Ch
	DEFB 78h
	DEFB 0F0h
	DEFB 7Bh
	DEFB 0F0h
	DEFB 78h
	DEFB 31h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 33h
	DEFB 0C7h
	DEFB 87h
	DEFB 87h
	DEFB 01h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 04h
	DEFB 0F0h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 01h
	DEFB 80h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 05h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 03h
	DEFB 0F0h
	DEFB 01h
	DEFB 0FFh
	DEFB 80h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0Fh
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 0FFh
	DEFB 0FEh
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 17h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Ch
	DEFB 01h
	DEFB 0E0h
	DEFB 78h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 1Bh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 0E1h
	DEFB 0E3h
	DEFB 0E1h
	DEFB 0C7h
	DEFB 0FFh
	DEFB 07h
	DEFB 0FFh
	DEFB 0DEh
	DEFB 0Fh
	DEFB 1Eh
	DEFB 1Eh
	DEFB 00h
	DEFB 38h
	DEFB 7Fh
	DEFB 0E3h
	DEFB 80h
	DEFB 0F1h
	DEFB 0E0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0Bh
	DEFB 78h
	DEFB 0Fh
	DEFB 0C7h
	DEFB 0BFh
	DEFB 0Fh
	DEFB 38h
	DEFB 0FFh
	DEFB 78h
	DEFB 78h
	DEFB 00h
	DEFB 0FCh
	DEFB 7Fh
	DEFB 76h
	DEFB 78h
	DEFB 71h
	DEFB 0E0h
	DEFB 0Fh
	DEFB 73h
	DEFB 0CFh
	DEFB 07h
	DEFB 0C7h
	DEFB 0C7h
	DEFB 00h
	DEFB 0C0h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 02h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 05h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 0Bh
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 0Dh
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 0Ch
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 0Ch
	DEFB 50h
	DEFB 38h
	DEFB 38h
	DEFB 0Eh
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 0Bh
	DEFB 50h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 0Bh
	DEFB 50h
	DEFB 38h
	DEFB 38h
	DEFB 10h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 0Ah
	DEFB 50h
	DEFB 38h
	DEFB 38h
	DEFB 10h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 08h
	DEFB 50h
	DEFB 7Ah
	DEFB 50h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 10h
	DEFB 50h
	DEFB 10h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 05h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 50h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 05h
	DEFB 50h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 10h
	DEFB 10h
	DEFB 00h
	DEFB 38h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 06h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 10h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 10h
	DEFB 38h
	DEFB 10h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 08h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 0Eh
	DEFB 50h
	DEFB 38h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 0Bh
	DEFB 50h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 07h
	DEFB 50h
	DEFB 7Ah
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 10h
	DEFB 50h
	DEFB 50h
	DEFB 02h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 04h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 0Eh
	DEFB 50h
	DEFB 50h
	DEFB 02h
	DEFB 7Ah
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 02h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 00h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 10h
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 06h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 0Ah
	DEFB 50h
	DEFB 50h
	DEFB 02h
	DEFB 10h
	DEFB 38h
	DEFB 38h
	DEFB 02h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 05h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 03h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 04h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 00h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 05h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 50h
	DEFB 50h
	DEFB 05h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 50h
	DEFB 50h
	DEFB 03h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 06h
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 02h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 50h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 00h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 38h
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 50h
	DEFB 50h
	DEFB 00h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 17h
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 0Ch
	DEFB 50h
	DEFB 50h
	DEFB 01h
	DEFB 7Ah
	DEFB 7Ah
	DEFB 1Bh
	DEFB 50h
	DEFB 50h
	DEFB 04h
	DEFB 7Ah
	DEFB 50h
	DEFB 50h
	DEFB 0Ah
	DEFB 7Ah
	DEFB 7Ah
	DEFB 0Bh
	DEFB 50h
	DEFB 50h
	DEFB 04h
	DEFB 7Ah
	DEFB 50h
	DEFB 50h
	DEFB 0Dh
	DEFB 7Ah
	DEFB 7Ah
	DEFB 08h
	DEFB 50h
	DEFB 50h
	DEFB 04h
	DEFB 7Ah
	DEFB 50h
	DEFB 50h
	DEFB 0Dh
	DEFB 7Ah
	DEFB 7Ah
	DEFB 02h
__LABEL486:
	DEFW 0000h
	DEFB 01h
_vectImgCielo:
	DEFW __LABEL487
_vectImgCielo.__DATA__.__PTR__:
	DEFW _vectImgCielo.__DATA__
_vectImgCielo.__DATA__:
	DEFB 0CAh
	DEFB 9Fh
	DEFB 0DBh
	DEFB 12h
	DEFB 0CCh
	DEFB 1Bh
	DEFB 0CBh
	DEFB 0CAh
	DEFB 0A0h
	DEFB 10h
	DEFB 07h
	DEFB 0A0h
	DEFB 20h
	DEFB 0Eh
	DEFB 0A9h
	DEFB 2Ch
	DEFB 08h
	DEFB 9Bh
	DEFB 2Fh
	DEFB 0Ah
	DEFB 0CCh
	DEFB 1Ch
	DEFB 1Bh
	DEFB 23h
	DEFB 32h
	DEFB 15h
	DEFB 31h
	DEFB 18h
	DEFB 2Ah
	DEFB 21h
	DEFB 29h
	DEFB 1Bh
	DEFB 2Ch
	DEFB 1Ch
	DEFB 2Fh
	DEFB 20h
	DEFB 15h
	DEFB 20h
	DEFB 10h
	DEFB 0CAh
	DEFB 0A6h
	DEFB 5Ah
	DEFB 0Ah
	DEFB 0A6h
	DEFB 62h
	DEFB 0Ch
	DEFB 0ADh
	DEFB 6Dh
	DEFB 08h
	DEFB 0CCh
	DEFB 1Eh
	DEFB 64h
	DEFB 19h
	DEFB 5Fh
	DEFB 0Fh
	DEFB 62h
	DEFB 14h
	DEFB 69h
	DEFB 11h
	DEFB 72h
	DEFB 1Ah
	DEFB 53h
	DEFB 0CAh
	DEFB 93h
	DEFB 90h
	DEFB 09h
	DEFB 91h
	DEFB 9Bh
	DEFB 0Ah
	DEFB 9Bh
	DEFB 0A3h
	DEFB 07h
	DEFB 0CCh
	DEFB 2Ch
	DEFB 9Eh
	DEFB 2Dh
	DEFB 95h
	DEFB 2Bh
	DEFB 8Ah
	DEFB 28h
	DEFB 0A0h
	DEFB 22h
	DEFB 0A3h
	DEFB 0CAh
	DEFB 70h
	DEFB 48h
	DEFB 07h
	DEFB 70h
	DEFB 57h
	DEFB 07h
	DEFB 0CDh
	DEFB 0Ah
	DEFB 0Ah
	DEFB 0Ah
	DEFB 0Bh
	DEFB 09h
	DEFB 0Bh
	DEFB 0Ah
	DEFB 09h
	DEFB 0Ah
	DEFB 08h
	DEFB 09h
	DEFB 08h
	DEFB 0CAh
	DEFB 77h
	DEFB 79h
	DEFB 06h
	DEFB 77h
	DEFB 87h
	DEFB 07h
	DEFB 0CDh
	DEFB 09h
	DEFB 10h
	DEFB 09h
	DEFB 11h
	DEFB 08h
	DEFB 11h
	DEFB 09h
	DEFB 0Fh
	DEFB 09h
	DEFB 0Eh
	DEFB 08h
	DEFB 0Eh
	DEFB 0CAh
	DEFB 86h
	DEFB 59h
	DEFB 06h
	DEFB 86h
	DEFB 66h
	DEFB 06h
	DEFB 0CDh
	DEFB 07h
	DEFB 0Ch
	DEFB 07h
	DEFB 0Dh
	DEFB 06h
	DEFB 0Dh
	DEFB 07h
	DEFB 0Bh
	DEFB 07h
	DEFB 0Ah
	DEFB 06h
	DEFB 0Ah
	DEFB 0FFh
	DEFB 38h
	DEFB 38h
	DEFB 22h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 09h
	DEFB 3Eh
	DEFB 3Eh
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 03h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 08h
	DEFB 3Eh
	DEFB 3Eh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 05h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 02h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Eh
	DEFB 3Eh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 05h
	DEFB 38h
	DEFB 38h
	DEFB 00h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 02h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Eh
	DEFB 3Eh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 02h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 04h
	DEFB 38h
	DEFB 38h
	DEFB 06h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 04h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Eh
	DEFB 3Eh
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 11h
	DEFB 3Dh
	DEFB 3Dh
	DEFB 02h
	DEFB 38h
	DEFB 38h
	DEFB 03h
	DEFB 3Eh
	DEFB 3Eh
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 14h
	DEFB 3Dh
	DEFB 38h
	DEFB 38h
	DEFB 0FFh
	DEFB 38h
	DEFB 38h
	DEFB 69h
	DEFB 24h
	DEFB 24h
	DEFB 9Eh
__LABEL487:
	DEFW 0000h
	DEFB 01h
_vectImgTemplo:
	DEFW __LABEL488
_vectImgTemplo.__DATA__.__PTR__:
	DEFW _vectImgTemplo.__DATA__
_vectImgTemplo.__DATA__:
	DEFB 0CAh
	DEFB 0A5h
	DEFB 7Dh
	DEFB 19h
	DEFB 0A5h
	DEFB 7Dh
	DEFB 13h
	DEFB 0A2h
	DEFB 0D6h
	DEFB 15h
	DEFB 0A2h
	DEFB 0D5h
	DEFB 0Eh
	DEFB 0A4h
	DEFB 24h
	DEFB 15h
	DEFB 0A4h
	DEFB 22h
	DEFB 10h
	DEFB 0C8h
	DEFB 0A5h
	DEFB 39h
	DEFB 0ABh
	DEFB 64h
	DEFB 0A8h
	DEFB 97h
	DEFB 0A5h
	DEFB 0C1h
	DEFB 9Ch
	DEFB 37h
	DEFB 0A3h
	DEFB 64h
	DEFB 0A2h
	DEFB 98h
	DEFB 0A0h
	DEFB 0C0h
	DEFB 0C9h
	DEFB 0A8h
	DEFB 73h
	DEFB 9Fh
	DEFB 87h
	DEFB 0C8h
	DEFB 0A3h
	DEFB 7Dh
	DEFB 0AEh
	DEFB 87h
	DEFB 0A3h
	DEFB 7Ch
	DEFB 0AFh
	DEFB 74h
	DEFB 0CAh
	DEFB 0A7h
	DEFB 1Ch
	DEFB 03h
	DEFB 0A5h
	DEFB 20h
	DEFB 03h
	DEFB 0A8h
	DEFB 23h
	DEFB 04h
	DEFB 0A4h
	DEFB 0CEh
	DEFB 03h
	DEFB 0A1h
	DEFB 0D3h
	DEFB 06h
	DEFB 0A5h
	DEFB 0DBh
	DEFB 05h
	DEFB 0C8h
	DEFB 89h
	DEFB 0FFh
	DEFB 89h
	DEFB 00h
	DEFB 86h
	DEFB 00h
	DEFB 86h
	DEFB 0FFh
	DEFB 0AFh
	DEFB 74h
	DEFB 0AEh
	DEFB 86h
	DEFB 0CCh
	DEFB 13h
	DEFB 7Ah
	DEFB 1Ah
	DEFB 7Dh
	DEFB 0C8h
	DEFB 0A3h
	DEFB 7Dh
	DEFB 9Ah
	DEFB 87h
	DEFB 9Ah
	DEFB 87h
	DEFB 9Ah
	DEFB 7Fh
	DEFB 9Ah
	DEFB 7Fh
	DEFB 0A4h
	DEFB 7Ch
	DEFB 0A3h
	DEFB 7Bh
	DEFB 9Ah
	DEFB 77h
	DEFB 9Ah
	DEFB 77h
	DEFB 9Ah
	DEFB 6Fh
	DEFB 9Ah
	DEFB 6Fh
	DEFB 0A3h
	DEFB 7Ch
	DEFB 0CCh
	DEFB 22h
	DEFB 81h
	DEFB 1Eh
	DEFB 7Eh
	DEFB 23h
	DEFB 74h
	DEFB 0C9h
	DEFB 0A1h
	DEFB 0ABh
	DEFB 8Fh
	DEFB 0B3h
	DEFB 9Fh
	DEFB 4Ch
	DEFB 8Eh
	DEFB 53h
	DEFB 0B7h
	DEFB 9Dh
	DEFB 0A7h
	DEFB 0A2h
	DEFB 0B6h
	DEFB 55h
	DEFB 0A9h
	DEFB 5Ah
	DEFB 0FFh
	DEFB 07h
	DEFB 07h
	DEFB 0FFh
	DEFB 07h
	DEFB 07h
	DEFB 0FFh
	DEFB 07h
	DEFB 07h
	DEFB 0FCh
__LABEL488:
	DEFW 0000h
	DEFB 01h
_vectImgArena:
	DEFW __LABEL489
_vectImgArena.__DATA__.__PTR__:
	DEFW _vectImgArena.__DATA__
_vectImgArena.__DATA__:
	DEFB 0C8h
	DEFB 2Dh
	DEFB 33h
	DEFB 6Ah
	DEFB 29h
	DEFB 6Ah
	DEFB 29h
	DEFB 77h
	DEFB 33h
	DEFB 77h
	DEFB 33h
	DEFB 84h
	DEFB 38h
	DEFB 84h
	DEFB 38h
	DEFB 95h
	DEFB 1Dh
	DEFB 95h
	DEFB 1Dh
	DEFB 91h
	DEFB 00h
	DEFB 85h
	DEFB 36h
	DEFB 7Dh
	DEFB 1Ch
	DEFB 7Dh
	DEFB 1Ch
	DEFB 81h
	DEFB 00h
	DEFB 68h
	DEFB 25h
	DEFB 73h
	DEFB 15h
	DEFB 73h
	DEFB 16h
	DEFB 6Ah
	DEFB 06h
	DEFB 6Ah
	DEFB 06h
	DEFB 5Dh
	DEFB 15h
	DEFB 68h
	DEFB 28h
	DEFB 5Eh
	DEFB 15h
	DEFB 5Eh
	DEFB 16h
	DEFB 4Eh
	DEFB 2Ch
	DEFB 5Eh
	DEFB 14h
	DEFB 46h
	DEFB 13h
	DEFB 47h
	DEFB 14h
	DEFB 4Eh
	DEFB 2Dh
	DEFB 46h
	DEFB 13h
	DEFB 2Fh
	DEFB 0Ah
	DEFB 48h
	DEFB 13h
	DEFB 51h
	DEFB 00h
	DEFB 5Dh
	DEFB 13h
	DEFB 5Bh
	DEFB 09h
	DEFB 5Bh
	DEFB 09h
	DEFB 51h
	DEFB 00h
	DEFB 70h
	DEFB 0Fh
	DEFB 68h
	DEFB 12h
	DEFB 68h
	DEFB 12h
	DEFB 61h
	DEFB 0Fh
	DEFB 6Bh
	DEFB 04h
	DEFB 57h
	DEFB 04h
	DEFB 7Dh
	DEFB 1Ch
	DEFB 72h
	DEFB 16h
	DEFB 6Ah
	DEFB 04h
	DEFB 7Fh
	DEFB 0Ch
	DEFB 0CCh
	DEFB 37h
	DEFB 15h
	DEFB 58h
	DEFB 17h
	DEFB 6Fh
	DEFB 19h
	DEFB 0C8h
	DEFB 30h
	DEFB 0E3h
	DEFB 45h
	DEFB 0E8h
	DEFB 45h
	DEFB 0E8h
	DEFB 4Dh
	DEFB 0F6h
	DEFB 4Dh
	DEFB 0F6h
	DEFB 4Bh
	DEFB 0FFh
	DEFB 47h
	DEFB 0E8h
	DEFB 76h
	DEFB 0E8h
	DEFB 76h
	DEFB 0E8h
	DEFB 82h
	DEFB 0F2h
	DEFB 82h
	DEFB 0F3h
	DEFB 83h
	DEFB 0FFh
	DEFB 75h
	DEFB 0E8h
	DEFB 72h
	DEFB 0F3h
	DEFB 72h
	DEFB 0F3h
	DEFB 75h
	DEFB 0FFh
	DEFB 71h
	DEFB 0F4h
	DEFB 5Fh
	DEFB 0EFh
	DEFB 5Fh
	DEFB 0EFh
	DEFB 4Ah
	DEFB 0F3h
	DEFB 5Eh
	DEFB 0F0h
	DEFB 61h
	DEFB 0F9h
	DEFB 61h
	DEFB 0F8h
	DEFB 5Bh
	DEFB 0FFh
	DEFB 62h
	DEFB 0F9h
	DEFB 73h
	DEFB 0F9h
	DEFB 6Ch
	DEFB 0FAh
	DEFB 6Ah
	DEFB 0FFh
	DEFB 0CCh
	DEFB 41h
	DEFB 0F6h
	DEFB 0C8h
	DEFB 70h
	DEFB 0F4h
	DEFB 70h
	DEFB 0F8h
	DEFB 0CCh
	DEFB 5Ch
	DEFB 0F4h
	DEFB 0CBh
	DEFB 84h
	DEFB 38h
	DEFB 76h
	DEFB 0E8h
	DEFB 81h
	DEFB 98h
	DEFB 7Dh
	DEFB 35h
	DEFB 6Fh
	DEFB 0E7h
	DEFB 81h
	DEFB 99h
	DEFB 0C8h
	DEFB 6Bh
	DEFB 9Eh
	DEFB 65h
	DEFB 9Dh
	DEFB 6Bh
	DEFB 0A2h
	DEFB 66h
	DEFB 0A3h
	DEFB 6Ch
	DEFB 0A8h
	DEFB 66h
	DEFB 0A8h
	DEFB 6Ch
	DEFB 0ABh
	DEFB 67h
	DEFB 0ACh
	DEFB 74h
	DEFB 0E2h
	DEFB 6Fh
	DEFB 0E4h
	DEFB 73h
	DEFB 0DFh
	DEFB 6Fh
	DEFB 0E1h
	DEFB 72h
	DEFB 0DAh
	DEFB 6Dh
	DEFB 0DDh
	DEFB 71h
	DEFB 0D5h
	DEFB 6Dh
	DEFB 0D8h
	DEFB 70h
	DEFB 0D0h
	DEFB 6Bh
	DEFB 0D1h
	DEFB 70h
	DEFB 0CBh
	DEFB 6Bh
	DEFB 0CCh
	DEFB 6Fh
	DEFB 0C6h
	DEFB 69h
	DEFB 0C7h
	DEFB 6Eh
	DEFB 0C0h
	DEFB 68h
	DEFB 0C1h
	DEFB 6Dh
	DEFB 0BAh
	DEFB 68h
	DEFB 0BAh
	DEFB 6Dh
	DEFB 0B3h
	DEFB 68h
	DEFB 0B3h
	DEFB 6Dh
	DEFB 98h
	DEFB 65h
	DEFB 97h
	DEFB 6Dh
	DEFB 91h
	DEFB 67h
	DEFB 8Eh
	DEFB 6Dh
	DEFB 89h
	DEFB 67h
	DEFB 86h
	DEFB 6Eh
	DEFB 84h
	DEFB 68h
	DEFB 7Fh
	DEFB 70h
	DEFB 7Eh
	DEFB 6Bh
	DEFB 78h
	DEFB 70h
	DEFB 76h
	DEFB 6Bh
	DEFB 70h
	DEFB 72h
	DEFB 6Ah
	DEFB 6Eh
	DEFB 64h
	DEFB 75h
	DEFB 66h
	DEFB 70h
	DEFB 5Fh
	DEFB 71h
	DEFB 71h
	DEFB 6Ch
	DEFB 6Ch
	DEFB 72h
	DEFB 6Eh
	DEFB 6Ch
	DEFB 68h
	DEFB 76h
	DEFB 5Fh
	DEFB 71h
	DEFB 59h
	DEFB 71h
	DEFB 60h
	DEFB 6Fh
	DEFB 5Eh
	DEFB 6Bh
	DEFB 0CCh
	DEFB 69h
	DEFB 0CCh
	DEFB 68h
	DEFB 0B3h
	DEFB 66h
	DEFB 0B3h
	DEFB 6Bh
	DEFB 78h
	DEFB 6Ah
	DEFB 77h
	DEFB 77h
	DEFB 59h
	DEFB 72h
	DEFB 53h
	DEFB 0CCh
	DEFB 4Fh
	DEFB 0E2h
	DEFB 52h
	DEFB 0DBh
	DEFB 53h
	DEFB 0CDh
	DEFB 55h
	DEFB 0C3h
	DEFB 56h
	DEFB 0B6h
	DEFB 0C8h
	DEFB 68h
	DEFB 0ACh
	DEFB 66h
	DEFB 0ACh
	DEFB 0CCh
	DEFB 58h
	DEFB 0AAh
	DEFB 56h
	DEFB 0A0h
	DEFB 56h
	DEFB 93h
	DEFB 55h
	DEFB 84h
	DEFB 53h
	DEFB 74h
	DEFB 53h
	DEFB 6Ah
	DEFB 4Fh
	DEFB 62h
	DEFB 4Bh
	DEFB 57h
	DEFB 0C8h
	DEFB 77h
	DEFB 42h
	DEFB 6Eh
	DEFB 43h
	DEFB 6Eh
	DEFB 43h
	DEFB 70h
	DEFB 45h
	DEFB 70h
	DEFB 45h
	DEFB 6Dh
	DEFB 47h
	DEFB 6Dh
	DEFB 47h
	DEFB 76h
	DEFB 47h
	DEFB 7Fh
	DEFB 45h
	DEFB 79h
	DEFB 3Eh
	DEFB 80h
	DEFB 40h
	DEFB 7Ch
	DEFB 39h
	DEFB 78h
	DEFB 53h
	DEFB 75h
	DEFB 51h
	DEFB 7Bh
	DEFB 4Fh
	DEFB 78h
	DEFB 4Dh
	DEFB 77h
	DEFB 4Dh
	DEFB 77h
	DEFB 4Eh
	DEFB 78h
	DEFB 4Eh
	DEFB 75h
	DEFB 50h
	DEFB 0CCh
	DEFB 42h
	DEFB 3Dh
	DEFB 4Ch
	DEFB 46h
	DEFB 47h
	DEFB 51h
	DEFB 0FFh
	DEFB 38h
	DEFB 38h
	DEFB 89h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 02h
	DEFB 38h
	DEFB 38h
	DEFB 0Fh
	DEFB 3Ch
	DEFB 3Ch
	DEFB 04h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 12h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 05h
	DEFB 38h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 14h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 05h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 00h
	DEFB 38h
	DEFB 38h
	DEFB 12h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 01h
	DEFB 38h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 02h
	DEFB 38h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 03h
	DEFB 38h
	DEFB 38h
	DEFB 10h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 05h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 07h
	DEFB 38h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 01h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 04h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 01h
	DEFB 38h
	DEFB 38h
	DEFB 05h
	DEFB 3Ah
	DEFB 3Ah
	DEFB 14h
	DEFB 38h
	DEFB 38h
	DEFB 0Eh
	DEFB 3Ah
	DEFB 3Ah
	DEFB 0Ah
	DEFB 38h
	DEFB 38h
	DEFB 0C5h
	DEFB 00h
	DEFB 00h
	DEFB 0BEh
__LABEL489:
	DEFW 0000h
	DEFB 01h
_solidPattern:
	DEFW __LABEL490
_solidPattern.__DATA__.__PTR__:
	DEFW _solidPattern.__DATA__
_solidPattern.__DATA__:
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
__LABEL490:
	DEFW 0000h
	DEFB 01h
_graficosGenerales:
	DEFW __LABEL491
_graficosGenerales.__DATA__.__PTR__:
	DEFW _graficosGenerales.__DATA__
_graficosGenerales.__DATA__:
	DEFB 18h
	DEFB 3Ch
	DEFB 24h
	DEFB 7Eh
	DEFB 42h
	DEFB 0FFh
	DEFB 81h
	DEFB 0FFh
	DEFB 01h
	DEFB 19h
	DEFB 0D9h
	DEFB 0FFh
	DEFB 0D9h
	DEFB 19h
	DEFB 25h
	DEFB 25h
	DEFB 7Eh
	DEFB 0FFh
	DEFB 0A5h
	DEFB 0DBh
	DEFB 0DBh
	DEFB 0A5h
	DEFB 0FFh
	DEFB 7Eh
	DEFB 18h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Eh
	DEFB 7Eh
	DEFB 7Eh
	DEFB 3Ch
	DEFB 00h
	DEFB 0Ch
	DEFB 1Ch
	DEFB 3Eh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 7Ch
	DEFB 38h
	DEFB 3Ch
	DEFB 7Fh
	DEFB 0FEh
	DEFB 72h
	DEFB 65h
	DEFB 41h
	DEFB 22h
	DEFB 1Ch
	DEFB 03h
	DEFB 09h
	DEFB 70h
	DEFB 1Ch
	DEFB 38h
	DEFB 68h
	DEFB 0F0h
	DEFB 0C0h
	DEFB 0C0h
	DEFB 90h
	DEFB 0Eh
	DEFB 38h
	DEFB 1Ch
	DEFB 16h
	DEFB 0Fh
	DEFB 03h
	DEFB 0C3h
	DEFB 9Ch
	DEFB 0Eh
	DEFB 38h
	DEFB 1Ch
	DEFB 36h
	DEFB 0Fh
	DEFB 0C3h
	DEFB 0CBh
	DEFB 0CDh
	DEFB 4Ch
	DEFB 7Ah
	DEFB 9Dh
	DEFB 36h
	DEFB 0CFh
	DEFB 0D3h
	DEFB 0D6h
	DEFB 0BBh
	DEFB 0A5h
	DEFB 0C3h
	DEFB 22h
	DEFB 42h
	DEFB 28h
	DEFB 08h
	DEFB 04h
	DEFB 10h
	DEFB 44h
	DEFB 12h
	DEFB 81h
	DEFB 0A7h
	DEFB 0E5h
	DEFB 9Fh
	DEFB 30h
	DEFB 78h
	DEFB 30h
	DEFB 78h
	DEFB 78h
	DEFB 78h
	DEFB 30h
	DEFB 00h
	DEFB 0Ch
	DEFB 1Eh
	DEFB 0Ch
	DEFB 1Eh
	DEFB 1Eh
	DEFB 1Eh
	DEFB 0Ch
	DEFB 00h
	DEFB 0C3h
	DEFB 0E7h
	DEFB 66h
	DEFB 7Ch
	DEFB 18h
	DEFB 3Ch
	DEFB 66h
	DEFB 83h
	DEFB 40h
	DEFB 52h
	DEFB 92h
	DEFB 09h
	DEFB 20h
	DEFB 22h
	DEFB 8Ch
	DEFB 44h
	DEFB 10h
	DEFB 30h
	DEFB 0C8h
	DEFB 02h
	DEFB 25h
	DEFB 50h
	DEFB 02h
	DEFB 0Dh
	DEFB 00h
	DEFB 08h
	DEFB 18h
	DEFB 28h
	DEFB 24h
	DEFB 43h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 42h
	DEFB 99h
	DEFB 0BDh
	DEFB 99h
	DEFB 99h
	DEFB 81h
	DEFB 0FFh
	DEFB 3Ch
	DEFB 42h
	DEFB 0BDh
	DEFB 0DBh
	DEFB 0DBh
	DEFB 0BDh
	DEFB 42h
	DEFB 3Ch
__LABEL491:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_graficosCarrera:
	DEFW __LABEL492
_graficosCarrera.__DATA__.__PTR__:
	DEFW _graficosCarrera.__DATA__
_graficosCarrera.__DATA__:
	DEFB 07h
	DEFB 0Fh
	DEFB 3Eh
	DEFB 08h
	DEFB 08h
	DEFB 04h
	DEFB 03h
	DEFB 07h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 40h
	DEFB 0C0h
	DEFB 20h
	DEFB 40h
	DEFB 80h
	DEFB 0C0h
	DEFB 0Bh
	DEFB 13h
	DEFB 13h
	DEFB 03h
	DEFB 02h
	DEFB 3Ch
	DEFB 20h
	DEFB 00h
	DEFB 0A8h
	DEFB 90h
	DEFB 80h
	DEFB 80h
	DEFB 40h
	DEFB 20h
	DEFB 20h
	DEFB 30h
	DEFB 07h
	DEFB 0Fh
	DEFB 3Eh
	DEFB 08h
	DEFB 08h
	DEFB 04h
	DEFB 03h
	DEFB 07h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 40h
	DEFB 0C0h
	DEFB 20h
	DEFB 40h
	DEFB 80h
	DEFB 0C0h
	DEFB 07h
	DEFB 07h
	DEFB 03h
	DEFB 03h
	DEFB 03h
	DEFB 02h
	DEFB 04h
	DEFB 06h
	DEFB 0C0h
	DEFB 0C0h
	DEFB 0A0h
	DEFB 80h
	DEFB 80h
	DEFB 80h
	DEFB 80h
	DEFB 0C0h
	DEFB 0Bh
	DEFB 07h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 04h
	DEFB 03h
	DEFB 06h
	DEFB 40h
	DEFB 80h
	DEFB 44h
	DEFB 0C4h
	DEFB 24h
	DEFB 44h
	DEFB 84h
	DEFB 0C4h
	DEFB 0Ah
	DEFB 12h
	DEFB 12h
	DEFB 03h
	DEFB 02h
	DEFB 3Ch
	DEFB 20h
	DEFB 00h
	DEFB 0ACh
	DEFB 94h
	DEFB 84h
	DEFB 84h
	DEFB 44h
	DEFB 24h
	DEFB 20h
	DEFB 30h
	DEFB 0Bh
	DEFB 07h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 04h
	DEFB 03h
	DEFB 06h
	DEFB 40h
	DEFB 80h
	DEFB 40h
	DEFB 0C0h
	DEFB 20h
	DEFB 41h
	DEFB 82h
	DEFB 0C4h
	DEFB 06h
	DEFB 06h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 02h
	DEFB 04h
	DEFB 06h
	DEFB 0C8h
	DEFB 0D0h
	DEFB 0A0h
	DEFB 0C0h
	DEFB 80h
	DEFB 80h
	DEFB 80h
	DEFB 0C0h
	DEFB 4Ah
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FDh
	DEFB 0BFh
	DEFB 0F7h
	DEFB 0FFh
	DEFB 28h
	DEFB 0BDh
	DEFB 0FFh
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0BFh
	DEFB 0FFh
__LABEL492:
	DEFW 0000h
	DEFB 01h
_graficosPiedra:
	DEFW __LABEL493
_graficosPiedra.__DATA__.__PTR__:
	DEFW _graficosPiedra.__DATA__
_graficosPiedra.__DATA__:
	DEFB 07h
	DEFB 18h
	DEFB 20h
	DEFB 42h
	DEFB 41h
	DEFB 82h
	DEFB 8Ah
	DEFB 9Ch
	DEFB 0E0h
	DEFB 18h
	DEFB 04h
	DEFB 82h
	DEFB 02h
	DEFB 0C9h
	DEFB 69h
	DEFB 01h
	DEFB 88h
	DEFB 90h
	DEFB 84h
	DEFB 42h
	DEFB 45h
	DEFB 20h
	DEFB 18h
	DEFB 07h
	DEFB 01h
	DEFB 61h
	DEFB 11h
	DEFB 06h
	DEFB 08h
	DEFB 08h
	DEFB 10h
	DEFB 0E0h
	DEFB 07h
	DEFB 18h
	DEFB 20h
	DEFB 42h
	DEFB 41h
	DEFB 94h
	DEFB 88h
	DEFB 90h
	DEFB 0E0h
	DEFB 18h
	DEFB 04h
	DEFB 82h
	DEFB 0C2h
	DEFB 81h
	DEFB 69h
	DEFB 11h
	DEFB 80h
	DEFB 82h
	DEFB 82h
	DEFB 44h
	DEFB 30h
	DEFB 08h
	DEFB 08h
	DEFB 07h
	DEFB 29h
	DEFB 61h
	DEFB 41h
	DEFB 02h
	DEFB 62h
	DEFB 04h
	DEFB 18h
	DEFB 0E0h
	DEFB 07h
	DEFB 08h
	DEFB 10h
	DEFB 10h
	DEFB 60h
	DEFB 88h
	DEFB 86h
	DEFB 80h
	DEFB 0E0h
	DEFB 18h
	DEFB 04h
	DEFB 0A2h
	DEFB 42h
	DEFB 21h
	DEFB 09h
	DEFB 11h
	DEFB 80h
	DEFB 96h
	DEFB 93h
	DEFB 40h
	DEFB 41h
	DEFB 20h
	DEFB 18h
	DEFB 07h
	DEFB 39h
	DEFB 51h
	DEFB 41h
	DEFB 82h
	DEFB 42h
	DEFB 04h
	DEFB 18h
	DEFB 0E0h
	DEFB 07h
	DEFB 18h
	DEFB 20h
	DEFB 46h
	DEFB 40h
	DEFB 82h
	DEFB 86h
	DEFB 94h
	DEFB 0E0h
	DEFB 10h
	DEFB 10h
	DEFB 0Ch
	DEFB 22h
	DEFB 41h
	DEFB 41h
	DEFB 01h
	DEFB 88h
	DEFB 96h
	DEFB 81h
	DEFB 43h
	DEFB 41h
	DEFB 20h
	DEFB 18h
	DEFB 07h
	DEFB 09h
	DEFB 11h
	DEFB 29h
	DEFB 82h
	DEFB 42h
	DEFB 04h
	DEFB 18h
	DEFB 0E0h
__LABEL493:
	DEFW 0000h
	DEFB 01h
_graficosTemplo:
	DEFW __LABEL494
_graficosTemplo.__DATA__.__PTR__:
	DEFW _graficosTemplo.__DATA__
_graficosTemplo.__DATA__:
	DEFB 07h
	DEFB 0Fh
	DEFB 3Eh
	DEFB 08h
	DEFB 08h
	DEFB 04h
	DEFB 03h
	DEFB 07h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 40h
	DEFB 0C0h
	DEFB 20h
	DEFB 40h
	DEFB 80h
	DEFB 0C0h
	DEFB 0Bh
	DEFB 13h
	DEFB 13h
	DEFB 03h
	DEFB 02h
	DEFB 3Ch
	DEFB 20h
	DEFB 00h
	DEFB 0A8h
	DEFB 90h
	DEFB 80h
	DEFB 80h
	DEFB 40h
	DEFB 20h
	DEFB 20h
	DEFB 30h
	DEFB 07h
	DEFB 0Fh
	DEFB 3Eh
	DEFB 08h
	DEFB 08h
	DEFB 04h
	DEFB 03h
	DEFB 07h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 40h
	DEFB 0C0h
	DEFB 20h
	DEFB 40h
	DEFB 80h
	DEFB 0C0h
	DEFB 07h
	DEFB 07h
	DEFB 03h
	DEFB 03h
	DEFB 03h
	DEFB 02h
	DEFB 04h
	DEFB 06h
	DEFB 0C0h
	DEFB 0C0h
	DEFB 0A0h
	DEFB 80h
	DEFB 80h
	DEFB 80h
	DEFB 80h
	DEFB 0C0h
	DEFB 77h
	DEFB 88h
	DEFB 9Ch
	DEFB 0A0h
	DEFB 0A6h
	DEFB 80h
	DEFB 80h
	DEFB 7Fh
	DEFB 0F7h
	DEFB 08h
	DEFB 00h
	DEFB 60h
	DEFB 0Eh
	DEFB 00h
	DEFB 20h
	DEFB 0DFh
	DEFB 0BEh
	DEFB 41h
	DEFB 1Dh
	DEFB 01h
	DEFB 09h
	DEFB 71h
	DEFB 01h
	DEFB 0FEh
	DEFB 0FFh
	DEFB 7Eh
	DEFB 7Eh
	DEFB 3Ch
	DEFB 7Eh
	DEFB 18h
	DEFB 18h
	DEFB 18h
	DEFB 54h
	DEFB 34h
	DEFB 7Dh
	DEFB 0D6h
	DEFB 7Ch
	DEFB 6Ah
	DEFB 2Ch
	DEFB 38h
	DEFB 0A5h
	DEFB 66h
	DEFB 3Ch
	DEFB 3Ch
	DEFB 5Ah
	DEFB 7Eh
	DEFB 0BDh
	DEFB 0E7h
	DEFB 00h
	DEFB 00h
	DEFB 64h
	DEFB 25h
	DEFB 0D3h
	DEFB 4Fh
	DEFB 2Fh
	DEFB 1Fh
	DEFB 04h
	DEFB 9Eh
	DEFB 0A7h
	DEFB 47h
	DEFB 43h
	DEFB 0CBh
	DEFB 0AFh
	DEFB 12h
__LABEL494:
	DEFW 0000h
	DEFB 01h
_graficosArena:
	DEFW __LABEL495
_graficosArena.__DATA__.__PTR__:
	DEFW _graficosArena.__DATA__
_graficosArena.__DATA__:
	DEFB 07h
	DEFB 0Fh
	DEFB 3Eh
	DEFB 08h
	DEFB 08h
	DEFB 04h
	DEFB 03h
	DEFB 07h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 40h
	DEFB 0C0h
	DEFB 20h
	DEFB 40h
	DEFB 80h
	DEFB 0C0h
	DEFB 0Bh
	DEFB 13h
	DEFB 13h
	DEFB 03h
	DEFB 02h
	DEFB 3Ch
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0A8h
	DEFB 90h
	DEFB 80h
	DEFB 80h
	DEFB 40h
	DEFB 22h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 07h
	DEFB 0Fh
	DEFB 3Eh
	DEFB 08h
	DEFB 08h
	DEFB 04h
	DEFB 03h
	DEFB 07h
	DEFB 0C0h
	DEFB 0F0h
	DEFB 40h
	DEFB 0C0h
	DEFB 20h
	DEFB 40h
	DEFB 80h
	DEFB 0C0h
	DEFB 07h
	DEFB 07h
	DEFB 03h
	DEFB 03h
	DEFB 03h
	DEFB 0BBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0C0h
	DEFB 0C0h
	DEFB 0A0h
	DEFB 80h
	DEFB 80h
	DEFB 0C6h
	DEFB 0EFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 0BBh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 80h
	DEFB 0C6h
	DEFB 0EFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 38h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 20h
	DEFB 61h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 61h
	DEFB 20h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 86h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 86h
	DEFB 04h
	DEFB 00h
	DEFB 3Ch
	DEFB 18h
	DEFB 18h
	DEFB 18h
	DEFB 18h
	DEFB 7Eh
	DEFB 3Ch
	DEFB 18h
__LABEL495:
	DEFW 0000h
	DEFB 01h
_Isla:
	DEFW __LABEL496
_Isla.__DATA__.__PTR__:
	DEFW _Isla.__DATA__
_Isla.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL496:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_Camino:
	DEFW __LABEL497
_Camino.__DATA__.__PTR__:
	DEFW _Camino.__DATA__
_Camino.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL497:
	DEFW 0000h
	DEFB 01h
_Tesoro:
	DEFW __LABEL498
_Tesoro.__DATA__.__PTR__:
	DEFW _Tesoro.__DATA__
_Tesoro.__DATA__:
	DEFB 00h
	DEFB 00h
__LABEL498:
	DEFW 0000h
	DEFB 01h
_ArenasMovedizas:
	DEFW __LABEL499
_ArenasMovedizas.__DATA__.__PTR__:
	DEFW _ArenasMovedizas.__DATA__
_ArenasMovedizas.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL499:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_Jugador:
	DEFW __LABEL500
_Jugador.__DATA__.__PTR__:
	DEFW _Jugador.__DATA__
_Jugador.__DATA__:
	DEFB 00h
	DEFB 00h
__LABEL500:
	DEFW 0000h
	DEFB 01h
_Piratas:
	DEFW __LABEL501
_Piratas.__DATA__.__PTR__:
	DEFW _Piratas.__DATA__
_Piratas.__DATA__:
	DEFB 00h
	DEFB 00h
__LABEL501:
	DEFW 0000h
	DEFB 01h
__LABEL451:
	DEFB 00h
	DEFB 40h
__LABEL452:
	DEFB 00h
	DEFB 58h
__LABEL465:
	DEFB 08h
__LABEL467:
	DEFB 18h
__LABEL468:
	DEFB 10h
__LABEL469:
	DEFB 07h
__LABEL470:
	DEFB 12h
__LABEL476:
	DEFB 0Ch
__LABEL477:
	DEFB 1Ch
__LABEL479:
	DEFB 0FFh
	DEFB 5Ah
ZXBASIC_MEM_HEAP:
	; Defines DATA END
ZXBASIC_USER_DATA_END EQU ZXBASIC_MEM_HEAP + ZXBASIC_HEAP_SIZE
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	END
